,SS GroundT,Cat GroundT,Description,Return,Parameters,ApiLevel
<android.accessibilityservice.AccessibilityServiceInfo: int getNonInteractiveUiTimeoutMillis()>,3,,Get the recommended timeout for non-interactive controls.,int The timeout in milliseconds. |||,,29
"<android.app.Activity: void onGetDirectActions(CancellationSignal,Consumer)>",1,,"Returns the list of direct actions supported by the app. You should return the list of actions that could be executed in the
 current context which is in the current state of the app. If the actions
 that could be executed by the app changes you should report that via
 calling VoiceInteractor#notifyDirectActionsChanged() . To get the voice interactor you need to call getVoiceInteractor() which would return non null only if there is an ongoing voice
 interaction session. You an also detect when the voice interactor is no
 longer valid because the voice interaction session that is backing is finished
 by calling VoiceInteractor#registerOnDestroyedCallback(Executor Runnable) . This method will be called only after onStart() is being called and
 before onStop() is being called. You should pass to the callback the currently supported direct actions which
 cannot be null or contain null elements. You should return the action list as soon as possible to ensure the consumer
 for example the assistant is as responsive as possible which would improve user
 experience of your app.",void,"cancellationSignal CancellationSignal : A signal to cancel the operation in progress.
This value must never be null . |||
callback Consumer : The callback to send the action list. The actions list cannot
contain null elements. You can call this on any thread.
This value must never be null . |||",29
<android.app.Activity: void registerActivityLifecycleCallbacks(Application.ActivityLifecycleCallbacks)>,3,,"Register an Application.ActivityLifecycleCallbacks instance that receives
 lifecycle callbacks for only this Activity. In relation to any Application#registerActivityLifecycleCallbacks the callbacks registered here will always occur nested within those callbacks. This means: Pre events will first be sent to Application registered callbacks then to callbacks
     registered here. 
Application.ActivityLifecycleCallbacks#onActivityCreated(Activity Bundle)  Application.ActivityLifecycleCallbacks#onActivityStarted(Activity) and Application.ActivityLifecycleCallbacks#onActivityResumed(Activity) will
     be sent first to Application registered callbacks then to callbacks registered here.
     For all other events callbacks registered here will be sent first. 
Post events will first be sent to callbacks registered here then to
     Application registered callbacks. 
If multiple callbacks are registered here they receive events in a first in (up through Application.ActivityLifecycleCallbacks#onActivityPostResumed last out
 ordering. It is strongly recommended to register this in the constructor of your Activity to ensure
 you get all available callbacks. As this callback is associated with only this Activity
 it is not usually necessary to unregister it
 unless you specifically do not want to receive further lifecycle callbacks.",void,"callback Application.ActivityLifecycleCallbacks : The callback instance to register
This value must never be null . |||",29
<android.app.ActivityManager: boolean isRunningInUserTestHarness()>,3,,"Returns ""true"" if the device is running in Test Harness Mode. Test Harness Mode is a feature that allows devices to run without human interaction in a
 device farm/testing harness (such as Firebase Test Lab). You should check this method if you
 want your app to behave differently when running in a test harness to skip setup screens that
 would impede UI testing. e.g. a keyboard application that has a full screen setup page for
 the first time it is launched. Note that you should not use this to determine whether or not your app is running
 an instrumentation test as it is not set for a standard device running a test.",boolean |||,,29
<android.app.ActivityOptions: ActivityOptions setLockTaskEnabled(boolean)>,3,,"Sets whether the activity is to be launched into LockTask mode.

 Use this option to start an activity in LockTask mode. Note that only apps permitted by DevicePolicyManager can run in LockTask mode. Therefore if DevicePolicyManager.isLockTaskPermitted(String) returns false for the package of the target activity a SecurityException will be
 thrown during Context#startActivity(Intent Bundle) . This method doesn't affect
 activities that are already running â€” relaunch the activity to run in lock task mode.

 Defaults to false if not set.",ActivityOptions this ActivityOptions instance. |||,lockTaskMode boolean : true if the activity is to be launched into LockTask mode. |||,28
"<android.app.admin.DelegatedAdminReceiver: String onChoosePrivateKeyAlias(Context,Intent,int,Uri,String)>",3,,"Allows this receiver to select the alias for a private key and certificate pair for
 authentication.  If this method returns null the default Activity will
 be shown that lets the user pick a private key and certificate pair.
 If this method returns KeyChain#KEY_ALIAS_SELECTION_DENIED the default Activity will not be shown and the user will not be allowed
 to pick anything. And the app that called KeyChain#choosePrivateKeyAlias will
 receive null back. This callback is only applicable if the delegated app has DevicePolicyManager#DELEGATION_CERT_SELECTION capability. Additionally it must
 declare an intent filter for DeviceAdminReceiver#ACTION_CHOOSE_PRIVATE_KEY_ALIAS in the receiver's manifest in order to receive this callback. The default implementation
 simply throws UnsupportedOperationException .",String The private key alias to return and grant access to. |||,"context Context : The running context as per onReceive(Context Intent) .
This value must never be null . |||
intent Intent : The received intent as per onReceive(Context Intent) .
This value must never be null . |||
uid int : The uid of the app asking for the private key and certificate pair. |||
uri Uri : The URI to authenticate may be null.
This value may be null . |||
alias String : The alias preselected by the client or null.
This value may be null . |||",29
"<android.app.admin.DelegatedAdminReceiver: void onNetworkLogsAvailable(Context,Intent,long,int)>",2,,"Called each time a new batch of network logs can be retrieved. This callback method will only
 ever be called when network logging is enabled. The logs can only be retrieved while network
 logging is enabled. If a secondary user or profile is created this callback won't be received until all users
 become affiliated again (even if network logging is enabled). It will also no longer be
 possible to retrieve the network logs batch with the most recent batchToken provided
 by this callback. See DevicePolicyManager#setAffiliationIds . This callback is only applicable if the delegated app has DevicePolicyManager#DELEGATION_NETWORK_LOGGING capability. Additionally it must
 declare an intent filter for DeviceAdminReceiver#ACTION_NETWORK_LOGS_AVAILABLE in the
 receiver's manifest in order to receive this callback. The default implementation
 simply throws UnsupportedOperationException .",void,"context Context : The running context as per onReceive(Context Intent) .
This value must never be null . |||
intent Intent : The received intent as per onReceive(Context Intent) .
This value must never be null . |||
batchToken long : The token representing the current batch of network logs. |||
networkLogsCount int : The total count of events in the current batch of network logs.
Value is 1 or greater |||",29
"<android.app.admin.DelegatedAdminReceiver: void onReceive(Context,Intent)>",2,,"Intercept delegated device administrator broadcasts. Implementations should not override
 this method; implement the convenience callbacks for each action instead.",void,"context Context : This value must never be null . |||
intent Intent : This value must never be null . |||",29
"<android.app.admin.DeviceAdminReceiver: void onTransferAffiliatedProfileOwnershipComplete(Context,UserHandle)>",3,,"Called on the device owner when the ownership of one of its affiliated profiles is
 transferred. This can be used when transferring both device and profile ownership when using
 work profile on a fully managed device. The process would look like this:",void,"context Context : the running context as per onReceive(Context Intent) This value must never be null . |||
user UserHandle : the UserHandle of the affiliated user
This value must never be null . |||",28
"<android.app.admin.DeviceAdminReceiver: void onUserStarted(Context,Intent,UserHandle)>",2,,Called when a user or profile is started. This callback is only applicable to device owners.,void,"context Context : The running context as per onReceive(Context Intent) .
This value must never be null . |||
intent Intent : The received intent as per onReceive(Context Intent) .
This value must never be null . |||
startedUser UserHandle : The UserHandle of the user that has just been started.
This value must never be null . |||",28
"<android.app.admin.DeviceAdminReceiver: void onUserSwitched(Context,Intent,UserHandle)>",2,,Called when a user or profile is switched to. This callback is only applicable to device owners.,void,"context Context : The running context as per onReceive(Context Intent) .
This value must never be null . |||
intent Intent : The received intent as per onReceive(Context Intent) .
This value must never be null . |||
switchedUser UserHandle : The UserHandle of the user that has just been switched to.
This value must never be null . |||",28
"<android.app.admin.DevicePolicyManager: AttestedKeyPair generateKeyPair(ComponentName,String,KeyGenParameterSpec,int)>",3,,"Called by a device or profile owner or delegated certificate installer to generate a
 new private/public key pair. If the device supports key generation via secure hardware
 this method is useful for creating a key in KeyChain that never left the secure hardware.
 Access to the key is controlled the same way as in installKeyPair(ComponentName PrivateKey Certificate String) . Because this method might take several seconds to complete it should only be called from
 a worker thread. This method returns null when called from the main thread. Note: If the provided alias is of an existing alias all former grants that apps
 have been given to access the key and certificates associated with this alias will be
 revoked. Attestation: to enable attestation set an attestation challenge in keySpec via KeyGenParameterSpec.Builder#setAttestationChallenge . By specifying flags to the idAttestationFlags parameter it is possible to request the device's unique
 identity to be included in the attestation record. Specific identifiers can be included in the attestation record and an individual
 attestation certificate can be used to sign the attestation record. To find out if the device
 supports these features refer to isDeviceIdAttestationSupported() and isUniqueDeviceAttestationSupported() . Device owner profile owner and their delegated certificate installer can use ID_TYPE_BASE_INFO to request inclusion of the general device information
 including manufacturer model brand device and product in the attestation record.
 Only device owner profile owner on an organization-owned device and their delegated
 certificate installers can use ID_TYPE_SERIAL  ID_TYPE_IMEI and ID_TYPE_MEID to request unique device identifiers to be attested (the serial number
 IMEI and MEID correspondingly) if supported by the device
 (see isDeviceIdAttestationSupported() ).
 Additionally device owner profile owner on an organization-owned device and their delegated
 certificate installers can also request the attestation record to be signed using an
 individual attestation certificate by specifying the ID_TYPE_INDIVIDUAL_ATTESTATION flag (if supported by the device see isUniqueDeviceAttestationSupported() ). If any of ID_TYPE_SERIAL  ID_TYPE_IMEI and ID_TYPE_MEID is set it is implicitly assumed that ID_TYPE_BASE_INFO is also set. Attestation using ID_TYPE_INDIVIDUAL_ATTESTATION can only be requested if
 key generation is done in StrongBox.",AttestedKeyPair A non-null AttestedKeyPair if the key generation succeeded null otherwise. |||,"admin ComponentName : Which DeviceAdminReceiver this request is associated with or null if calling from a delegated certificate installer.
This value may be null . |||
algorithm String : The key generation algorithm see KeyPairGenerator .
This value must never be null . |||
keySpec KeyGenParameterSpec : Specification of the key to generate see KeyPairGenerator .
This value must never be null . |||
idAttestationFlags int : A bitmask of the identifiers that should be included in the
attestation record ( ID_TYPE_BASE_INFO  ID_TYPE_SERIAL  ID_TYPE_IMEI and ID_TYPE_MEID ) and ID_TYPE_INDIVIDUAL_ATTESTATION if the attestation record should be signed
using an individual attestation certificate. 0 should be passed in if no device identification is required in the
attestation record and the batch attestation certificate should be used. If any flag is specified then an attestation challenge must be included in the keySpec .
Value is either 0 or a combination of ID_TYPE_BASE_INFO  ID_TYPE_SERIAL  ID_TYPE_IMEI  ID_TYPE_MEID and ID_TYPE_INDIVIDUAL_ATTESTATION |||",28
<android.app.admin.DevicePolicyManager: boolean isAlwaysOnVpnLockdownEnabled(ComponentName)>,3,,"Called by device or profile owner to query whether current always-on VPN is configured in
 lockdown mode. Returns false when no always-on configuration is set.",boolean |||,"admin ComponentName : Which DeviceAdminReceiver this request is associated with.
This value must never be null . |||",29
<android.app.admin.DevicePolicyManager: boolean isDeviceIdAttestationSupported()>,1,,"Returns true if the device supports attestation of device identifiers in addition
 to key attestation. See generateKeyPair(android.content.ComponentName java.lang.String android.security.keystore.KeyGenParameterSpec int)",boolean true if Device ID attestation is supported. |||,,28
"<android.app.admin.DevicePolicyManager: boolean setTimeZone(ComponentName,String)>",3,,"Called by a device owner or a profile owner of an organization-owned managed
 profile to set the system's persistent default time zone. This only takes
 effect if called when Settings.Global.AUTO_TIME_ZONE is 0 otherwise false will be returned.",boolean true if set timezone succeeded false otherwise. |||,"admin ComponentName : Which DeviceAdminReceiver this request is associated with
This value must never be null . |||
timeZone String : one of the Olson ids from the list returned by TimeZone.getAvailableIDs() |||",28
"<android.app.admin.DevicePolicyManager: boolean updateOverrideApn(ComponentName,int,ApnSetting)>",3,,"Called by device owner to update an override APN. This method may returns false if there is no override APN with the given apnId . This method may also returns false if apnSetting conflicts with an
 existing override APN. Update the existing conflicted APN instead. See addOverrideApn(ComponentName ApnSetting) for the definition of conflict.",boolean true if the required override APN is successfully updated false otherwise. |||,"admin ComponentName : which DeviceAdminReceiver this request is associated with
This value must never be null . |||
apnId int : the id of the override APN to update |||
apnSetting ApnSetting : the override APN to update
This value must never be null . |||",28
"<android.app.admin.DevicePolicyManager: int addOverrideApn(ComponentName,ApnSetting)>",2,,"Called by device owner to add an override APN. This method may returns -1 if apnSetting conflicts with an existing
 override APN. Update the existing conflicted APN with updateOverrideApn(android.content.ComponentName int android.telephony.data.ApnSetting) instead of adding a new entry. Two override APNs are considered to conflict when all the following APIs return
 the same values on both override APNs: ApnSetting#getOperatorNumeric() 
ApnSetting#getApnName() 
ApnSetting#getProxyAddressAsString() 
ApnSetting#getProxyPort() 
ApnSetting#getMmsProxyAddressAsString() 
ApnSetting#getMmsProxyPort() 
ApnSetting#getMmsc() 
ApnSetting#isEnabled() 
ApnSetting#getMvnoType() 
ApnSetting#getProtocol() 
ApnSetting#getRoamingProtocol()","int The id of inserted override APN. Or -1 when failed to insert into
         the database. |||","admin ComponentName : which DeviceAdminReceiver this request is associated with
This value must never be null . |||
apnSetting ApnSetting : the override APN to insert
This value must never be null . |||",28
<android.app.admin.DevicePolicyManager: List getOverrideApns(ComponentName)>,,,Called by device owner to get all override APNs inserted by device owner.,List < ApnSetting > A list of override APNs inserted by device owner. |||,"admin ComponentName : which DeviceAdminReceiver this request is associated with
This value must never be null . |||",28
<android.app.admin.DevicePolicyManager: String getGlobalPrivateDnsHost(ComponentName)>,,,Returns the system-wide Private DNS host.,String The hostname used for Private DNS queries null if none is set. |||,"admin ComponentName : which DeviceAdminReceiver this request is associated with.
This value must never be null . |||",29
"<android.app.admin.DevicePolicyManager: void setAlwaysOnVpnPackage(ComponentName,String,boolean,Set)>",,,"A version of setAlwaysOnVpnPackage(android.content.ComponentName java.lang.String boolean) that allows the
 admin to specify a set of apps that should be able to access the network directly when VPN
 is not connected. When VPN connects these apps switch over to VPN if allowed to use that VPN.
 System apps can always bypass VPN. Note that the system doesn't update the whitelist when packages are installed or
 uninstalled the admin app must call this method to keep the list up to date. When lockdownEnabled is false lockdownWhitelist is ignored . When lockdownEnabled is true and lockdownWhitelist is null or
 empty only system apps can bypass VPN. Setting always-on VPN package to null or using setAlwaysOnVpnPackage(android.content.ComponentName java.lang.String boolean) clears lockdown whitelist.",void,"admin ComponentName : This value must never be null . |||
vpnPackage String : package name for an installed VPN app on the device or null to remove an existing always-on VPN configuration
This value may be null . |||
lockdownEnabled boolean : true to disallow networking when the VPN is not connected or false otherwise. This has no effect when clearing. |||
lockdownWhitelist Set : Packages that will be able to access the network directly when VPN
is in lockdown mode but not connected. Has no effect when clearing.
This value may be null . |||",29
"<android.app.admin.DevicePolicyManager: void setKeepUninstalledPackages(ComponentName,List)>",,,"Set a list of apps to keep around as APKs even if no user has currently installed it. This
 function can be called by a device owner or by a delegate given the DELEGATION_KEEP_UNINSTALLED_PACKAGES scope via setDelegatedScopes(ComponentName String List ) . Please note that setting this policy does not imply that specified apps will be
 automatically pre-cached.",void,"admin ComponentName : Which DeviceAdminReceiver this request is associated with or null if the caller is a keep uninstalled packages delegate.
This value may be null . |||
packageNames List : List of package names to keep cached.
This value must never be null . |||",28
"<android.app.admin.DevicePolicyManager: void setOverrideApnsEnabled(ComponentName,boolean)>",,,"Called by device owner to set if override APNs should be enabled. Override APNs are separated from other APNs on the device and can only be inserted or
 modified by the device owner. When enabled only override APNs are in use any other APNs
 are ignored.",void,"admin ComponentName : which DeviceAdminReceiver this request is associated with
This value must never be null . |||
enabled boolean : true if override APNs should be enabled false otherwise |||",28
"<android.app.admin.DevicePolicyManager: void setStartUserSessionMessage(ComponentName,CharSequence)>",,,"Called by a device owner to specify the user session start message. This may be displayed
 during a user switch. The message should be limited to a short statement or it may be truncated. If the message needs to be localized it is the responsibility of the DeviceAdminReceiver to listen to the Intent#ACTION_LOCALE_CHANGED broadcast
 and set a new version of this message accordingly.",void,"admin ComponentName : which DeviceAdminReceiver this request is associated with.
This value must never be null . |||
startUserSessionMessage CharSequence : message for starting user session or null to use
system default message.
This value may be null . |||",28
"<android.app.admin.DevicePolicyManager: void transferOwnership(ComponentName,ComponentName,PersistableBundle)>",,,"Changes the current administrator to another one. All policies from the current
 administrator are migrated to the new administrator. The whole operation is atomic -
 the transfer is either complete or not done at all. Depending on the current administrator (device owner profile owner) you have the
 following expected behaviour: A device owner can only be transferred to a new device owner 
A profile owner can only be transferred to a new profile owner 
Use the bundle parameter to pass data to the new administrator. The data
 will be received in the DeviceAdminReceiver#onTransferOwnershipComplete(Context PersistableBundle) callback of the new administrator. The transfer has failed if the original administrator is still the corresponding owner
 after calling this method. The incoming target administrator must have the <support-transfer-ownership /> tag inside the <device-admin></device-admin> tags in the xml file referenced by DeviceAdminReceiver#DEVICE_ADMIN_META_DATA . Otherwise an IllegalArgumentException will be thrown.",void,"admin ComponentName : which DeviceAdminReceiver this request is associated with
This value must never be null . |||
target ComponentName : which DeviceAdminReceiver we want the new administrator to be
This value must never be null . |||
bundle PersistableBundle : data to be sent to the new administrator
This value may be null . |||",28
<android.app.admin.FreezePeriod: String toString()>,,,"Returns a string representation of the object. In general the toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the
 object is an instance the at-sign character ` @ ' and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words this method returns a string equal to the
 value of:",String a string representation of the object. |||,,28
<android.app.admin.SystemUpdatePolicy: SystemUpdatePolicy setFreezePeriods(List)>,,,"Configure a list of freeze periods on top of the current policy. When the device's clock is
 within any of the freeze periods all incoming system updates including security patches will
 be blocked and cannot be installed. When the device is outside the freeze periods the normal
 policy behavior will apply. Each individual freeze period is allowed to be at most 90 days long and adjacent freeze
 periods need to be at least 60 days apart. Also the list of freeze periods should not
 contain duplicates or overlap with each other. If any of these conditions is not met a ValidationFailedException will be thrown. Handling of leap year: we ignore leap years in freeze period calculations in particular When a freeze period is defined February 29th is disregarded so even though a freeze
 period can be specified to start or end on February 29th it will be treated as if the period
 started or ended on February 28th. 
When applying freeze period behavior to the device a system clock of February 29th is
 treated as if it were February 28th 
When calculating the number of days of a freeze period or separation between two freeze
 periods February 29th is also ignored and not counted as one day.",SystemUpdatePolicy this instance |||,freezePeriods List : the list of freeze periods |||,28
"<android.app.AppComponentFactory: Application instantiateApplication(ClassLoader,String)>",,,"Allows application to override the creation of the application object. This can be used to
 perform things such as dependency injection or class loader changes to these
 classes. This method is only intended to provide a hook for instantiation. It does not provide
 earlier access to the Application object. The returned object will not be initialized
 as a Context yet and should not be used to interact with other android APIs.",Application This value will never be null . |||,"cl ClassLoader : The default classloader to use for instantiation.
This value must never be null . |||
className String : The class to be instantiated.
This value must never be null . |||",28
"<android.app.AppComponentFactory: ClassLoader instantiateClassLoader(ClassLoader,ApplicationInfo)>",,,"Selects the class loader which will be used by the platform to instantiate app components. The default implementation of this method returns the cl parameter unchanged.
 Applications can override this method to set up a custom class loader or a custom class
 loader hierarchy and return it to the platform. The method is a hook invoked before any application components are instantiated or the
 application Context is initialized. It is intended to allow the application's classes to
 be loaded from a different source than the base/split APK(s). The default class loader cl is created by the platform and used to load the
 application's base or split APK(s). Its parent is typically the boot class loader unless
 running under instrumentation. Its classname is configurable using the R.attr.classLoader manifest attribute.",ClassLoader This value will never be null . |||,"cl ClassLoader : The default class loader created by the platform.
This value must never be null . |||
aInfo ApplicationInfo : Information about the application being loaded.
This value must never be null . |||",29
"<android.app.AppComponentFactory: ContentProvider instantiateProvider(ClassLoader,String)>",,,"Allows application to override the creation of providers. This can be used to
 perform things such as dependency injection or class loader changes to these
 classes. This method is only intended to provide a hook for instantiation. It does not provide
 earlier access to the ContentProvider object. The returned object will not be initialized
 with a Context yet and should not be used to interact with other android APIs.",ContentProvider This value will never be null . |||,"cl ClassLoader : The default classloader to use for instantiation.
This value must never be null . |||
className String : The class to be instantiated.
This value must never be null . |||",28
"<android.app.AppOpsManager: int unsafeCheckOpRaw(String,int,String)>",,,"Like checkOp(String int String) but returns the raw mode associated with the op.
 Does not throw a security exception does not translate MODE_FOREGROUND .",int |||,"op String : This value must never be null . |||
uid int |||
packageName String : This value must never be null . |||",29
"<android.app.AppOpsManager: void startWatchingMode(String,String,int,AppOpsManager.OnOpChangedListener)>",,,"Monitor for changes to the operating mode for the given op in the given app package.
 You can watch op changes only for your UID.",void,"op String : The operation to monitor one of OPSTR_*.
This value must never be null . |||
packageName String : The name of the application to monitor.
This value may be null . |||
flags int : Option flags: any combination of WATCH_FOREGROUND_CHANGES or 0. |||
callback AppOpsManager.OnOpChangedListener : Where to report changes.
This value must never be null . |||",29
<android.app.assist.AssistStructure.ViewNode: int getMaxTextEms()>,,,"Returns the maximum width in ems of the text associated with this node or -1 if not supported by the node. It's only relevant when the AssistStructure is used for autofill purposes
 not for assist purposes.",int |||,,28
<android.app.assist.AssistStructure.ViewNode: int getMaxTextLength()>,,,"Returns the maximum length of the text associated with this node node or -1 if not supported by the node or not set. It's only relevant when the AssistStructure is used for autofill purposes
 not for assist purposes.",int |||,,28
<android.app.assist.AssistStructure.ViewNode: int getMinTextEms()>,,,"Returns the minimum width in ems of the text associated with this node or -1 if not supported by the node. It's only relevant when the AssistStructure is used for autofill purposes
 not for assist purposes.",int |||,,28
<android.app.AutomaticZenRule: ZenPolicy getZenPolicy()>,,,Gets the zen policy.,ZenPolicy |||,,29
<android.app.backup.FullBackupDataOutput: int getTransportFlags()>,,,Returns flags with additional information about the backup transport. For supported flags see BackupAgent,int |||,,28
<android.app.DirectAction.Builder: DirectAction build()>,,,,"DirectAction A newly constructed instance.
 
 This value will never be null . |||",,29
<android.app.DirectAction.Builder: DirectAction.Builder setExtras(Bundle)>,,,"Sets the optional action extras. These extras are action specific
 and their semantics are open-ended potentially representing how
 the action is visualized interpreted what its arguments are etc.","DirectAction.Builder This builder.
 
 This value will never be null . |||","extras Bundle : The extras.
This value may be null . |||",29
<android.app.DirectAction.Builder: DirectAction.Builder setLocusId(LocusId)>,,,"Sets the optional locus id. This is an identifier of the application
 state from a user perspective. For example a specific chat in a
 messaging app.","DirectAction.Builder This builder.
 
 This value will never be null . |||","locusId LocusId : The locus id.
This value may be null . |||",29
<android.app.DirectAction: String getId()>,,,,"String the ID for this action.
 
 This value will never be null . |||",,29
<android.app.job.JobInfo.Builder: JobInfo.Builder setRequiredNetwork(NetworkRequest)>,3,,"Set detailed description of the kind of network your job requires. If your job doesn't need a network connection you don't need to call
 this method as the default is null . Calling this method defines network as a strict requirement for your
 job. If the network requested is not available your job will never
 run. See setOverrideDeadline(long) to change this behavior.
 Calling this method will override any requirements previously defined
 by setRequiredNetworkType(int) ; you typically only want to
 call one of these methods. When your job executes in JobService#onStartJob(JobParameters) be sure to use the
 specific network returned by JobParameters#getNetwork() otherwise you'll use the default network which may not meet this
 constraint.",JobInfo.Builder |||,"networkRequest NetworkRequest : The detailed description of the kind of network
this job requires or null if no specific kind of
network is required. Defining a NetworkSpecifier is only supported for jobs that aren't persisted.
This value may be null . |||",28
<android.app.job.JobInfo: NetworkRequest getRequiredNetwork()>,,,"Return the detailed description of the kind of network this job requires
 or null if no specific kind of network is required.",NetworkRequest |||,,28
<android.app.Notification.Action.Builder: Notification.Action.Builder setContextual(boolean)>,,,"Sets whether this Action is a contextual action i.e. whether the action is
 dependent on the notification message body. An example of a contextual action could
 be an action opening a map application with an address shown in the notification.",Notification.Action.Builder This value will never be null . |||,isContextual boolean |||,29
<android.app.Notification.Action.Builder: Notification.Action.Builder setSemanticAction(int)>,,,Sets the SemanticAction for this Action . A SemanticAction denotes what an Action 's PendingIntent will do (eg. reply mark as read delete etc).,"Notification.Action.Builder this object for method chaining
 
 This value will never be null . |||","semanticAction int : a SemanticAction defined within Action with SEMANTIC_ACTION_ prefixes
Value is Notification.Action.SEMANTIC_ACTION_NONE  Notification.Action.SEMANTIC_ACTION_REPLY  Notification.Action.SEMANTIC_ACTION_MARK_AS_READ  Notification.Action.SEMANTIC_ACTION_MARK_AS_UNREAD  Notification.Action.SEMANTIC_ACTION_DELETE  Notification.Action.SEMANTIC_ACTION_ARCHIVE  Notification.Action.SEMANTIC_ACTION_MUTE  Notification.Action.SEMANTIC_ACTION_UNMUTE  Notification.Action.SEMANTIC_ACTION_THUMBS_UP  Notification.Action.SEMANTIC_ACTION_THUMBS_DOWN or Notification.Action.SEMANTIC_ACTION_CALL |||",28
<android.app.Notification.BubbleMetadata.Builder: Notification.BubbleMetadata build()>,,,Creates the BubbleMetadata defined by this builder.,Notification.BubbleMetadata This value will never be null . |||,,29
<android.app.Notification.BubbleMetadata.Builder: Notification.BubbleMetadata.Builder setAutoExpandBubble(boolean)>,,,"Sets whether the bubble will be posted in its expanded state (with the contents of Notification.BubbleMetadata.getBubbleIntent() in a floating window). This flag has no effect if the app posting the bubble is not in the foreground.
 The app is considered foreground if it is visible and on the screen note that
 a foreground service does not qualify. Generally this flag should only be set if the user has performed an action to
 request or create a bubble. Setting this flag is optional; it defaults to false.",Notification.BubbleMetadata.Builder This value will never be null . |||,shouldExpand boolean |||,29
<android.app.Notification.BubbleMetadata.Builder: Notification.BubbleMetadata.Builder setDeleteIntent(PendingIntent)>,,,Sets an intent to send when this bubble is explicitly removed by the user. Setting a delete intent is optional.,Notification.BubbleMetadata.Builder This value will never be null . |||,deleteIntent PendingIntent : This value may be null . |||,29
<android.app.Notification.BubbleMetadata.Builder: Notification.BubbleMetadata.Builder setDesiredHeight(int)>,,,"Sets the desired height in DPs for the expanded content of the bubble. This height may not be respected if there is not enough space on the screen or if
 the provided height is too small to be useful. If setDesiredHeightResId(int) was previously called on this builder the
 previous value set will be cleared after calling this method and this value will
 be used instead. A desired height (in DPs or via resID) is optional.",Notification.BubbleMetadata.Builder This value will never be null . |||,height int |||,29
<android.app.Notification.BubbleMetadata: boolean isNotificationSuppressed()>,,,"Indicates whether the notification associated with the bubble is being visually
 suppressed from the notification shade. When true the notification is
 hidden when false the notification shows as normal. Apps sending bubbles may set this flag so that the bubble is posted without the associated notification in the notification shade. Apps sending bubbles can only apply this flag when the app is in the foreground
 otherwise the flag is not respected. The app is considered foreground if it is visible
 and on the screen note that a foreground service does not qualify. Generally the app should only set this flag if the user has performed an
 action to request or create a bubble or if the user has seen the content in the
 notification and the notification is no longer relevant. The system will update this flag with true to hide the notification
 from the user once the bubble has been expanded.",boolean whether this bubble should suppress the notification when it is posted. |||,,29
<android.app.Notification.BubbleMetadata: int describeContents()>,,,"Describe the kinds of special objects contained in this Parcelable
 instance's marshaled representation. For example if the object will
 include a file descriptor in the output of writeToParcel(android.os.Parcel int) the return value of this method must include the CONTENTS_FILE_DESCRIPTOR bit.","int a bitmask indicating the set of special object types marshaled
 by this Parcelable object instance.
 
 Value is either 0 or CONTENTS_FILE_DESCRIPTOR |||",,29
<android.app.Notification.BubbleMetadata: PendingIntent getDeleteIntent()>,,,,"PendingIntent the pending intent to send when the bubble is dismissed by a user if one exists.
 
 This value may be null . |||",,29
"<android.app.Notification.BubbleMetadata: void writeToParcel(Parcel,int)>",,,Flatten this object in to a Parcel.,void,"out Parcel : The Parcel in which the object should be written. |||
flags int : Additional flags about how the object should be written.
May be 0 or Parcelable.PARCELABLE_WRITE_RETURN_VALUE .
Value is either 0 or a combination of Parcelable.PARCELABLE_WRITE_RETURN_VALUE and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES |||",29
<android.app.Notification.Builder: Notification.Builder setBubbleMetadata(Notification.BubbleMetadata)>,,,"Sets the BubbleMetadata that will be used to display app content in a floating
 window over the existing foreground activity. This data will be ignored unless the notification is posted to a channel that
 allows NotificationChannel#canBubble() . Notifications allowed to bubble that have valid bubble metadata will display in
 collapsed state outside of the notification shade on unlocked devices. When a user
 interacts with the collapsed state the bubble intent will be invoked and displayed.",Notification.Builder This value will never be null . |||,data Notification.BubbleMetadata : This value may be null . |||,29
<android.app.Notification.MessagingStyle.Message: Person getSenderPerson()>,,,Get the sender associated with this message.,Person This value may be null . |||,,28
<android.app.Notification: LocusId getLocusId()>,,,Gets the LocusId associated with this notification. Used by the device's intelligence services to correlate objects (such as ShortcutInfo and ContentCaptureContext ) that are correlated.,LocusId This value may be null . |||,,29
<android.app.NotificationChannel: boolean canBubble()>,,,"Returns whether notifications posted to this channel can display outside of the notification
 shade in a floating window on top of other apps.",boolean |||,,29
<android.app.NotificationChannel: boolean hasUserSetImportance()>,,,"Returns whether the user has chosen the importance of this channel either to affirm the
 initial selection from the app or changed it to be higher or lower.",boolean |||,,29
<android.app.NotificationChannelGroup: boolean isBlocked()>,,,"Returns whether or not notifications posted to NotificationChannel belonging
 to this group are blocked. This value is independent of NotificationManager#areNotificationsEnabled() and NotificationChannel#getImportance() .",boolean |||,,28
<android.app.NotificationManager: boolean areNotificationsPaused()>,,,"Returns whether notifications from this package are temporarily hidden. This
 could be done because the package was marked as distracting to the user via PackageManager#setDistractingPackageRestrictions(String[] int) or because the
 package is PackageManager#setPackagesSuspended(String[] boolean PersistableBundle
 PersistableBundle SuspendDialogInfo) suspended .",boolean |||,,29
<android.app.NotificationManager: boolean shouldHideSilentStatusBarIcons()>,,,"Returns whether the user wants silent notifications (see IMPORTANCE_LOW to appear
 in the status bar. Only available for notification
 listeners .",boolean |||,,29
<android.app.NotificationManager: NotificationChannelGroup getNotificationChannelGroup(String)>,,,"Returns the notification channel group settings for a given channel group id.

 The channel group must belong to your package or null will be returned.",NotificationChannelGroup |||,channelGroupId String |||,28
<android.app.NotificationManager: String getNotificationDelegate()>,,,"Returns the delegate that can post notifications on
 your behalf if there currently is one.",String This value may be null . |||,,29
<android.app.NotificationManager: void setNotificationDelegate(String)>,,,"Allows a package to post notifications on your behalf using notifyAsPackage(java.lang.String java.lang.String int android.app.Notification) .

 This can be used to allow persistent processes to post notifications based on messages
 received on your behalf from the cloud without your process having to wake up.

 You can check if you have an allowed delegate with getNotificationDelegate() and
 revoke your delegate by passing null to this method.",void,"delegate String : Package name of the app which can send notifications on your behalf.
This value may be null . |||",29
<android.app.Person.Builder: Person.Builder setBot(boolean)>,,,Sets whether this person is a machine rather than a human.,Person.Builder This value will never be null . |||,isBot boolean : true if this person is a machine false otherwise. |||,28
<android.app.Person.Builder: Person.Builder setImportant(boolean)>,,,"Sets whether this is an important person. Use this method to denote users who frequently
 interact with the user of this device when setUri(java.lang.String) isn't provided with ContactsContract.Contacts.CONTENT_LOOKUP_URI and instead with
 the mailto: or tel: schemas.",Person.Builder This value will never be null . |||,isImportant boolean : true if this is an important person false otherwise. |||,28
<android.app.Person: String getUri()>,,,,String the uri provided for this person or null if no Uri was provided. |||,,28
<android.app.RemoteAction: boolean shouldShowIcon()>,,,Return whether the icon should be shown.,boolean |||,,28
<android.app.RemoteInput: int getEditChoicesBeforeSending()>,,,"Gets whether tapping on a choice should let the user edit the input before it is sent to the
 app.",int Value is EDIT_CHOICES_BEFORE_SENDING_AUTO  EDIT_CHOICES_BEFORE_SENDING_DISABLED or EDIT_CHOICES_BEFORE_SENDING_ENABLED |||,,29
<android.app.RemoteInput: int getResultsSource(Intent)>,,,Get the source of the RemoteInput results.,"int The source of the results. If no source was set SOURCE_FREE_FORM_INPUT will
 be returned.
 
 Value is SOURCE_FREE_FORM_INPUT or SOURCE_CHOICE |||","intent Intent : The intent object that fired in response to an action or content intent
which also had one or more remote input requested. |||",28
<android.app.role.RoleManager: boolean isRoleAvailable(String)>,,,Check whether a role is available in the system.,boolean whether the role is available in the system |||,"roleName String : the name of role to checking for
This value must never be null . |||",29
<android.app.role.RoleManager: Intent createRequestRoleIntent(String)>,,,"Returns an Intent suitable for passing to Activity.startActivityForResult(Intent int) which prompts the user to
 grant a role to this application. If the role is granted the resultCode will be Activity.RESULT_OK otherwise it will be Activity.RESULT_CANCELED .","Intent the Intent to prompt user to grant the role
 
 This value will never be null . |||","roleName String : the name of requested role
This value must never be null . |||",29
"<android.app.slice.Slice.Builder: Slice.Builder addAction(PendingIntent,Slice,String)>",,,Add an action to the slice being constructed,Slice.Builder |||,"action PendingIntent : This value must never be null . |||
s Slice : This value must never be null . |||
subType String : Optional template-specific type information
This value may be null .
Value is Slice.SUBTYPE_COLOR  Slice.SUBTYPE_CONTENT_DESCRIPTION  Slice.SUBTYPE_MAX  Slice.SUBTYPE_MESSAGE  Slice.SUBTYPE_PRIORITY  Slice.SUBTYPE_RANGE  Slice.SUBTYPE_SOURCE  Slice.SUBTYPE_TOGGLE  Slice.SUBTYPE_VALUE or Slice.SUBTYPE_LAYOUT_DIRECTION |||",28
<android.app.slice.Slice.Builder: Slice.Builder addHints(List)>,,,Add hints to the Slice being constructed,Slice.Builder |||,hints List : Value is Slice.HINT_TITLE  Slice.HINT_LIST  Slice.HINT_LIST_ITEM  Slice.HINT_LARGE  Slice.HINT_ACTIONS  Slice.HINT_SELECTED  Slice.HINT_NO_TINT  Slice.HINT_SHORTCUT android.app.slice.Slice.HINT_TOGGLE Slice.HINT_HORIZONTAL  Slice.HINT_PARTIAL  Slice.HINT_SEE_MORE  Slice.HINT_KEYWORDS  Slice.HINT_ERROR  Slice.HINT_TTL  Slice.HINT_LAST_UPDATED or Slice.HINT_PERMISSION_REQUEST |||,28
"<android.app.slice.Slice.Builder: Slice.Builder addInt(int,String,List)>",,,Add an integer to the slice being constructed,Slice.Builder |||,"value int |||
subType String : Optional template-specific type information
This value may be null .
Value is Slice.SUBTYPE_COLOR  Slice.SUBTYPE_CONTENT_DESCRIPTION  Slice.SUBTYPE_MAX  Slice.SUBTYPE_MESSAGE  Slice.SUBTYPE_PRIORITY  Slice.SUBTYPE_RANGE  Slice.SUBTYPE_SOURCE  Slice.SUBTYPE_TOGGLE  Slice.SUBTYPE_VALUE or Slice.SUBTYPE_LAYOUT_DIRECTION |||
hints List : Value is Slice.HINT_TITLE  Slice.HINT_LIST  Slice.HINT_LIST_ITEM  Slice.HINT_LARGE  Slice.HINT_ACTIONS  Slice.HINT_SELECTED  Slice.HINT_NO_TINT  Slice.HINT_SHORTCUT android.app.slice.Slice.HINT_TOGGLE Slice.HINT_HORIZONTAL  Slice.HINT_PARTIAL  Slice.HINT_SEE_MORE  Slice.HINT_KEYWORDS  Slice.HINT_ERROR  Slice.HINT_TTL  Slice.HINT_LAST_UPDATED or Slice.HINT_PERMISSION_REQUEST |||",28
"<android.app.slice.Slice.Builder: Slice.Builder addText(CharSequence,String,List)>",,,Add text to the slice being constructed,Slice.Builder |||,"text CharSequence |||
subType String : Optional template-specific type information
This value may be null .
Value is Slice.SUBTYPE_COLOR  Slice.SUBTYPE_CONTENT_DESCRIPTION  Slice.SUBTYPE_MAX  Slice.SUBTYPE_MESSAGE  Slice.SUBTYPE_PRIORITY  Slice.SUBTYPE_RANGE  Slice.SUBTYPE_SOURCE  Slice.SUBTYPE_TOGGLE  Slice.SUBTYPE_VALUE or Slice.SUBTYPE_LAYOUT_DIRECTION |||
hints List : Value is Slice.HINT_TITLE  Slice.HINT_LIST  Slice.HINT_LIST_ITEM  Slice.HINT_LARGE  Slice.HINT_ACTIONS  Slice.HINT_SELECTED  Slice.HINT_NO_TINT  Slice.HINT_SHORTCUT android.app.slice.Slice.HINT_TOGGLE Slice.HINT_HORIZONTAL  Slice.HINT_PARTIAL  Slice.HINT_SEE_MORE  Slice.HINT_KEYWORDS  Slice.HINT_ERROR  Slice.HINT_TTL  Slice.HINT_LAST_UPDATED or Slice.HINT_PERMISSION_REQUEST |||",28
<android.app.slice.Slice.Builder: Slice.Builder setCallerNeeded(boolean)>,,,"Tells the system whether for this slice the return value of SliceProvider#onBindSlice(Uri java.util.Set) may be different depending on SliceProvider#getCallingPackage() and should not be cached for multiple
 apps.",Slice.Builder |||,callerNeeded boolean |||,28
<android.app.slice.Slice: boolean isCallerNeeded()>,,,Returns whether the caller for this slice matters.,boolean |||,,28
<android.app.slice.Slice: List getItems()>,,,,List < SliceItem > All child SliceItem s that this Slice contains. |||,,28
<android.app.slice.SliceItem: boolean hasHint(String)>,,,,boolean true if this item contains the given hint |||,"hint String : The hint to check for
Value is Slice.HINT_TITLE  Slice.HINT_LIST  Slice.HINT_LIST_ITEM  Slice.HINT_LARGE  Slice.HINT_ACTIONS  Slice.HINT_SELECTED  Slice.HINT_NO_TINT  Slice.HINT_SHORTCUT android.app.slice.Slice.HINT_TOGGLE Slice.HINT_HORIZONTAL  Slice.HINT_PARTIAL  Slice.HINT_SEE_MORE  Slice.HINT_KEYWORDS  Slice.HINT_ERROR  Slice.HINT_TTL  Slice.HINT_LAST_UPDATED or Slice.HINT_PERMISSION_REQUEST |||",28
<android.app.slice.SliceItem: int describeContents()>,,,"Describe the kinds of special objects contained in this Parcelable
 instance's marshaled representation. For example if the object will
 include a file descriptor in the output of writeToParcel(android.os.Parcel int) the return value of this method must include the CONTENTS_FILE_DESCRIPTOR bit.","int a bitmask indicating the set of special object types marshaled
 by this Parcelable object instance.
 
 Value is either 0 or CONTENTS_FILE_DESCRIPTOR |||",,28
<android.app.slice.SliceItem: int getInt()>,,,,int The color held by this FORMAT_INT SliceItem |||,,28
<android.app.slice.SliceItem: String getFormat()>,,,Get the format of this SliceItem. The format will be one of the following types supported by the platform:,String |||,,28
"<android.app.slice.SliceItem: void writeToParcel(Parcel,int)>",,,Flatten this object in to a Parcel.,void,"dest Parcel : The Parcel in which the object should be written. |||
flags int : Additional flags about how the object should be written.
May be 0 or Parcelable.PARCELABLE_WRITE_RETURN_VALUE .
Value is either 0 or a combination of Parcelable.PARCELABLE_WRITE_RETURN_VALUE and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES |||",28
"<android.app.slice.SliceManager: int checkSlicePermission(Uri,int,int)>",,,"Determine whether a particular process and user ID has been granted
 permission to access a specific slice URI.","int PackageManager#PERMISSION_GRANTED if the given
 pid/uid is allowed to access that uri or PackageManager#PERMISSION_DENIED if it is not.

 Value is PackageManager.PERMISSION_GRANTED or PackageManager.PERMISSION_DENIED |||","uri Uri : The uri that is being checked.
This value must never be null . |||
pid int : The process ID being checked against.  Must be > 0. |||
uid int : The user ID being checked against.  A uid of 0 is the root
user which will pass every permission check. |||",28
<android.app.slice.SliceManager: List getPinnedSlices()>,,,Get the list of currently pinned slices for this app.,List < Uri > This value will never be null . |||,,28
"<android.app.slice.SliceManager: void grantSlicePermission(String,Uri)>",,,Grant permission to access a specific slice Uri to another package.,void,"toPackage String : The package you would like to allow to access the Uri.
This value must never be null . |||
uri Uri : The Uri you would like to grant access to.
This value must never be null . |||",28
"<android.app.slice.SliceManager: void revokeSlicePermission(String,Uri)>",,,"Remove permissions to access a particular content provider Uri
 that were previously added with grantSlicePermission(String Uri) for a specific target
 package.  The given Uri will match all previously granted Uris that are the same or a
 sub-path of the given Uri.  That is revoking ""content://foo/target"" will
 revoke both ""content://foo/target"" and ""content://foo/target/sub"" but not
 ""content://foo"".  It will not remove any prefix grants that exist at a
 higher level.",void,"toPackage String : The package you would like to allow to access the Uri.
This value must never be null . |||
uri Uri : The Uri you would like to revoke access to.
This value must never be null . |||",28
<android.app.slice.SliceProvider: Collection onGetSliceDescendants(Uri)>,,,"Obtains a list of slices that are descendants of the specified Uri. Implementing this is optional for a SliceProvider but does provide a good
 discovery mechanism for finding slice Uris.","Collection < Uri > All slices within the space.
 This value will never be null . |||","uri Uri : The uri to look for descendants under.
This value must never be null . |||",28
"<android.app.slice.SliceProvider: Cursor query(Uri,String,String,String,String)>",1,,"Implement this to handle query requests from clients. Apps targeting Build.VERSION_CODES.O or higher should override query(android.net.Uri java.lang.String[] android.os.Bundle android.os.CancellationSignal) and provide a stub
 implementation of this method. This method can be called from multiple threads as described in Processes
 and Threads . Example client call:",Cursor a Cursor or null . |||,"uri Uri : The URI to query. This will be the full URI sent by the client;
if the client is requesting a specific record the URI will end in a record number
that the implementation should parse and add to a WHERE or HAVING clause specifying
that _id value.
This value must never be null . |||
projection String : The list of columns to put into the cursor. If null all columns are included.
This value may be null . |||
selection String : A selection criteria to apply when filtering rows.
If null then all rows are included.
This value may be null . |||
selectionArgs String : You may include ?s in selection which will be replaced by
the values from selectionArgs in order that they appear in the selection.
The values will be bound as Strings.
This value may be null . |||
sortOrder String : How the rows in the cursor should be sorted.
If null then the provider is free to define the sort order.
This value may be null . |||",28
"<android.app.slice.SliceProvider: Cursor query(Uri,String,String,String,String,CancellationSignal)>",1,,"Implement this to handle query requests from clients with support for cancellation. Apps targeting Build.VERSION_CODES.O or higher should override query(android.net.Uri java.lang.String[] android.os.Bundle android.os.CancellationSignal) instead of this method. This method can be called from multiple threads as described in Processes
 and Threads . Example client call: If you implement this method then you must also implement the version of query(android.net.Uri java.lang.String[] java.lang.String java.lang.String[] java.lang.String) that does not take a cancellation
 signal to ensure correct operation on older versions of the Android Framework in
 which the cancellation signal overload was not available.",Cursor a Cursor or null . |||,"uri Uri : The URI to query. This will be the full URI sent by the client;
if the client is requesting a specific record the URI will end in a record number
that the implementation should parse and add to a WHERE or HAVING clause specifying
that _id value.
This value must never be null . |||
projection String : The list of columns to put into the cursor. If null all columns are included.
This value may be null . |||
selection String : A selection criteria to apply when filtering rows.
If null then all rows are included.
This value may be null . |||
selectionArgs String : You may include ?s in selection which will be replaced by
the values from selectionArgs in order that they appear in the selection.
The values will be bound as Strings.
This value may be null . |||
sortOrder String : How the rows in the cursor should be sorted.
If null then the provider is free to define the sort order.
This value may be null . |||
cancellationSignal CancellationSignal : A signal to cancel the operation in progress or null if none.
If the operation is canceled then OperationCanceledException will be thrown
when the query is executed.
This value may be null . |||",28
"<android.app.slice.SliceProvider: int delete(Uri,String,String)>",3,,"Implement this to handle requests to delete one or more rows. The
 implementation should apply the selection clause when performing
 deletion allowing the operation to affect multiple rows in a directory.
 As a courtesy call ContentResolver#notifyChange(android.net.Uri android.database.ContentObserver) after deleting. This method can be called from multiple
 threads as described in Processes
 and Threads . The implementation is responsible for parsing out a row ID at the end of
 the URI if a specific row is being deleted. That is the client would
 pass in content://contacts/people/22 and the implementation
 is responsible for parsing the record number (22) when creating a SQL
 statement.",int The number of rows affected. |||,"uri Uri : The full URI to query including a row ID (if a specific
record is requested).
This value must never be null . |||
selection String : An optional restriction to apply to rows when deleting.
This value may be null . |||
selectionArgs String : This value may be null . |||",28
<android.app.slice.SliceProvider: String getType(Uri)>,1,,"Implement this to handle requests for the MIME type of the data at the
 given URI.  The returned MIME type should start with vnd.android.cursor.item for a single record
 or vnd.android.cursor.dir/ for multiple items.
 This method can be called from multiple threads as described in Processes
 and Threads . Note that there are no permissions needed for an application to
 access this information; if your content provider requires read and/or
 write permissions or is not exported all applications can still call
 this method regardless of their access permissions.  This allows them
 to retrieve the MIME type for a URI when dispatching intents.",String a MIME type string or null if there is no type. |||,"uri Uri : the URI to query.
This value must never be null . |||",28
<android.app.slice.SliceProvider: void onSlicePinned(Uri)>,3,,"Called to inform an app that a slice has been pinned. Pinning is a way that slice hosts use to notify apps of which slices
 they care about updates for. When a slice is pinned the content is
 expected to be relatively fresh and kept up to date. Being pinned does not provide any escalated privileges for the slice
 provider. So apps should do things such as turn on syncing or schedule
 a job in response to a onSlicePinned. Pinned state is not persisted through a reboot and apps can expect a
 new call to onSlicePinned for any slices that should remain pinned
 after a reboot occurs.",void,sliceUri Uri : The uri of the slice being unpinned. |||,28
<android.app.slice.SliceSpec: boolean equals(Object)>,3,,"Indicates whether some other object is ""equal to"" this one. The equals method implements an equivalence relation
 on non-null object references: It is reflexive : for any non-null reference value x  x.equals(x) should return true . 
It is symmetric : for any non-null reference values x and y  x.equals(y) should return true if and only if y.equals(x) returns true . 
It is transitive : for any non-null reference values x  y and z if x.equals(y) returns true and y.equals(z) returns true then x.equals(z) should return true . 
It is consistent : for any non-null reference values x and y multiple invocations of x.equals(y) consistently return true or consistently return false provided no
     information used in equals comparisons on the
     objects is modified. 
For any non-null reference value x  x.equals(null) should return false . 
The equals method for class Object implements
 the most discriminating possible equivalence relation on objects;
 that is for any non-null reference values x and y this method returns true if and only
 if x and y refer to the same object
 ( x == y has the value true ). Note that it is generally necessary to override the hashCode method whenever this method is overridden so as to maintain the
 general contract for the hashCode method which states
 that equal objects must have equal hash codes.","boolean true if this object is the same as the obj
          argument; false otherwise. |||",obj Object : the reference object with which to compare. |||,28
<android.app.slice.SliceSpec: int describeContents()>,1,,"Describe the kinds of special objects contained in this Parcelable
 instance's marshaled representation. For example if the object will
 include a file descriptor in the output of writeToParcel(android.os.Parcel int) the return value of this method must include the CONTENTS_FILE_DESCRIPTOR bit.","int a bitmask indicating the set of special object types marshaled
 by this Parcelable object instance.
 
 Value is either 0 or CONTENTS_FILE_DESCRIPTOR |||",,28
<android.app.slice.SliceSpec: int getRevision()>,3,,Gets the revision of the version.,int |||,,28
<android.app.UiAutomation: void adoptShellPermissionIdentity()>,3,,"Adopt the permission identity of the shell UID for all permissions. This allows
 you to call APIs protected permissions which normal apps cannot hold but are
 granted to the shell UID. If you already adopted all shell permissions by calling
 this method or adoptShellPermissionIdentity(java.lang.String) a subsequent call
 would be a no-op. Note that your permission state becomes that of the shell UID
 and it is not a combination of your and the shell UID permissions. Note: Calling this method adopts all shell permissions and overrides
 any subset of adopted permissions via adoptShellPermissionIdentity(java.lang.String) .",void,,29
"<android.app.UiAutomation: void grantRuntimePermissionAsUser(String,String,UserHandle)>",3,,Grants a runtime permission to a package for a user.,void,"packageName String : The package to which to grant. |||
permission String : The permission to grant. |||
userHandle UserHandle |||",28
<android.app.usage.EventStats: int getEventType()>,1,,"Return the type of event this is usage for.  May be one of the event
 constants in UsageEvents.Event .",int |||,,28
<android.app.usage.EventStats: void add(EventStats)>,2,,"Add the statistics from the right EventStats to the left. The event type for
 both UsageStats objects must be the same.",void,right EventStats : The EventStats object to merge into this one. |||,28
<android.app.usage.UsageEvents.Event: int getAppStandbyBucket()>,3,,Returns the standby bucket of the app if the event is of type STANDBY_BUCKET_CHANGED otherwise returns 0.,int the standby bucket associated with the event. |||,,28
"<android.app.usage.UsageStatsManager: UsageEvents queryEventsForSelf(long,long)>",1,,"Like queryEvents(long long) but only returns events for the calling package. Note: Starting from Android R if the user's
 device is not in an unlocked state (as defined by UserManager#isUserUnlocked() )
 then null will be returned.",UsageEvents A UsageEvents object. |||,"beginTime long : The inclusive beginning of the range of events to include in the results.
Defined in terms of ""Unix time"" see System.currentTimeMillis() . |||
endTime long : The exclusive end of the range of events to include in the results. Defined
in terms of ""Unix time"" see System.currentTimeMillis() . |||",28
<android.app.WallpaperInfo: Uri getSettingsSliceUri()>,3,,"Returns an URI that provides a settings Slice for this wallpaper.
 The wallpaper should implement a SliceProvider associated with this URI.
 The system will display the Slice in the customization section while previewing the live
 wallpaper. Because this URI is accessible to other apps it is recommended to protect it
 with the android.permission.BIND_WALLPAPER permission. null will be returned if there is no settings Slice URI associated
 with the wallpaper.",Uri The URI. |||,,29
<android.app.WallpaperManager: void setDisplayPadding(Rect)>,3,,"Specify extra padding that the wallpaper should have outside of the display.
 That is the given padding supplies additional pixels the wallpaper should extend
 outside of the display itself. This method requires the caller to hold the permission Manifest.permission.SET_WALLPAPER_HINTS . Requires Manifest.permission.SET_WALLPAPER_HINTS",void,"padding Rect : The number of pixels the wallpaper should extend beyond the display
on its left top right and bottom sides. |||",28
<android.bluetooth.BluetoothAdapter: BluetoothServerSocket listenUsingL2capChannel()>,1,,"Create a secure L2CAP Connection-oriented Channel (CoC) BluetoothServerSocket and
 assign a dynamic protocol/service multiplexer (PSM) value. This socket can be used to listen
 for incoming connections. The supported Bluetooth transport is LE only. A remote device connecting to this socket will be authenticated and communication on this
 socket will be encrypted. Use BluetoothServerSocket#accept to retrieve incoming connections from a listening BluetoothServerSocket . The system will assign a dynamic PSM value. This PSM value can be read from the BluetoothServerSocket#getPsm() and this value will be released when this server socket is
 closed Bluetooth is turned off or the application exits unexpectedly. The mechanism of disclosing the assigned dynamic PSM value to the initiating peer is
 defined and performed by the application. Use BluetoothDevice#createL2capChannel(int) to connect to this server
 socket from another Android device that is given the PSM value. Requires Manifest.permission.BLUETOOTH","BluetoothServerSocket an L2CAP CoC BluetoothServerSocket
 This value will never be null . |||",,29
<android.bluetooth.BluetoothDevice: BluetoothSocket createInsecureL2capChannel(int)>,3,,"Create a Bluetooth L2CAP Connection-oriented Channel (CoC) BluetoothSocket that can
 be used to start a secure outgoing connection to the remote device with the same dynamic
 protocol/service multiplexer (PSM) value. The supported Bluetooth transport is LE only. This is designed to be used with BluetoothAdapter#listenUsingInsecureL2capChannel() for peer-peer Bluetooth applications. Use BluetoothSocket#connect to initiate the outgoing connection. Application using this API is responsible for obtaining PSM value from remote device. The communication channel may not have an authenticated link key i.e. it may be subject
 to man-in-the-middle attacks. Use createL2capChannel(int) if an encrypted and
 authenticated communication channel is possible. Requires Manifest.permission.BLUETOOTH","BluetoothSocket a CoC #BluetoothSocket ready for an outgoing connection
 This value will never be null . |||",psm int : dynamic PSM value from remote device |||,29
<android.bluetooth.BluetoothDevice: BluetoothSocket createL2capChannel(int)>,3,,"Create a Bluetooth L2CAP Connection-oriented Channel (CoC) BluetoothSocket that can
 be used to start a secure outgoing connection to the remote device with the same dynamic
 protocol/service multiplexer (PSM) value. The supported Bluetooth transport is LE only. This is designed to be used with BluetoothAdapter#listenUsingL2capChannel() for
 peer-peer Bluetooth applications. Use BluetoothSocket#connect to initiate the outgoing connection. Application using this API is responsible for obtaining PSM value from remote device. The remote device will be authenticated and communication on this socket will be
 encrypted. Use this socket if an authenticated socket link is possible. Authentication refers
 to the authentication of the link key to prevent man-in-the-middle type of attacks. Requires Manifest.permission.BLUETOOTH","BluetoothSocket a CoC #BluetoothSocket ready for an outgoing connection
 This value will never be null . |||",psm int : dynamic PSM value from remote device |||,29
<android.bluetooth.BluetoothHearingAid: int getConnectionState(BluetoothDevice)>,3,,Get the current connection state of the profile Requires Manifest.permission.BLUETOOTH,int Value is BluetoothProfile.STATE_DISCONNECTED  BluetoothProfile.STATE_CONNECTING  BluetoothProfile.STATE_CONNECTED or BluetoothProfile.STATE_DISCONNECTING |||,device BluetoothDevice : This value must never be null . |||,29
"<android.bluetooth.BluetoothHidDevice.Callback: void onGetReport(BluetoothDevice,byte,byte,int)>",3,,"Callback called when GET_REPORT is received from remote host. Should be replied by
 application using BluetoothHidDevice#replyReport(BluetoothDevice byte byte
 byte[]) .",void,"device BluetoothDevice |||
type byte : Requested Report Type. |||
id byte : Requested Report Id can be 0 if no Report Id are defined in descriptor. |||
bufferSize int : Requested buffer size application shall respond with at least given
number of bytes. |||",28
<android.bluetooth.BluetoothHidDevice: boolean disconnect(BluetoothDevice)>,3,,"Disconnects from currently connected host. The connection state should be tracked by the
 application by handling callback from Callback#onConnectionStateChanged. The connection state
 is not related to the return value of this method.",boolean true if the command is successfully sent; otherwise false. |||,device BluetoothDevice |||,28
"<android.bluetooth.BluetoothHidDevice: boolean replyReport(BluetoothDevice,byte,byte,byte)>",2,,Sends report to remote host as reply for GET_REPORT request from Callback#onGetReport(BluetoothDevice byte byte int) .,boolean true if the command is successfully sent; otherwise false. |||,"device BluetoothDevice |||
type byte : Report Type as in request. |||
id byte : Report Id as in request. |||
data byte : Report data not including Report Id. |||",28
"<android.bluetooth.BluetoothHidDevice: boolean reportError(BluetoothDevice,byte)>",3,,Sends error handshake message as reply for invalid SET_REPORT request from Callback#onSetReport(BluetoothDevice byte byte byte[]) .,boolean true if the command is successfully sent; otherwise false. |||,"device BluetoothDevice |||
error byte : Error to be sent for SET_REPORT via HANDSHAKE. |||",28
<android.bluetooth.BluetoothHidDevice: List getConnectedDevices()>,1,,Get connected devices for this specific profile. Return the set of devices which are in state STATE_CONNECTED Requires Manifest.permission.BLUETOOTH,List < BluetoothDevice > List of devices. The list will be empty on error. |||,,28
<android.bluetooth.BluetoothHidDevice: List getDevicesMatchingConnectionStates(int)>,1,,"Get a list of devices that match any of the given connection
 states. If none of the devices match any of the given states
 an empty list will be returned. Requires Manifest.permission.BLUETOOTH",List < BluetoothDevice > List of devices. The list will be empty on error. |||,states int : Array of states. States can be one of BluetoothProfile.STATE_CONNECTED  BluetoothProfile.STATE_CONNECTING  BluetoothProfile.STATE_DISCONNECTED  BluetoothProfile.STATE_DISCONNECTING  |||,28
<android.bluetooth.BluetoothHidDeviceAppQosSettings: int getPeakBandwidth()>,3,,,int |||,,28
<android.bluetooth.BluetoothHidDeviceAppQosSettings: int getTokenRate()>,3,,,int |||,,28
<android.bluetooth.BluetoothHidDeviceAppSdpSettings: int describeContents()>,1,,"Describe the kinds of special objects contained in this Parcelable
 instance's marshaled representation. For example if the object will
 include a file descriptor in the output of writeToParcel(android.os.Parcel int) the return value of this method must include the CONTENTS_FILE_DESCRIPTOR bit.","int a bitmask indicating the set of special object types marshaled
 by this Parcelable object instance.
 
 Value is either 0 or CONTENTS_FILE_DESCRIPTOR |||",,28
<android.bluetooth.BluetoothHidDeviceAppSdpSettings: String getDescription()>,1,,,String |||,,28
<android.bluetooth.BluetoothHidDeviceAppSdpSettings: String getName()>,1,,,String |||,,28
<android.bluetooth.BluetoothHidDeviceAppSdpSettings: String getProvider()>,1,,,String |||,,28
<android.bluetooth.le.ScanFilter.Builder: ScanFilter.Builder setServiceSolicitationUuid(ParcelUuid)>,1,,Set filter on service solicitation uuid.,ScanFilter.Builder This value will never be null . |||,serviceSolicitationUuid ParcelUuid : This value may be null . |||,29
<android.bluetooth.le.ScanFilter: ParcelUuid getServiceSolicitationUuid()>,1,,Returns the filter set on the service Solicitation uuid.,ParcelUuid This value may be null . |||,,29
<android.bluetooth.le.ScanRecord: List getServiceSolicitationUuids()>,1,,"Returns a list of service solicitation UUIDs within the advertisement that are used to
 identify the Bluetooth GATT services.",List < ParcelUuid > This value will never be null . |||,,29
<android.content.ClipboardManager: void clearPrimaryClip()>,3,,Clears any current primary clip on the clipboard.,void,,28
"<android.content.ContentProviderClient: AssetFileDescriptor openTypedAssetFile(Uri,String,Bundle,CancellationSignal)>",,,,AssetFileDescriptor This value may be null . |||,"uri Uri : This value must never be null . |||
mimeTypeFilter String : This value must never be null . |||
opts Bundle : This value may be null . |||
signal CancellationSignal : This value may be null . |||",29
"<android.content.ContentProviderClient: ContentProviderResult applyBatch(String,ArrayList)>",1,,See ContentProvider#applyBatch,ContentProviderResult[] This value will never be null . |||,"authority String : This value must never be null . |||
operations ArrayList : This value must never be null . |||",29
"<android.content.ContentResolver: AssetFileDescriptor openAssetFile(Uri,String,CancellationSignal)>", ,,,AssetFileDescriptor This value may be null . |||,"uri Uri : This value must never be null . |||
mode String : This value must never be null . |||
signal CancellationSignal : This value may be null . |||",29
"<android.content.ContentResolver: AssetFileDescriptor openTypedAssetFile(Uri,String,Bundle,CancellationSignal)>",,,,AssetFileDescriptor This value may be null . |||,"uri Uri : This value must never be null . |||
mimeTypeFilter String : This value must never be null . |||
opts Bundle : This value may be null . |||
signal CancellationSignal : This value may be null . |||",29
"<android.content.ContentResolver: Bitmap loadThumbnail(Uri,Size,CancellationSignal)>",,,"Convenience method that efficiently loads a visual thumbnail for the
 given Uri . Internally calls ContentProvider#openTypedAssetFile on the remote provider but
 also defensively resizes any returned content to match the requested
 target size.","Bitmap Valid Bitmap which is a visual thumbnail.
 This value will never be null . |||","uri Uri : The item that should be visualized as a thumbnail.
This value must never be null . |||
size Size : The target area on the screen where this thumbnail will be
shown. This is passed to the provider as EXTRA_SIZE to help it avoid downloading or generating heavy resources.
This value must never be null . |||
signal CancellationSignal : A signal to cancel the operation in progress.
This value may be null . |||",29
"<android.content.Context: boolean bindService(Intent,int,Executor,ServiceConnection)>",,,"Same as bindService(android.content.Intent android.content.ServiceConnection int) with executor to control
 ServiceConnection callbacks.",boolean |||,"service Intent : This value must never be null . |||
flags int : Value is either 0 or a combination of BIND_AUTO_CREATE  BIND_DEBUG_UNBIND  BIND_NOT_FOREGROUND  BIND_ABOVE_CLIENT  BIND_ALLOW_OOM_MANAGEMENT  BIND_WAIVE_PRIORITY  BIND_IMPORTANT  BIND_ADJUST_WITH_ACTIVITY  BIND_NOT_PERCEPTIBLE and BIND_INCLUDE_CAPABILITIES |||
executor Executor : Callbacks on ServiceConnection will be called on executor. Must use same
instance for the same instance of ServiceConnection.
This value must never be null .
Callback and listener events are dispatched through this Executor providing an easy way to control which thread is
used. To dispatch events through the main thread of your
application you can use Context.getMainExecutor() .
To dispatch events through a shared thread pool you can use AsyncTask#THREAD_POOL_EXECUTOR . |||
conn ServiceConnection : This value must never be null . |||",29
<android.content.Context: String getOpPackageName()>,,,"Return the package name that should be used for AppOpsManager calls from
 this context so that app ops manager's uid verification will work with the name. This is not generally intended for third party application developers.",String This value will never be null . |||,,29
"<android.content.ContextWrapper: boolean bindIsolatedService(Intent,int,String,Executor,ServiceConnection)>",,,"Variation of bindService(Intent ServiceConnection int) that in the specific case of isolated
 services allows the caller to generate multiple instances of a service
 from a single component declaration.  In other words you can use this to bind
 to a service that has specified R.attr.isolatedProcess and in
 addition to the existing behavior of running in an isolated process you can
 also through the arguments here have the system bring up multiple concurrent
 processes hosting their own instances of that service.  The instanceName you provide here identifies the different instances and you can use updateServiceGroup(android.content.ServiceConnection int int) to tell the system how it
 should manage each of these instances.",boolean Returns success of binding as per bindService(Intent ServiceConnection int) . |||,"service Intent : Identifies the service to connect to.  The Intent must
specify an explicit component name.
This value must never be null . |||
flags int : Operation options for the binding as per bindService(Intent ServiceConnection int) .
Value is either 0 or a combination of Context.BIND_AUTO_CREATE  Context.BIND_DEBUG_UNBIND  Context.BIND_NOT_FOREGROUND  Context.BIND_ABOVE_CLIENT  Context.BIND_ALLOW_OOM_MANAGEMENT  Context.BIND_WAIVE_PRIORITY  Context.BIND_IMPORTANT  Context.BIND_ADJUST_WITH_ACTIVITY  Context.BIND_NOT_PERCEPTIBLE and Context.BIND_INCLUDE_CAPABILITIES |||
instanceName String : Unique identifier for the service instance.  Each unique
name here will result in a different service instance being created.  Identifiers
must only contain ASCII letters digits underscores and periods.
This value must never be null . |||
executor Executor : Callbacks on ServiceConnection will be called on executor.
Must use same instance for the same instance of ServiceConnection.
This value must never be null .
Callback and listener events are dispatched through this Executor providing an easy way to control which thread is
used. To dispatch events through the main thread of your
application you can use Context.getMainExecutor() .
To dispatch events through a shared thread pool you can use AsyncTask#THREAD_POOL_EXECUTOR . |||
conn ServiceConnection : Receives information as the service is started and stopped.
This must be a valid ServiceConnection object; it must not be null.
This value must never be null . |||",29
<android.content.ContextWrapper: Executor getMainExecutor()>,,,"Return an Executor that will run enqueued tasks on the main
 thread associated with this context. This is the thread used to dispatch
 calls to application components (activities services etc).",Executor |||,,28
<android.content.LocusId: int describeContents()>,,,"Describe the kinds of special objects contained in this Parcelable
 instance's marshaled representation. For example if the object will
 include a file descriptor in the output of writeToParcel(android.os.Parcel int) the return value of this method must include the CONTENTS_FILE_DESCRIPTOR bit.","int a bitmask indicating the set of special object types marshaled
 by this Parcelable object instance.
 
 Value is either 0 or CONTENTS_FILE_DESCRIPTOR |||",,29
<android.content.LocusId: String toString()>,,,"Returns a string representation of the object. In general the toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the
 object is an instance the at-sign character ` @ ' and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words this method returns a string equal to the
 value of:",String a string representation of the object. |||,,29
<android.content.pm.CrossProfileApps: List getTargetUserProfiles()>,,,"Return a list of user profiles that that the caller can use when calling other APIs in this
 class. A user profile would be considered as a valid target user profile provided that: It gets caller app installed 
It is not equal to the calling user 
It is in the same profile group of calling user profile 
It is enabled",List < UserHandle > This value will never be null . |||,,28
"<android.content.pm.LauncherApps.Callback: void onPackagesSuspended(String,UserHandle,Bundle)>",,,"This method was deprecated
      in API level R. launcherExtras should be obtained by using LauncherApps.getSuspendedPackageLauncherExtras(java.lang.String android.os.UserHandle) . For all other cases onPackagesSuspended(java.lang.String[] android.os.UserHandle) should be used. Indicates that one or more packages have been suspended. A device administrator or an app
 with android.permission.SUSPEND_APPS can do this. A suspending app with the permission android.permission.SUSPEND_APPS can
 optionally provide a Bundle of extra information that it deems helpful for the
 launcher to handle the suspended state of these packages. The contents of this Bundle are supposed to be a contract between the suspending app and the launcher.",void,"packageNames String : The names of the packages that have just been suspended. |||
user UserHandle : the user for which the given packages were suspended. |||
launcherExtras Bundle : A Bundle of extras for the launcher if provided to the
system null otherwise.
This value may be null . |||",28
"<android.content.pm.LauncherApps: boolean shouldHideFromSuggestions(String,UserHandle)>",,,"Returns whether a package should be hidden from suggestions to the user. Currently this
 could be done because the package was marked as distracting to the user via PackageManager.setDistractingPackageRestrictions(String[] int) .",boolean |||,"packageName String : The package for which to check.
This value must never be null . |||
user UserHandle : the UserHandle of the profile.
This value must never be null . |||",29
"<android.content.pm.LauncherApps: Bundle getSuspendedPackageLauncherExtras(String,UserHandle)>",,,"Gets the launcher extras supplied to the system when the given package was suspended via PackageManager#setPackagesSuspended(String[] boolean PersistableBundle
 PersistableBundle String) . The contents of this Bundle are supposed to be a contract between the suspending
 app and the launcher. Note: This just returns whatever extras were provided to the system which might
 even be null .","Bundle A Bundle of launcher extras. Or null if the package is not currently
         suspended. |||","packageName String : The package for which to fetch the launcher extras. |||
user UserHandle : The UserHandle of the profile. |||",28
<android.content.pm.LauncherApps: List getAllPackageInstallerSessions()>,,,"Return list of all known install sessions in this user and managed profiles regardless
 of the installer.",List < PackageInstaller.SessionInfo > This value will never be null . |||,,29
"<android.content.pm.LauncherApps: void startPackageInstallerSessionDetailsActivity(PackageInstaller.SessionInfo,Rect,Bundle)>",,,Starts an activity to show the details of the specified session.,void,"sessionInfo PackageInstaller.SessionInfo : The SessionInfo of the session
This value must never be null . |||
sourceBounds Rect : The Rect containing the source bounds of the clicked icon
This value may be null . |||
opts Bundle : Options to pass to startActivity
This value may be null . |||",29
<android.content.pm.ModuleInfo: boolean equals(Object)>,,,"Indicates whether some other object is ""equal to"" this one. The equals method implements an equivalence relation
 on non-null object references: It is reflexive : for any non-null reference value x  x.equals(x) should return true . 
It is symmetric : for any non-null reference values x and y  x.equals(y) should return true if and only if y.equals(x) returns true . 
It is transitive : for any non-null reference values x  y and z if x.equals(y) returns true and y.equals(z) returns true then x.equals(z) should return true . 
It is consistent : for any non-null reference values x and y multiple invocations of x.equals(y) consistently return true or consistently return false provided no
     information used in equals comparisons on the
     objects is modified. 
For any non-null reference value x  x.equals(null) should return false . 
The equals method for class Object implements
 the most discriminating possible equivalence relation on objects;
 that is for any non-null reference values x and y this method returns true if and only
 if x and y refer to the same object
 ( x == y has the value true ). Note that it is generally necessary to override the hashCode method whenever this method is overridden so as to maintain the
 general contract for the hashCode method which states
 that equal objects must have equal hash codes.","boolean true if this object is the same as the obj
          argument; false otherwise. |||",obj Object : the reference object with which to compare. |||,29
<android.content.pm.ModuleInfo: CharSequence getName()>,,,Gets the public name of this module.,CharSequence This value may be null . |||,,29
<android.content.pm.ModuleInfo: String toString()>,,,Returns a string representation of this object.,String a string representation of the object. |||,,29
<android.content.pm.PackageInfo: long getLongVersionCode()>,,,"Return versionCode and versionCodeMajor combined
 together as a single long value.  The versionCodeMajor is placed in
 the upper 32 bits.",long |||,,28
<android.content.pm.PackageInstaller.SessionInfo: boolean isStaged()>,,,Returns true if this session is a staged session.,boolean |||,,29
<android.content.pm.PackageInstaller.SessionInfo: boolean isStagedSessionFailed()>,,,"Whether something went wrong and the staged session is declared as failed meaning that
 it will be ignored at next reboot. Only meaningful if isStaged is true.",boolean |||,,29
<android.content.pm.PackageInstaller.SessionInfo: int getChildSessionIds()>,,,"Returns the set of session IDs that will be committed when this session is commited if
 this session is a multi-package session.",int[] This value will never be null . |||,,29
<android.content.pm.PackageInstaller.SessionInfo: int getParentSessionId()>,,,Returns the parent multi-package session ID if this session belongs to one INVALID_ID otherwise.,int |||,,29
<android.content.pm.PackageInstaller.SessionInfo: int getStagedSessionErrorCode()>,,,"If something went wrong with a staged session clients can check this error code to
 understand which kind of failure happened. Only meaningful if isStaged is true.",int Value is STAGED_SESSION_NO_ERROR  STAGED_SESSION_VERIFICATION_FAILED  STAGED_SESSION_ACTIVATION_FAILED or STAGED_SESSION_UNKNOWN |||,,29
<android.content.pm.PackageInstaller.SessionInfo: String getStagedSessionErrorMessage()>,,,"Text description of the error code returned by getStagedSessionErrorCode or
 empty string if no error was encountered.",String This value will never be null . |||,,29
<android.content.pm.PackageInstaller.SessionInfo: UserHandle getUser()>,,,Return the user associated with this session.,UserHandle This value will never be null . |||,,29
<android.content.pm.PackageInstaller.SessionParams: void setWhitelistedRestrictedPermissions(Set)>,,,"Sets which restricted permissions to be whitelisted for the app. Whitelisting
 is not granting the permissions rather it allows the app to hold permissions
 which are otherwise restricted. Whitelisting a non restricted permission has
 no effect. Permissions can be hard restricted which means that the app cannot hold
 them or soft restricted where the app can hold the permission but in a weaker
 form. Whether a permission is PermissionInfo#FLAG_HARD_RESTRICTED or PermissionInfo#FLAG_SOFT_RESTRICTED depends on the permission declaration. Whitelisting a hard restricted permission
 allows the app to hold that permission and whitelisting a soft restricted
 permission allows the app to hold the permission in its full unrestricted form. Permissions can also be immutably restricted which means that the whitelist
 state of the permission can be determined only at install time and cannot be
 changed on updated or at a later point via the package manager APIs. Initially all restricted permissions are whitelisted but you can change
 which ones are whitelisted by calling this method or the corresponding ones
 on the PackageManager .",void,permissions Set : This value may be null . |||,29
<android.content.pm.PackageInstaller: List getStagedSessions()>,,,Return list of all staged install sessions.,List < PackageInstaller.SessionInfo > This value will never be null . |||,,29
"<android.content.pm.PackageManager: boolean hasSigningCertificate(String,byte,int)>",,,"Searches the set of signing certificates by which the given package has proven to have been
 signed.  This should be used instead of getPackageInfo with GET_SIGNATURES since it takes into account the possibility of signing certificate rotation except in the
 case of packages that are signed by multiple certificates for which signing certificate
 rotation is not supported.  This method is analogous to using getPackageInfo with GET_SIGNING_CERTIFICATES and then searching through the resulting signingInfo field to see if the desired certificate is present.",boolean true if this package was or is signed by exactly the certificate certificate |||,"packageName String : package whose signing certificates to check
This value must never be null . |||
certificate byte : signing certificate for which to search
This value must never be null . |||
type int : representation of the certificate Value is CERT_INPUT_RAW_X509 or CERT_INPUT_SHA256 |||",28
<android.content.pm.PackageManager: Bundle getSuspendedPackageAppExtras()>,,,"Returns a Bundle of extras that was meant to be sent to the calling app when it was
 suspended. An app with the permission android.permission.SUSPEND_APPS can supply this
 to the system at the time of suspending an app. This is the same Bundle that is sent along with the broadcast Intent#ACTION_MY_PACKAGE_SUSPENDED whenever the app is suspended. The contents of
 this Bundle are a contract between the suspended app and the suspending app. Note: These extras are optional so if no extras were supplied to the system this method
 will return null even when the calling app has been suspended.","Bundle A Bundle containing the extras for the app or null if the
 package is not currently suspended. |||",,28
<android.content.pm.PackageManager: void addWhitelistedRestrictedPermission()>,,,"Adds a whitelisted restricted permission for an app. Permissions can be hard restricted which means that the app cannot hold
 them or soft restricted where the app can hold the permission but in a weaker
 form. Whether a permission is PermissionInfo#FLAG_HARD_RESTRICTED or PermissionInfo#FLAG_SOFT_RESTRICTED depends on the permission declaration. Whitelisting a hard restricted permission
 allows for the to hold that permission and whitelisting a soft restricted
 permission allows the app to hold the permission in its full unrestricted form.",void,,29
<android.content.pm.PackageManager: void getWhitelistedRestrictedPermissions()>,,,"Gets the restricted permissions that have been whitelisted and the app
 is allowed to have them granted in their full form. Permissions can be hard restricted which means that the app cannot hold
 them or soft restricted where the app can hold the permission but in a weaker
 form. Whether a permission is PermissionInfo#FLAG_HARD_RESTRICTED or PermissionInfo#FLAG_SOFT_RESTRICTED depends on the permission declaration. Whitelisting a hard restricted permission
 allows for the to hold that permission and whitelisting a soft restricted
 permission allows the app to hold the permission in its full unrestricted form.",void,,29
<android.content.pm.PermissionInfo: int getProtectionFlags()>,,,Return the additional flags in protectionLevel .,int Value is either 0 or a combination of PROTECTION_FLAG_PRIVILEGED  PROTECTION_FLAG_SYSTEM  PROTECTION_FLAG_DEVELOPMENT  PROTECTION_FLAG_APPOP  PROTECTION_FLAG_PRE23  PROTECTION_FLAG_INSTALLER  PROTECTION_FLAG_VERIFIER  PROTECTION_FLAG_PREINSTALLED  PROTECTION_FLAG_SETUP  PROTECTION_FLAG_INSTANT  PROTECTION_FLAG_RUNTIME_ONLY android.content.pm.PermissionInfo.PROTECTION_FLAG_OEM android.content.pm.PermissionInfo.PROTECTION_FLAG_VENDOR_PRIVILEGED android.content.pm.PermissionInfo.PROTECTION_FLAG_SYSTEM_TEXT_CLASSIFIER android.content.pm.PermissionInfo.PROTECTION_FLAG_WELLBEING android.content.pm.PermissionInfo.PROTECTION_FLAG_DOCUMENTER android.content.pm.PermissionInfo.PROTECTION_FLAG_CONFIGURATOR android.content.pm.PermissionInfo.PROTECTION_FLAG_INCIDENT_REPORT_APPROVER android.content.pm.PermissionInfo.PROTECTION_FLAG_APP_PREDICTOR android.content.pm.PermissionInfo.PROTECTION_FLAG_TELEPHONY android.content.pm.PermissionInfo.PROTECTION_FLAG_COMPANION and android.content.pm.PermissionInfo.PROTECTION_FLAG_RETAIL_DEMO |||,,28
<android.content.pm.SharedLibraryInfo: long getLongVersion()>,,,"Gets the version of the library. For static libraries
 this is the declared version and for dynamic and builtin it is VERSION_UNDEFINED as these
 are not versioned.","long The version.
 
 Value is -1 or greater |||",,28
<android.content.pm.ShortcutInfo.Builder: ShortcutInfo.Builder setLocusId(LocusId)>,,,"Sets the LocusId associated with this shortcut. This method should be called when the LocusId is used in other places (such
 as Notification and ContentCaptureContext ) so the device's intelligence
 services can correlate them.",ShortcutInfo.Builder This value will never be null . |||,locusId LocusId : This value must never be null . |||,29
<android.content.pm.ShortcutInfo: int getDisabledReason()>,,,Returns why a shortcut has been disabled.,int Value is DISABLED_REASON_NOT_DISABLED  DISABLED_REASON_BY_APP  DISABLED_REASON_APP_CHANGED  DISABLED_REASON_UNKNOWN  DISABLED_REASON_VERSION_LOWER  DISABLED_REASON_BACKUP_NOT_SUPPORTED  DISABLED_REASON_SIGNATURE_MISMATCH or DISABLED_REASON_OTHER_RESTORE_ISSUE |||,,28
<android.content.pm.ShortcutInfo: LocusId getLocusId()>,,,Gets the LocusId associated with this shortcut. Used by the device's intelligence services to correlate objects (such as Notification and ContentCaptureContext ) that are correlated.,LocusId This value may be null . |||,,29
<android.content.res.Resources.Theme: int getExplicitStyle(AttributeSet)>,,,"Returns the resource ID for the style specified using style=""..."" in the AttributeSet 's backing XML element or Resources#ID_NULL otherwise if not
 specified or otherwise not applicable. Each View can have an explicit style specified in the layout file.
 This style is used first during the View attribute resolution then
 if an attribute is not defined there the resource system looks at default style and theme
 as fallbacks.","int The resource ID for the style specified using style=""..."" in the AttributeSet 's backing XML element or Resources#ID_NULL otherwise
      if not specified or otherwise not applicable. |||","set AttributeSet : The base set of attribute values.
This value may be null . |||",29
<android.content.res.Resources.Theme: void rebase()>,,,"Rebases the theme against the parent Resource object's current
 configuration by re-applying the styles passed to applyStyle(int boolean) .",void,,29
<android.database.AbstractCursor: List getNotificationUris()>,,,"Return the URIs at which notifications of changes in this Cursor's data
 will be delivered as previously set by setNotificationUris(ContentResolver List ) . If this is not implemented this is equivalent to calling getNotificationUri() .","List < Uri > Returns URIs that can be used with ContentResolver#registerContentObserver(android.net.Uri boolean ContentObserver) to find out about changes to this Cursor's
 data. May be null if no notification URI has been set. |||",,29
"<android.database.AbstractCursor: void setNotificationUris(ContentResolver,List)>",,,"Similar to setNotificationUri(android.content.ContentResolver android.net.Uri) except this version allows
 to watch multiple content URIs for changes. If this is not implemented this is equivalent to calling setNotificationUri(android.content.ContentResolver android.net.Uri) with the first URI in uris . Calling this overrides any previous call to setNotificationUri(android.content.ContentResolver android.net.Uri) .",void,"cr ContentResolver : This value must never be null . |||
notifyUris List : This value must never be null . |||",29
<android.database.sqlite.SQLiteDatabase.OpenParams: String getSynchronousMode()>,,,"Returns synchronous mode .
 If not set a system wide default will be used.",String This value may be null . |||,,28
<android.database.sqlite.SQLiteOpenHelper: void setOpenParams(SQLiteDatabase.OpenParams)>,,,"Sets configuration parameters that are used for opening SQLiteDatabase . Please note that SQLiteDatabase#CREATE_IF_NECESSARY flag will always be set when
 opening the database",void,"openParams SQLiteDatabase.OpenParams : configuration parameters that are used for opening SQLiteDatabase .
This value must never be null . |||",28
<android.database.sqlite.SQLiteQueryBuilder: boolean isDistinct()>,,,Get if the query is marked as DISTINCT as last configured by setDistinct(boolean) .,boolean |||,,29
"<android.database.sqlite.SQLiteQueryBuilder: int delete(SQLiteDatabase,String,String)>",,,"Perform a delete by combining all current settings and the
 information passed into this method.",int the number of rows deleted |||,"db SQLiteDatabase : the database to delete on
This value must never be null . |||
selection String : A filter declaring which rows to return
formatted as an SQL WHERE clause (excluding the WHERE itself). Passing null will return all rows for the given URL.
This value may be null . |||
selectionArgs String : You may include ?s in selection which
will be replaced by the values from selectionArgs in order
that they appear in the selection. The values will be bound
as Strings.
This value may be null . |||",29
"<android.database.sqlite.SQLiteQueryBuilder: int update(SQLiteDatabase,ContentValues,String,String)>",,,"Perform an update by combining all current settings and the
 information passed into this method.",int the number of rows updated |||,"db SQLiteDatabase : the database to update on
This value must never be null . |||
values ContentValues : This value must never be null . |||
selection String : A filter declaring which rows to return
formatted as an SQL WHERE clause (excluding the WHERE itself). Passing null will return all rows for the given URL.
This value may be null . |||
selectionArgs String : You may include ?s in selection which
will be replaced by the values from selectionArgs in order
that they appear in the selection. The values will be bound
as Strings.
This value may be null . |||",29
<android.database.sqlite.SQLiteQueryBuilder: SQLiteDatabase.CursorFactory getCursorFactory()>,,,Gets the cursor factory to be used for the query as last configured by setCursorFactory(android.database.sqlite.SQLiteDatabase.CursorFactory) .,SQLiteDatabase.CursorFactory This value may be null . |||,,29
<android.database.sqlite.SQLiteQueryBuilder: void appendWhereStandalone(CharSequence)>,,,"Add a standalone chunk to the WHERE clause of this query. This method differs from appendWhere(java.lang.CharSequence) in that it
 automatically appends AND to any existing WHERE clause
 already under construction before appending the given standalone
 expression wrapped in parentheses.",void,"inWhere CharSequence : the standalone expression to append to the WHERE clause. It will be wrapped in parentheses when it's appended.
This value must never be null . |||",29
<android.graphics.Bitmap: Bitmap createBitmap(Picture)>,,,"Creates a Bitmap from the given Picture source of recorded drawing commands.

 Equivalent to calling createBitmap(android.graphics.Picture int int android.graphics.Bitmap.Config) with
 width and height the same as the Picture's width and height and a Config.HARDWARE
 config.","Bitmap An immutable bitmap with a HARDWARE config whose contents are created
 from the recorded drawing commands in the Picture source.
 
 This value will never be null . |||","source Picture : The recorded Picture of drawing commands that will be
drawn into the returned Bitmap.
This value must never be null . |||",28
<android.graphics.Bitmap: void eraseColor(long)>,,,Fills the bitmap's pixels with the specified ColorLong .,void,color long : The color to fill as packed by the Color class. |||,29
<android.graphics.BlendModeColorFilter: BlendMode getMode()>,,,"Returns the Porter-Duff mode used to composite this color filter's
 color with the source pixel when this filter is applied.",BlendMode |||,,29
<android.graphics.BlendModeColorFilter: boolean equals(Object)>,,,"Indicates whether some other object is ""equal to"" this one. The equals method implements an equivalence relation
 on non-null object references: It is reflexive : for any non-null reference value x  x.equals(x) should return true . 
It is symmetric : for any non-null reference values x and y  x.equals(y) should return true if and only if y.equals(x) returns true . 
It is transitive : for any non-null reference values x  y and z if x.equals(y) returns true and y.equals(z) returns true then x.equals(z) should return true . 
It is consistent : for any non-null reference values x and y multiple invocations of x.equals(y) consistently return true or consistently return false provided no
     information used in equals comparisons on the
     objects is modified. 
For any non-null reference value x  x.equals(null) should return false . 
The equals method for class Object implements
 the most discriminating possible equivalence relation on objects;
 that is for any non-null reference values x and y this method returns true if and only
 if x and y refer to the same object
 ( x == y has the value true ). Note that it is generally necessary to override the hashCode method whenever this method is overridden so as to maintain the
 general contract for the hashCode method which states
 that equal objects must have equal hash codes.","boolean true if this object is the same as the obj
          argument; false otherwise. |||",object Object : the reference object with which to compare. |||,29
<android.graphics.BlendModeColorFilter: int getColor()>,,,"Returns the ARGB color used to tint the source pixels when this filter
 is applied.",int |||,,29
"<android.graphics.Canvas: void drawDoubleRoundRect(RectF,float,RectF,float,Paint)>",,,"Draws a double rounded rectangle using the specified paint. The resultant round rect
 will be filled in the area defined between the outer and inner rectangular bounds if
 the Paint configured with Paint.Style#FILL .
 Otherwise if Paint.Style#STROKE is used then 2 rounded rect strokes will
 be drawn at the outer and inner rounded rectangles",void,"outer RectF : The outer rectangular bounds of the roundRect to be drawn
This value must never be null . |||
outerRadii float : Array of 8 float representing the x y corner radii for top left
top right bottom right bottom left corners respectively on the outer
rounded rectangle
This value must never be null . |||
inner RectF : The inner rectangular bounds of the roundRect to be drawn
This value must never be null . |||
innerRadii float : Array of 8 float representing the x y corner radii for top left
top right bottom right bottom left corners respectively on the
outer rounded rectangle
This value must never be null . |||
paint Paint : The paint used to draw the double roundRect
This value must never be null . |||",29
<android.graphics.Canvas: void drawRenderNode(RenderNode)>,,,"Draws the given RenderNode. This is only supported in hardware rendering which can be
 verified by asserting that isHardwareAccelerated() is true. If isHardwareAccelerated() is false then this throws an exception.

 See RenderNode for more information on what a RenderNode is and how to use it.",void,"renderNode RenderNode : The RenderNode to draw must be non-null.
This value must never be null . |||",29
"<android.graphics.Canvas: void drawTextRun(MeasuredText,int,int,int,int,float,float,boolean,Paint)>",,,"Draw a run of text all in a single direction with optional context for complex text
 shaping. See drawTextRun(java.lang.CharSequence int int int int float float boolean android.graphics.Paint) for
 more details. This method uses a MeasuredText rather than CharSequence to represent
 the string.",void,"text MeasuredText : the text to render
This value must never be null . |||
start int : the start of the text to render. Data before this position can be used for
shaping context. |||
end int : the end of the text to render. Data at or after this position can be used for
shaping context. |||
contextStart int : the index of the start of the shaping context |||
contextEnd int : the index of the end of the shaping context |||
x float : the x position at which to draw the text |||
y float : the y position at which to draw the text |||
isRtl boolean : whether the run is in RTL direction |||
paint Paint : the paint
This value must never be null . |||",29
<android.graphics.Canvas: void enableZ()>,,,"Enables Z support which defaults to disabled. This allows for RenderNodes drawn with drawRenderNode(android.graphics.RenderNode) to be re-arranged based off of their RenderNode#getElevation() and RenderNode#getTranslationZ() values. It also enables rendering of shadows for RenderNodes with an elevation or
 translationZ. Any draw reordering will not be moved before this call. A typical usage of this might
 look something like:",void,,29
<android.graphics.drawable.AnimatedImageDrawable: boolean isRunning()>,,,"Return whether the animation is currently running. When this drawable is created this will return false . A client
  needs to call start() to start the animation.",boolean True if the animation is running false otherwise. |||,,28
<android.graphics.drawable.AnimatedImageDrawable: boolean onLayoutDirectionChanged(int)>,,,Called when the drawable's resolved layout direction changes.,"boolean true if the layout direction change has caused the
         appearance of the drawable to change such that it needs to be
         re-drawn false otherwise |||","layoutDirection int : the new resolved layout direction
Value is View.LAYOUT_DIRECTION_LTR or View.LAYOUT_DIRECTION_RTL |||",28
<android.graphics.drawable.AnimatedImageDrawable: boolean unregisterAnimationCallback(Animatable2.AnimationCallback)>,,,Removes the specified animation callback.,"boolean false if callback didn't exist in the call back list or true if
         callback has been removed successfully. |||",callback Animatable2.AnimationCallback : This value must never be null . |||,28
<android.graphics.drawable.AnimatedImageDrawable: int getAlpha()>,,,"Gets the current alpha value for the drawable. 0 means fully transparent
 255 means fully opaque. This method is implemented by
 Drawable subclasses and the value returned is specific to how that class treats alpha.
 The default return value is 255 if the class does not override this method to return a value
 specific to its use of alpha.",int Value is between 0 and 255 inclusive |||,,28
<android.graphics.drawable.AnimatedImageDrawable: int getIntrinsicHeight()>,,,"Returns the drawable's intrinsic height. Intrinsic height is the height at which the drawable would like to be
 laid out including any inherent padding. If the drawable has no
 intrinsic height such as a solid color this method returns -1.",int the intrinsic height or -1 if no intrinsic height |||,,28
<android.graphics.drawable.AnimatedImageDrawable: int getIntrinsicWidth()>,,,"Returns the drawable's intrinsic width. Intrinsic width is the width at which the drawable would like to be laid
 out including any inherent padding. If the drawable has no intrinsic
 width such as a solid color this method returns -1.",int the intrinsic width or -1 if no intrinsic width |||,,28
<android.graphics.drawable.AnimatedImageDrawable: void clearAnimationCallbacks()>,,,Removes all existing animation callbacks.,void,,28
<android.graphics.drawable.AnimatedImageDrawable: void setAutoMirrored(boolean)>,,,"Set whether this Drawable is automatically mirrored when its layout direction is RTL
 (right-to left). See LayoutDirection .",void,mirrored boolean : Set to true if the Drawable should be mirrored false if not. |||,28
<android.graphics.drawable.AnimatedImageDrawable: void stop()>,,,"Stop the animation. If the animation is stopped it will continue to display the frame
  it was displaying when stopped.",void,,28
<android.graphics.drawable.ColorStateListDrawable: boolean isStateful()>,,,"Indicates whether this drawable will change its appearance based on
 state. Clients can use this to determine whether it is necessary to
 calculate their state and call setState.","boolean True if this drawable changes its appearance based on state
         false otherwise. |||",,29
<android.graphics.drawable.ColorStateListDrawable: ColorStateList getColorStateList()>,,,"Returns the ColorStateList backing this Drawable or a new ColorStateList of the default
 ColorDrawable color if one hasn't been defined yet.","ColorStateList a ColorStateList
 
 This value will never be null . |||",,29
<android.graphics.drawable.ColorStateListDrawable: Drawable mutate()>,,,"Make this drawable mutable. This operation cannot be reversed. A mutable
 drawable is guaranteed to not share its state with any other drawable.
 This is especially useful when you need to modify properties of drawables
 loaded from resources. By default all drawables instances loaded from
 the same resource share a common state; if you modify the state of one
 instance all the other instances will receive the same modification.

 Calling this method on a mutable Drawable will have no effect.",Drawable This value will never be null . |||,,29
<android.graphics.drawable.ColorStateListDrawable: int getChangingConfigurations()>,,,"Return a mask of the configuration parameters for which this drawable
 may change requiring that it be re-created.  The default implementation
 returns whatever was provided through setChangingConfigurations(int) or 0 by default.  Subclasses
 may extend this to or in the changing configurations of any other
 drawables they hold.","int Returns a mask of the changing configuration parameters as
 defined by ActivityInfo .

 Value is either 0 or a combination of ActivityInfo.CONFIG_MCC  ActivityInfo.CONFIG_MNC  ActivityInfo.CONFIG_LOCALE  ActivityInfo.CONFIG_TOUCHSCREEN  ActivityInfo.CONFIG_KEYBOARD  ActivityInfo.CONFIG_KEYBOARD_HIDDEN  ActivityInfo.CONFIG_NAVIGATION  ActivityInfo.CONFIG_ORIENTATION  ActivityInfo.CONFIG_SCREEN_LAYOUT  ActivityInfo.CONFIG_UI_MODE  ActivityInfo.CONFIG_SCREEN_SIZE  ActivityInfo.CONFIG_SMALLEST_SCREEN_SIZE  ActivityInfo.CONFIG_DENSITY  ActivityInfo.CONFIG_LAYOUT_DIRECTION  ActivityInfo.CONFIG_COLOR_MODE and ActivityInfo.CONFIG_FONT_SCALE |||",,29
<android.graphics.drawable.ColorStateListDrawable: void onBoundsChange(Rect)>,,,"Override this in your subclass to change appearance if you vary based on
 the bounds.",void,bounds Rect |||,29
"<android.graphics.drawable.ColorStateListDrawable: void scheduleDrawable(Drawable,Runnable,long)>",,,"A Drawable can call this to schedule the next frame of its
 animation.  An implementation can generally simply call Handler.postAtTime(Runnable Object long) with
 the parameters (what who when) to perform the
 scheduling.",void,"who Drawable : This value must never be null . |||
what Runnable : This value must never be null . |||
when long : The time (in milliseconds) to run.  The timebase is SystemClock.uptimeMillis() |||",29
<android.graphics.drawable.ColorStateListDrawable: void setColorFilter(ColorFilter)>,3,,"Specify an optional color filter for the drawable. If a Drawable has a ColorFilter each output pixel of the Drawable's
 drawing contents will be modified by the color filter before it is
 blended onto the render target of a Canvas. Pass null to remove any existing color filter. Note: Setting a non- null color
 filter disables tint .",void,colorFilter ColorFilter : This value may be null . |||,29
<android.graphics.drawable.ColorStateListDrawable: void setColorStateList(ColorStateList)>,3,,"Replace this Drawable's ColorStateList. It is not copied so changes will propagate on the
 next call to Drawable.setState(int[]) .",void,"colorStateList ColorStateList : A color state list to attach.
This value must never be null . |||",29
<android.graphics.drawable.ColorStateListDrawable: void setTintBlendMode(BlendMode)>,3,,"Specifies a tint blending mode for this drawable. Defines how this drawable's tint color should be blended into the drawable
 before it is drawn to screen. Default tint mode is BlendMode#SRC_IN . Note: Setting a color filter via setColorFilter(android.graphics.ColorFilter)",void,blendMode BlendMode : This value must never be null . |||,29
<android.graphics.drawable.Drawable: boolean isProjected()>,,,"Whether this drawable requests projection. Indicates that the RenderNode this Drawable will draw into should be drawn immediately
 after the closest ancestor RenderNode containing a projection receiver.",boolean |||,,29
<android.graphics.drawable.Drawable: Insets getOpticalInsets()>,3,,"Return in insets the layout insets suggested by this Drawable for use with alignment
 operations during layout.",Insets This value will never be null . |||,,29
<android.graphics.drawable.GradientDrawable: float getInnerRadiusRatio()>,,,Return the inner radius of the ring expressed as a ratio of the ring's width. Related XML Attributes: android:innerRadiusRatio,float |||,,29
<android.graphics.drawable.GradientDrawable: float getThicknessRatio()>,,,Return the thickness ratio of the ring expressed as a ratio of the ring's width. Related XML Attributes: android:thicknessRatio,float |||,,29
"<android.graphics.drawable.GradientDrawable: void setPadding(int,int,int,int)>",,,"Configure the padding of the gradient shape Related XML Attributes: android:left 
android:top 
android:right 
android:bottom",void,"left int : Left padding of the gradient shape
This units of this value are pixels. |||
top int : Top padding of the gradient shape
This units of this value are pixels. |||
right int : Right padding of the gradient shape
This units of this value are pixels. |||
bottom int : Bottom padding of the gradient shape
This units of this value are pixels. |||",29
<android.graphics.drawable.GradientDrawable: void setThickness(int)>,3,,Configure the thickness of the ring. Related XML Attributes: android:thickness,void,thickness int : This units of this value are pixels. |||,29
<android.graphics.drawable.GradientDrawable: void setThicknessRatio(float)>,3,,Configure the thickness of the ring expressed as a ratio of the ring's width. Related XML Attributes: android:thicknessRatio,void,thicknessRatio float : Value is 0.0f or greater |||,29
<android.graphics.drawable.Icon: int getResId()>,,,"Gets the resource used to create this icon. Only valid for icons of type TYPE_RESOURCE .
 Note: This resource may not be available if the application changes at all and it is
 up to the caller to ensure safety if this resource is re-used and/or persisted.",int |||,,28
<android.graphics.drawable.Icon: int getType()>,,,"Gets the type of the icon provided. Note that new types may be added later so callers should guard against other
 types being returned.",int Value is TYPE_BITMAP  TYPE_RESOURCE  TYPE_DATA  TYPE_URI  TYPE_ADAPTIVE_BITMAP or TYPE_URI_ADAPTIVE_BITMAP |||,,28
<android.graphics.drawable.Icon: Uri getUri()>,,,"Gets the uri used to create this icon. Only valid for icons of type TYPE_URI and TYPE_URI_ADAPTIVE_BITMAP .
 Note: This uri may not be available in the future and it is
 up to the caller to ensure safety if this uri is re-used and/or persisted.",Uri This value will never be null . |||,,28
<android.graphics.drawable.LayerDrawable: void setTintBlendMode(BlendMode)>,,,"Specifies a tint blending mode for this drawable. Defines how this drawable's tint color should be blended into the drawable
 before it is drawn to screen. Default tint mode is BlendMode#SRC_IN . Note: Setting a color filter via setColorFilter(android.graphics.ColorFilter)",void,blendMode BlendMode : This value must never be null . |||,29
<android.graphics.drawable.NinePatchDrawable: Insets getOpticalInsets()>,,,"Return in insets the layout insets suggested by this Drawable for use with alignment
 operations during layout.",Insets This value will never be null . |||,,29
<android.graphics.drawable.StateListDrawable: Drawable getStateDrawable(int)>,,,Gets the drawable at an index.,"Drawable The drawable at the index.
 This value may be null . |||",index int : The index of the drawable. |||,29
<android.graphics.drawable.StateListDrawable: int getStateSet(int)>,,,Gets the state set at an index.,"int[] The state set at the index.
 This value will never be null . |||",index int : The index of the state set. |||,29
<android.graphics.drawable.VectorDrawable: Insets getOpticalInsets()>,,,"Return in insets the layout insets suggested by this Drawable for use with alignment
 operations during layout.",Insets This value will never be null . |||,,29
<android.graphics.fonts.Font.Builder: Font.Builder setFontVariationSettings(FontVariationAxis)>,,,Sets the font variation settings.,"Font.Builder this builder
 
 This value will never be null . |||","axes FontVariationAxis : an array of font variation axis tag-value pairs
This value may be null . |||",29
<android.graphics.fonts.FontFamily.Builder: FontFamily.Builder addFont(Font)>,,,"Adds different style font to the builder.

 System will select the font if the text style is closest to the font.
 If the same style font is already added to the builder this method will fail with IllegalArgumentException .

 Note that system assumes all fonts bundled in FontFamily have the same coverage for the
 code points. For example regular style font and bold style font must have the same code
 point coverage otherwise some character may be shown as tofu.","FontFamily.Builder this builder
 
 This value will never be null . |||","font Font : a font
This value must never be null . |||",29
<android.graphics.HardwareRenderer.FrameRenderRequest: int syncAndDraw()>,,,"Syncs the RenderNode tree to the render thread and requests a frame to be drawn. This FrameRenderRequest instance should no longer be used after calling this method.
 The system internally may reuse instances of FrameRenderRequest to reduce
 allocation churn.","int The result of the sync operation.
 
 Value is HardwareRenderer.SYNC_OK  HardwareRenderer.SYNC_REDRAW_REQUESTED  HardwareRenderer.SYNC_LOST_SURFACE_REWARD_IF_FOUND  HardwareRenderer.SYNC_CONTEXT_IS_STOPPED or HardwareRenderer.SYNC_FRAME_DROPPED |||",,29
<android.graphics.HardwareRenderer: void clearContent()>,,,"Destroys all the display lists associated with the current rendering content.
 This includes releasing a reference to the current content root RenderNode. It will
 therefore be necessary to call setContentRoot(android.graphics.RenderNode) in order to resume
 rendering after calling this along with re-recording the display lists for the
 RenderNode tree. It is recommended but not necessary to use this in combination with lifecycle events
 such as Activity#onStop() and Activity#onStart() or in response to ComponentCallbacks2.onTrimMemory(int) signals such as ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN See also stop() .",void,,29
"<android.graphics.HardwareRenderer: void setLightSourceAlpha(float,float)>",,,"Configures the ambient & spot shadow alphas. This is the alpha used when the shadow
 has max alpha and ramps down from the values provided to zero. These values are typically provided by the current theme see R.attr.spotShadowAlpha and R.attr.ambientShadowAlpha . This must be set at least once along with setLightSourceGeometry(float float float float) before shadows will work.",void,"ambientShadowAlpha float : The alpha for the ambient shadow. If unsure a reasonable default
is 0.039f.
Value is between 0.0f and 1.0f inclusive |||
spotShadowAlpha float : The alpha for the spot shadow. If unsure a reasonable default is
0.19f.
Value is between 0.0f and 1.0f inclusive |||",29
"<android.graphics.HardwareRenderer: void setLightSourceGeometry(float,float,float,float)>",,,"Sets the center of the light source. The light source point controls the directionality
 and shape of shadows rendered by RenderNode Z & elevation. The platform's recommendation is to set lightX to 'displayWidth / 2f - windowLeft' set
 lightY to 0 - windowTop lightZ set to 600dp and lightRadius to 800dp. The light source should be setup both as part of initial configuration and whenever
 the window moves to ensure the light source stays anchored in display space instead
 of in window space. This must be set at least once along with setLightSourceAlpha(float float) before shadows will work.",void,"lightX float : The X position of the light source |||
lightY float : The Y position of the light source |||
lightZ float : The Z position of the light source. Must be >= 0. |||
lightRadius float : The radius of the light source. Smaller radius will have sharper edges
larger radius will have softer shadows. |||",29
<android.graphics.HardwareRenderer: void setName(String)>,,,"Sets a name for this renderer. This is used to identify this renderer instance
 when reporting debug information such as the per-window frame time metrics
 reported by 'adb shell dumpsys gfxinfo [package] framestats'",void,"name String : The debug name to use for this HardwareRenderer instance
This value must never be null . |||",29
<android.graphics.HardwareRenderer: void start()>,,,"Resumes rendering into the surface. Any pending rendering requests
 will produce a new frame at the next vsync signal. This is useful in combination with lifecycle events such as Activity#onStart() .
 See stop() for stopping rendering.",void,,29
<android.graphics.ImageDecoder.ImageInfo: ColorSpace getColorSpace()>,,,"If known the color space the decoded bitmap will have. Note that the
 output color space is not guaranteed to be the color space the bitmap
 is encoded with. If not known (when the config is Bitmap.Config#ALPHA_8 for instance) or there is an error
 it is set to null.",ColorSpace |||,,28
<android.graphics.ImageDecoder: Bitmap decodeBitmap(ImageDecoder.Source)>,,,Create a Bitmap from a Source . Since there is no OnHeaderDecodedListener the default settings will be used. In order to change any settings call decodeBitmap(android.graphics.ImageDecoder.Source android.graphics.ImageDecoder.OnHeaderDecodedListener) instead.,"Bitmap Bitmap containing the image.

 This value will never be null . |||","src ImageDecoder.Source : representing the encoded image.
This value must never be null . |||",28
<android.graphics.ImageDecoder: boolean isMimeTypeSupported(String)>,,,"Return if the given MIME type is a supported file format that can be
 decoded by this class. This can be useful to determine if a file can be
 decoded directly or if it needs to be converted into a more general
 format using an API like ContentResolver#openTypedAssetFile .",boolean |||,mimeType String : This value must never be null . |||,29
"<android.graphics.ImageDecoder: ImageDecoder.Source createSource(AssetManager,String)>",,,"Create a new Source from a file in the ""assets"" directory. This method is safe to call from any thread.",ImageDecoder.Source This value will never be null . |||,"assets AssetManager : This value must never be null . |||
fileName String : This value must never be null . |||",28
<android.graphics.ImageDecoder: ImageDecoder.Source createSource(ByteBuffer)>,,,"Create a new Source from a ByteBuffer . Decoding will start from buffer.position() .
 The position of buffer will not be affected. Note: If this Source is passed to decodeDrawable and the encoded image is animated the returned AnimatedImageDrawable will continue reading from the buffer so its contents must not
 be modified even after the AnimatedImageDrawable is returned. buffer 's contents should never be modified during decode.","ImageDecoder.Source a new Source object which can be passed to decodeDrawable or decodeBitmap .
 
 This value will never be null . |||",buffer ByteBuffer : This value must never be null . |||,28
<android.graphics.ImageDecoder: ImageDecoder.Source createSource(File)>,,,Create a new Source from a File . This method is safe to call from any thread.,"ImageDecoder.Source a new Source object which can be passed to decodeDrawable or decodeBitmap .
 
 This value will never be null . |||",file File : This value must never be null . |||,28
<android.graphics.ImageDecoder: PostProcessor getPostProcessor()>,,,Return the PostProcessor currently set.,PostProcessor This value may be null . |||,,28
<android.graphics.ImageDecoder: void setDecodeAsAlphaMaskEnabled(boolean)>,,,"Specify whether to potentially treat the output as an alpha mask. If this is set to true and the image is encoded in a format
  with only one channel treat that channel as alpha. Otherwise this call has
  no effect. This is incompatible with ALLOCATOR_HARDWARE . Trying to
  combine them will result in decodeDrawable / decodeBitmap throwing an IllegalStateException . Like all setters on ImageDecoder this must be called inside OnHeaderDecodedListener#onHeaderDecoded .",void,enabled boolean |||,28
<android.graphics.ImageDecoder: void setOnPartialImageListener(ImageDecoder.OnPartialImageListener)>,,,"Set (replace) the OnPartialImageListener on this object. Will be called if there is an error in the input. Without one an
  error will result in an Exception being thrown. Like all setters on ImageDecoder this must be called inside OnHeaderDecodedListener#onHeaderDecoded .",void,listener ImageDecoder.OnPartialImageListener : This value may be null . |||,28
"<android.graphics.ImageDecoder: void setTargetSize(int,int)>",,,"Specify the size of the output Drawable or Bitmap . By default the output size will match the size of the encoded
  image which can be retrieved from the ImageInfo in OnHeaderDecodedListener#onHeaderDecoded . This will sample or scale the output to an arbitrary size that may
  be smaller or larger than the encoded size. Only the last call to this or setTargetSampleSize(int) is
  respected. Like all setters on ImageDecoder this must be called inside OnHeaderDecodedListener#onHeaderDecoded .",void,"width int : width in pixels of the output must be greater than 0
This units of this value are pixels.
Value is 1 or greater |||
height int : height in pixels of the output must be greater than 0
This units of this value are pixels.
Value is 1 or greater |||",28
"<android.graphics.Insets: Insets max(Insets,Insets)>",,,Retrieves the maximum of two Insets.,"Insets max(a b) i. e. the larger of every inset on every side is taken for the result.
 
 This value will never be null . |||","a Insets : The first Insets.
This value must never be null . |||
b Insets : The second Insets.
This value must never be null . |||",29
"<android.graphics.Insets: Insets min(Insets,Insets)>",,,Retrieves the minimum of two Insets.,"Insets min(a b) i. e. the smaller of every inset on every side is taken for the result.
 
 This value will never be null . |||","a Insets : The first Insets.
This value must never be null . |||
b Insets : The second Insets.
This value must never be null . |||",29
<android.graphics.Insets: String toString()>,,,"Returns a string representation of the object. In general the toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the
 object is an instance the at-sign character ` @ ' and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words this method returns a string equal to the
 value of:",String a string representation of the object. |||,,29
<android.graphics.Paint: boolean equalsForTextMeasurement(Paint)>,,,Returns true of the passed Paint will have the same effect on text measurement,boolean true if the other Paint has the same effect on text measurement. |||,"other Paint : A Paint object.
This value must never be null . |||",28
<android.graphics.Paint: float getShadowLayerDx()>,,,Returns the x offset of the shadow layer.,float |||,,29
<android.graphics.Paint: float getShadowLayerDy()>,,,Returns the y offset of the shadow layer.,float |||,,29
<android.graphics.Paint: float getShadowLayerRadius()>,,,Returns the blur radius of the shadow layer.,float |||,,29
<android.graphics.Paint: float getStrikeThruPosition()>,,,"Distance from top of the strike-through line to the baseline in pixels.

 The result is negative for positions that are above the baseline.
 This method returns where the strike-through line should be drawn independent of if the STRIKE_THRU_TEXT_FLAG bit is set. This units of this value are pixels.","float the position of the strike-through line in pixels
 This units of this value are pixels.
 {} |||",,29
<android.graphics.Paint: float getUnderlinePosition()>,,,"Returns the distance from top of the underline to the baseline in pixels.

 The result is positive for positions that are below the baseline.
 This method returns where the underline should be drawn independent of if the UNDERLINE_TEXT_FLAG bit is set. This units of this value are pixels.","float the position of the underline in pixels
 This units of this value are pixels.
 {} |||",,29
<android.graphics.Paint: long getColorLong()>,,,"Return the paint's color. Note that the color is a long with an encoded ColorSpace as well as alpha and rgb. These values are not
 premultiplied meaning that alpha can be any value regardless of the
 values of rgb. See the Color class for more details.",long the paint's color alpha and ColorSpace encoded as a ColorLong |||,,29
"<android.graphics.Paint: void setShadowLayer(float,float,float,long)>",,,"This draws a shadow layer below the main layer with the specified
 offset and color and blur radius. If radius is 0 then the shadow
 layer is removed. Can be used to create a blurred shadow underneath text. Support for use
 with other drawing operations is constrained to the software rendering
 pipeline. The alpha of the shadow will be the paint's alpha if the shadow color is
 opaque or the alpha from the shadow color if not.",void,"radius float |||
dx float |||
dy float |||
shadowColor long |||",29
<android.graphics.RecordingCanvas: int getHeight()>,,,Returns the height of the current drawing layer,int the height of the current drawing layer |||,,29
<android.graphics.RecordingCanvas: int getMaximumBitmapHeight()>,,,"Returns the maximum allowed height for bitmaps drawn with this canvas.
 Attempting to draw with a bitmap taller than this value will result
 in an error.",int |||,,29
<android.graphics.RecordingCanvas: void drawRenderNode(RenderNode)>,,,Draws the specified display list onto this canvas.,void,"renderNode RenderNode : The RenderNode to draw.
This value must never be null . |||",29
<android.graphics.RecordingCanvas: void enableZ()>,,,"Enables Z support which defaults to disabled. This allows for RenderNodes drawn with drawRenderNode(android.graphics.RenderNode) to be re-arranged based off of their RenderNode#getElevation() and RenderNode#getTranslationZ() values. It also enables rendering of shadows for RenderNodes with an elevation or
 translationZ. Any draw reordering will not be moved before this call. A typical usage of this might
 look something like:",void,,29
<android.graphics.RenderNode: boolean getClipToBounds()>,,,Returns whether or not the RenderNode is clipping to its bounds. See setClipToBounds(boolean) and setPosition(int int int int),boolean true if the render node clips to its bounds false otherwise. |||,,29
<android.graphics.RenderNode: boolean hasDisplayList()>,3,,"Returns whether the RenderNode has a display list. If this returns false the RenderNode
 should be re-recorded with beginRecording() and endRecording() .

 A RenderNode without a display list may still be drawn however it will have no impact
 on the rendering content until its display list is updated.

 When a RenderNode is no longer drawn by anything the system may automatically
 invoke discardDisplayList() . It is therefore important to ensure that hasDisplayList() is true on a RenderNode prior to drawing it.

 See discardDisplayList()",boolean boolean true if this RenderNode has a display list false otherwise. |||,,29
<android.graphics.RenderNode: boolean isForceDarkAllowed()>,,,See setForceDarkAllowed(boolean),boolean true if force dark is allowed (default) false if it is disabled |||,,29
<android.graphics.RenderNode: boolean offsetLeftAndRight(int)>,,,Offsets the left and right positions for the RenderNode,boolean True if the value changed false if the new value was the same as the previous value. |||,offset int : The amount that the left and right positions are offset in pixels |||,29
<android.graphics.RenderNode: boolean offsetTopAndBottom(int)>,,,Offsets the top and bottom values for the RenderNode,boolean True if the value changed false if the new value was the same as the previous value. |||,offset int : The amount that the left and right positions are offset in pixels |||,29
<android.graphics.RenderNode: boolean setElevation(float)>,,,Sets the base elevation of this RenderNode in pixels,boolean True if the value changed false if the new value was the same as the previous value. |||,lift float : the elevation in pixels |||,29
<android.graphics.RenderNode: boolean setPosition(Rect)>,,,Sets the position of the RenderNode.,boolean True if the value changed false if the new value was the same as the previous value. |||,"position Rect : The position rectangle in pixels
This value must never be null . |||",29
<android.graphics.RenderNode: boolean setRotationY(float)>,3,,Sets the rotation value for the display list around the Y axis.,boolean True if the value changed false if the new value was the same as the previous value. |||,rotationY float : The rotation value of the display list in degrees |||,29
<android.graphics.RenderNode: boolean setScaleY(float)>,,,Sets the scale value for the display list on the Y axis.,boolean True if the value changed false if the new value was the same as the previous value. |||,scaleY float : The scale value of the display list |||,29
<android.graphics.RenderNode: boolean setTranslationX(float)>,,,Sets the translation value for the display list on the X axis.,boolean True if the value changed false if the new value was the same as the previous value. |||,translationX float : The X axis translation value of the display list in pixels |||,29
<android.graphics.RenderNode: float getCameraDistance()>,1,,Returns the distance in Z of the camera for this RenderNode,"float the distance along the Z axis in pixels.
 Value is between 0.0f and Float.MAX_VALUE inclusive |||",,29
<android.graphics.RenderNode: float getRotationX()>,,,Returns the rotation value for this display list around the X axis in degrees.,float |||,,29
<android.graphics.RenderNode: float getRotationY()>,,,Returns the rotation value for this display list around the Y axis in degrees.,float |||,,29
<android.graphics.RenderNode: int getAmbientShadowColor()>,,,,"int The shadow color set by setAmbientShadowColor(int) or black if
 nothing was set |||",,29
<android.graphics.RenderNode: int getBottom()>,,,Gets the bottom position for the RenderNode.,int the bottom position in pixels |||,,29
<android.graphics.RenderNode: int getLeft()>,,,Gets the left position for the RenderNode.,int the left position in pixels |||,,29
<android.graphics.RenderNode: long computeApproximateMemoryUsage()>,,,"Gets the approximate memory usage of the RenderNode for debug purposes. Does not include
 the memory usage of any child RenderNodes nor any bitmaps only the memory usage of
 this RenderNode and any data it owns. Value is a non-negative number of bytes.","long Approximate memory usage in bytes.
 
 Value is a non-negative number of bytes. |||",,29
<android.graphics.RenderNode: void endRecording()>,,,"`
 Ends the recording for this display list. Calling this method marks
 the display list valid and hasDisplayList() will return true.",void,,29
<android.graphics.text.LineBreaker.Builder: LineBreaker.Builder setHyphenationFrequency(int)>,,,"Set hyphenation frequency.

 You can change the amount of automatic hyphenation used. The default value is LineBreaker.HYPHENATION_FREQUENCY_NONE .",LineBreaker.Builder This value will never be null . |||,hyphenationFrequency int : Value is LineBreaker.HYPHENATION_FREQUENCY_NORMAL  LineBreaker.HYPHENATION_FREQUENCY_FULL or LineBreaker.HYPHENATION_FREQUENCY_NONE |||,29
<android.graphics.text.LineBreaker.Builder: LineBreaker.Builder setIndents(int)>,,,"Set indents.

 The supplied array provides the total amount of indentation per line in pixel. This
 amount is the sum of both left and right indentations. For lines past the last element in
 the array the indentation amount of the last element is used.",LineBreaker.Builder This value will never be null . |||,indents int : This value may be null . |||,29
<android.graphics.text.LineBreaker.Builder: LineBreaker.Builder setJustificationMode(int)>,,,"Set whether the text is justified.

 By setting LineBreaker.JUSTIFICATION_MODE_INTER_WORD the line breaker will change the
 internal parameters for justification.
 The default value is LineBreaker.JUSTIFICATION_MODE_NONE",LineBreaker.Builder This value will never be null . |||,justificationMode int : Value is LineBreaker.JUSTIFICATION_MODE_NONE or LineBreaker.JUSTIFICATION_MODE_INTER_WORD |||,29
<android.graphics.text.LineBreaker.ParagraphConstraints: float getWidth()>,,,Return the width for this paragraph in pixels. This units of this value are pixels.,"float This units of this value are pixels.
 {}
 
 Value is 0.0f or greater |||",,29
<android.graphics.text.LineBreaker.ParagraphConstraints: int getFirstWidthLineCount()>,,,Return the number of lines to apply the first line's width. This units of this value are pixels.,"int This units of this value are pixels.
 {}
 
 Value is 0 or greater |||",,29
<android.graphics.text.LineBreaker.ParagraphConstraints: void setWidth(float)>,,,Set width for this paragraph.,void,"width float : This units of this value are pixels.
Value is 0.0f or greater |||",29
<android.graphics.text.LineBreaker.Result: float getLineDescent(int)>,,,Returns font descent of the line in pixels. This units of this value are pixels.,"float an entier font descent of the line in pixels.
 
 This units of this value are pixels.
 {} |||","lineIndex int : an index of the line.
Value is 0 or greater |||",29
<android.graphics.text.LineBreaker.Result: int getLineBreakOffset(int)>,,,Returns character offset of the break for a given line.,"int the break offset.
 
 Value is 0 or greater |||","lineIndex int : an index of the line.
Value is 0 or greater |||",29
<android.graphics.text.MeasuredText.Builder: MeasuredText.Builder setComputeHyphenation(boolean)>,,,"By passing true to this method the build method will compute all possible hyphenation
 pieces as well.

 If you don't want to use automatic hyphenation you can pass false to this method and
 save the computation time of hyphenation. The default value is false.

 Even if you pass false to this method you can still enable automatic hyphenation of
 LineBreaker but line break computation becomes slower.",MeasuredText.Builder This value will never be null . |||,computeHyphenation boolean : true if you want to use automatic hyphenations. |||,29
<android.graphics.text.MeasuredText: float getCharWidthAt(int)>,,,Returns the width of the character at the given offset. This units of this value are pixels.,"float Value is 0.0f or greater
 
 This units of this value are pixels.
 {} |||","offset int : an offset of the character.
Value is 0 or greater |||",29
"<android.graphics.text.MeasuredText: void getBounds(int,int,Rect)>",,,Retrieves the boundary box of the given range,void,"start int : an inclusive start index of the range
Value is 0 or greater |||
end int : an exclusive end index of the range
Value is 0 or greater |||
rect Rect : an output parameter
This value must never be null . |||",29
<android.graphics.Typeface.CustomFallbackBuilder: Typeface.CustomFallbackBuilder addCustomFallback(FontFamily)>,,,"Append a font family to the end of the custom font fallback.

 You can set up to 64 custom fallback families including the first font family you passed
 to the constructor.
 For more information about fallback see class description.",Typeface.CustomFallbackBuilder This value will never be null . |||,"family FontFamily : a fallback family
This value must never be null . |||",29
<android.graphics.Typeface.CustomFallbackBuilder: Typeface.CustomFallbackBuilder setStyle(FontStyle)>,,,"Sets a font style of the Typeface.

 If the font family doesn't have a font of given style system will select the closest
 font from font family. For example if a font family has fonts of 300 weight and 700
 weight then setWeight(400) is called system will select the font of 300 weight.",Typeface.CustomFallbackBuilder This value will never be null . |||,"style FontStyle : a font style
This value must never be null . |||",29
<android.hardware.biometrics.BiometricPrompt.AuthenticationCallback: void onAuthenticationFailed()>,,,Called when a biometric is valid but not recognized.,void,,28
<android.hardware.biometrics.BiometricPrompt.Builder: BiometricPrompt.Builder setDescription(CharSequence)>,,,Optional: Sets a description that will be shown on the prompt.,"BiometricPrompt.Builder This builder.
 
 This value will never be null . |||","description CharSequence : The description to display.
This value must never be null . |||",28
<android.hardware.biometrics.BiometricPrompt.Builder: BiometricPrompt.Builder setTitle(CharSequence)>,,,Required: Sets the title that will be shown on the prompt.,"BiometricPrompt.Builder This builder.
 
 This value will never be null . |||","title CharSequence : The title to display.
This value must never be null . |||",28
<android.hardware.biometrics.BiometricPrompt.CryptoObject: Mac getMac()>,,,Get Mac object.,Mac Mac object or null if this doesn't contain one. |||,,28
<android.hardware.biometrics.BiometricPrompt.CryptoObject: Signature getSignature()>,,,Get Signature object.,Signature Signature object or null if this doesn't contain one. |||,,28
"<android.hardware.biometrics.BiometricPrompt: void authenticate(BiometricPrompt.CryptoObject,CancellationSignal,Executor,BiometricPrompt.AuthenticationCallback)>",,,"This call warms up the biometric hardware displays a system-provided dialog and starts
 scanning for a biometric. It terminates when AuthenticationCallback#onAuthenticationError(int CharSequence) is called when AuthenticationCallback#onAuthenticationSucceeded( AuthenticationResult) or when the user
 dismisses the system-provided dialog at which point the crypto object becomes invalid. This
 operation can be canceled by using the provided cancel object. The application will receive
 authentication errors through AuthenticationCallback and button events through the
 corresponding callback set in Builder#setNegativeButton(CharSequence Executor
 DialogInterface.OnClickListener) . It is safe to reuse the BiometricPrompt object
 and calling BiometricPrompt#authenticate(CancellationSignal Executor
 AuthenticationCallback) while an existing authentication attempt is occurring will stop the
 previous client and start a new authentication. The interrupted client will receive a
 cancelled notification through AuthenticationCallback#onAuthenticationError(int
 CharSequence) . Note: Applications generally should not cancel and start authentication in quick
 succession. For example to properly handle authentication across configuration changes it's
 recommended to use BiometricPrompt in a fragment with setRetainInstance(true). By doing so
 the application will not need to cancel/restart authentication during the configuration
 change. Per the Android CDD only biometric authenticators that meet or exceed the requirements
 for Strong are permitted to integrate with Keystore to perform related
 cryptographic operations. Therefore it is an error to call this method after explicitly
 calling Builder#setAllowedAuthenticators(int) with any biometric strength other than Authenticators#BIOMETRIC_STRONG . Requires Manifest.permission.USE_BIOMETRIC",void,"crypto BiometricPrompt.CryptoObject : A cryptographic operation to be unlocked after successful authentication.
This value must never be null . |||
cancel CancellationSignal : An object that can be used to cancel authentication.
This value must never be null . |||
executor Executor : An executor to handle callback events.
This value must never be null .
Callback and listener events are dispatched through this Executor providing an easy way to control which thread is
used. To dispatch events through the main thread of your
application you can use Context.getMainExecutor() .
To dispatch events through a shared thread pool you can use AsyncTask#THREAD_POOL_EXECUTOR . |||
callback BiometricPrompt.AuthenticationCallback : An object to receive authentication events.
This value must never be null . |||",28
"<android.hardware.camera2.CameraCaptureSession: int captureSingleRequest(CaptureRequest,Executor,CameraCaptureSession.CaptureCallback)>",,,"Submit a request for an image to be captured by the camera device. The behavior of this method matches that of capture(android.hardware.camera2.CaptureRequest android.hardware.camera2.CameraCaptureSession.CaptureCallback android.os.Handler) except that it uses Executor as an argument
 instead of Handler .",int int A unique capture sequence ID used by CaptureCallback#onCaptureSequenceCompleted . |||,"request CaptureRequest : the settings for this capture
This value must never be null . |||
executor Executor : the executor which will be used for invoking the listener.
This value must never be null .
Callback and listener events are dispatched through this Executor providing an easy way to control which thread is
used. To dispatch events through the main thread of your
application you can use Context.getMainExecutor() .
To dispatch events through a shared thread pool you can use AsyncTask#THREAD_POOL_EXECUTOR . |||
listener CameraCaptureSession.CaptureCallback : The callback object to notify once this request has been
processed.
This value must never be null . |||",28
<android.hardware.camera2.CameraCharacteristics: List getKeysNeedingPermission()>,,,"Returns a subset of the list returned by getKeys() with all keys that
 require camera clients to obtain the Manifest.permission.CAMERA permission. If an application calls CameraManager#getCameraCharacteristics without holding the Manifest.permission.CAMERA permission
 all keys in this list will not be available and calling get(CameraCharacteristics.Key ) will
 return null for those keys. If the application obtains the Manifest.permission.CAMERA permission then the
 CameraCharacteristics from a call to a subsequent CameraManager#getCameraCharacteristics will have the keys available. The list returned is not modifiable so any attempts to modify it will throw
 a UnsupportedOperationException . Each key is only listed once in the list. The order of the keys is undefined.","List < Key <?>> List of camera characteristic keys that require the Manifest.permission.CAMERA permission. The list can be empty in case
         there are no currently present keys that need additional permission. |||",,29
<android.hardware.camera2.CameraCharacteristics: Set getPhysicalCameraIds()>,,,"Returns the set of physical camera ids that this logical CameraDevice is
 made up of. A camera device is a logical camera if it has
 REQUEST_AVAILABLE_CAPABILITIES_LOGICAL_MULTI_CAMERA capability. If the camera device
 doesn't have the capability the return value will be an empty set. Prior to API level 29 all returned IDs are guaranteed to be returned by CameraManager#getCameraIdList and can be opened directly by CameraManager#openCamera . Starting from API level 29 for each of the returned ID
 if it's also returned by CameraManager#getCameraIdList it can be used as a
 standalone camera by CameraManager#openCamera . Otherwise the camera ID can only be
 used as part of the current logical camera. The set returned is not modifiable so any attempts to modify it will throw
 a UnsupportedOperationException .","Set < String > Set of physical camera ids for this logical camera device.
 
 This value will never be null . |||",,28
"<android.hardware.camera2.CameraManager: void openCamera(String,Executor,CameraDevice.StateCallback)>",,,Open a connection to a camera with the given ID. The behavior of this method matches that of openCamera(java.lang.String StateCallback android.os.Handler) except that it uses Executor as an argument instead of Handler .,void,"cameraId String : The unique identifier of the camera device to open
This value must never be null . |||
executor Executor : The executor which will be used when invoking the callback.
This value must never be null .
Callback and listener events are dispatched through this Executor providing an easy way to control which thread is
used. To dispatch events through the main thread of your
application you can use Context.getMainExecutor() .
To dispatch events through a shared thread pool you can use AsyncTask#THREAD_POOL_EXECUTOR . |||
callback CameraDevice.StateCallback : The callback which is invoked once the camera is opened
This value must never be null . |||",28
<android.hardware.camera2.params.MandatoryStreamCombination.MandatoryStreamInformation: boolean equals(Object)>,,,"Check if this MandatoryStreamInformation is equal to another MandatoryStreamInformation . Two vectors are only equal if and only if each of the respective elements is
 equal.",boolean true if the objects were equal false otherwise |||,obj Object : the reference object with which to compare. |||,29
<android.hardware.camera2.params.MandatoryStreamCombination.MandatoryStreamInformation: int getFormat()>,,,Retrieve the mandatory stream format .,"int integer format.
 
 Value is ImageFormat.UNKNOWN  ImageFormat.RGB_565  ImageFormat.YV12  ImageFormat.Y8 android.graphics.ImageFormat.Y16 ImageFormat.NV16  ImageFormat.NV21  ImageFormat.YUY2  ImageFormat.JPEG  ImageFormat.DEPTH_JPEG  ImageFormat.YUV_420_888  ImageFormat.YUV_422_888  ImageFormat.YUV_444_888  ImageFormat.FLEX_RGB_888  ImageFormat.FLEX_RGBA_8888  ImageFormat.RAW_SENSOR  ImageFormat.RAW_PRIVATE  ImageFormat.RAW10  ImageFormat.RAW12  ImageFormat.DEPTH16  ImageFormat.DEPTH_POINT_CLOUD android.graphics.ImageFormat.RAW_DEPTH ImageFormat.PRIVATE or ImageFormat.HEIC |||",,29
<android.hardware.camera2.params.MandatoryStreamCombination.MandatoryStreamInformation: int hashCode()>,,,"Returns a hash code value for the object. This method is
 supported for the benefit of hash tables such as those provided by HashMap . The general contract of hashCode is: Whenever it is invoked on the same object more than once during
     an execution of a Java application the hashCode method
     must consistently return the same integer provided no information
     used in equals comparisons on the object is modified.
     This integer need not remain consistent from one execution of an
     application to another execution of the same application. 
If two objects are equal according to the equals(Object) method then calling the hashCode method on each of
     the two objects must produce the same integer result. 
It is not required that if two objects are unequal
     according to the equals(java.lang.Object) method then calling the hashCode method on each of the
     two objects must produce distinct integer results.  However the
     programmer should be aware that producing distinct integer results
     for unequal objects may improve the performance of hash tables. 
As much as is reasonably practical the hashCode method defined by
 class Object does return distinct integers for distinct
 objects. (This is typically implemented by converting the internal
 address of the object into an integer but this implementation
 technique is not required by the
 Javaâ„¢ programming language.)",int a hash code value for this object. |||,,29
<android.hardware.camera2.params.MandatoryStreamCombination.MandatoryStreamInformation: List getAvailableSizes()>,,,"Return the list of available sizes for this mandatory stream. Per documented CameraDevice#createCaptureSession the largest
 resolution in the result will be tested and guaranteed to work. If clients want to use
 smaller sizes then the resulting session configuration can
 be tested either by calling CameraDevice#createCaptureSession or CameraDevice#isSessionConfigurationSupported .","List < Size > non-modifiable ascending list of available sizes.
 
 This value will never be null . |||",,29
<android.hardware.camera2.params.MandatoryStreamCombination: boolean equals(Object)>,,,Check if this MandatoryStreamCombination is equal to another MandatoryStreamCombination . Two vectors are only equal if and only if each of the respective elements is equal.,boolean true if the objects were equal false otherwise |||,obj Object : the reference object with which to compare. |||,29
<android.hardware.camera2.params.MandatoryStreamCombination: CharSequence getDescription()>,,,Get the mandatory stream combination description.,"CharSequence CharSequence with the mandatory combination description.
 
 This value will never be null . |||",,29
<android.hardware.camera2.params.OisSample: boolean equals(Object)>,,,Check if this OisSample is equal to another OisSample . Two samples are only equal if and only if each of the OIS information is equal.,boolean true if the objects were equal false otherwise |||,obj Object : the reference object with which to compare. |||,28
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: boolean isOutputSupportedFor(Surface)>,,,"Determine whether or not the surface in its current state is suitable to be included
 in a CameraDevice#createCaptureSession as an output. For more information refer to StreamConfigurationMap#isOutputSupportedFor .",boolean true if this is supported false otherwise |||,"surface Surface : a Surface object reference
This value must never be null . |||",29
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: int getRecommendedUseCase()>,,,Get the use case value for the recommended stream configurations.,"int Use case id.
 
 Value is USECASE_PREVIEW  USECASE_RECORD  USECASE_VIDEO_SNAPSHOT  USECASE_SNAPSHOT  USECASE_ZSL  USECASE_RAW or USECASE_LOW_LATENCY_SNAPSHOT |||",,29
"<android.hardware.camera2.params.RecommendedStreamConfigurationMap: long getOutputMinFrameDuration(int,Size)>",,,Get the minimum frame duration for the format/size combination (in nanoseconds). For further information refer to StreamConfigurationMap#getOutputMinFrameDuration .,"long a minimum frame duration > 0 in nanoseconds or
          0 if the minimum frame duration is not available.

 Value is 0 or greater |||","format int : an image format from ImageFormat or PixelFormat Value is ImageFormat.UNKNOWN  ImageFormat.RGB_565  ImageFormat.YV12  ImageFormat.Y8 android.graphics.ImageFormat.Y16 ImageFormat.NV16  ImageFormat.NV21  ImageFormat.YUY2  ImageFormat.JPEG  ImageFormat.DEPTH_JPEG  ImageFormat.YUV_420_888  ImageFormat.YUV_422_888  ImageFormat.YUV_444_888  ImageFormat.FLEX_RGB_888  ImageFormat.FLEX_RGBA_8888  ImageFormat.RAW_SENSOR  ImageFormat.RAW_PRIVATE  ImageFormat.RAW10  ImageFormat.RAW12  ImageFormat.DEPTH16  ImageFormat.DEPTH_POINT_CLOUD android.graphics.ImageFormat.RAW_DEPTH ImageFormat.PRIVATE or ImageFormat.HEIC |||
size Size : an output-compatible size
This value must never be null . |||",29
<android.hardware.camera2.params.RecommendedStreamConfigurationMap: Set getOutputFormats()>,,,Get the image format output formats in this stream configuration. For more information refer to StreamConfigurationMap#getOutputFormats .,"Set < Integer > a non-modifiable set of Integer formats
 
 This value will never be null . |||",,29
<android.hardware.camera2.params.SessionConfiguration: int getSessionType()>,,,Retrieve the type of the capture session.,"int The capture session type.
 
 Value is SESSION_REGULAR or SESSION_HIGH_SPEED |||",,28
<android.hardware.camera2.params.SessionConfiguration: int hashCode()>,,,"Returns a hash code value for the object. This method is
 supported for the benefit of hash tables such as those provided by HashMap . The general contract of hashCode is: Whenever it is invoked on the same object more than once during
     an execution of a Java application the hashCode method
     must consistently return the same integer provided no information
     used in equals comparisons on the object is modified.
     This integer need not remain consistent from one execution of an
     application to another execution of the same application. 
If two objects are equal according to the equals(Object) method then calling the hashCode method on each of
     the two objects must produce the same integer result. 
It is not required that if two objects are unequal
     according to the equals(java.lang.Object) method then calling the hashCode method on each of the
     two objects must produce distinct integer results.  However the
     programmer should be aware that producing distinct integer results
     for unequal objects may improve the performance of hash tables. 
As much as is reasonably practical the hashCode method defined by
 class Object does return distinct integers for distinct
 objects. (This is typically implemented by converting the internal
 address of the object into an integer but this implementation
 technique is not required by the
 Javaâ„¢ programming language.)",int a hash code value for this object. |||,,28
<android.hardware.camera2.params.SessionConfiguration: List getOutputConfigurations()>,,,Retrieve the OutputConfiguration list for the capture session.,List < OutputConfiguration > A list of output configurations for the capture session. |||,,28
<android.hardware.camera2.params.SessionConfiguration: void setSessionParameters(CaptureRequest)>,,,"Sets the session wide camera parameters (see CaptureRequest ). This argument can
 be set for every supported session type and will be passed to the camera device as part
 of the capture session initialization. Session parameters are a subset of the available
 capture request parameters (see CameraCharacteristics#getAvailableSessionKeys )
 and their application can introduce internal camera delays. To improve camera performance
 it is suggested to change them sparingly within the lifetime of the capture session and
 to pass their initial values as part of this method.",void,"params CaptureRequest : A capture request that includes the initial values for any available
session wide capture keys. Tags (see CaptureRequest.Builder#setTag ) and
output targets (see CaptureRequest.Builder#addTarget ) are ignored if
set. Parameter values not part of CameraCharacteristics#getAvailableSessionKeys will also be ignored. It
is recommended to build the session parameters using the same template type as
the initial capture request so that the session and initial request parameters
match as much as possible. |||",28
<android.hardware.camera2.TotalCaptureResult: Map getPhysicalCameraResults()>,,,"Get the map between physical camera ids and their capture result metadata This function can be called for logical multi-camera devices which are devices that have
 REQUEST_AVAILABLE_CAPABILITIES_LOGICAL_MULTI_CAMERA capability and calls to CameraCharacteristics#getPhysicalCameraIds return a non-empty set of physical devices that
 are backing the logical camera. If one or more streams from the underlying physical cameras were requested by the
 corresponding capture request this function returns the result metadata for those physical
 cameras. Otherwise an empty map is returned.",Map < String  CaptureResult > unmodifiable map between physical camera ids and their capture result metadata |||,,28
"<android.icu.text.Bidi: Bidi setLine(int,int)>",,,"setLine() returns a Bidi object to
 contain the reordering information especially the resolved levels
 for all the characters in a line of text. This line of text is
 specified by referring to a Bidi object representing
 this information for a piece of text containing one or more paragraphs
 and by specifying a range of indexes in this text. In the new line object the indexes will range from 0 to limit-start-1 . This is used after calling setPara() for a piece of text and after line-breaking on that text.
 It is not necessary if each paragraph is treated as a single line. After line-breaking rules (L1) and (L2) for the treatment of
 trailing WS and for reordering are performed on
 a Bidi object that represents a line. Important: the line Bidi object may
 reference data within the global text Bidi object.
 You should not alter the content of the global text object until
 you are finished using the line object.",Bidi a Bidi object that will now represent a line of the text. |||,"start int : is the line's first index into the text. |||
limit int : is just behind the line's last index into the text
(its last index +1). |||",29
<android.icu.text.Bidi: BidiClassifier getCustomClassifier()>,,,"Gets the current custom class classifier used for Bidi class
 determination.",BidiClassifier An instance of class BidiClassifier |||,,29
<android.icu.text.Bidi: boolean isInverse()>,,,"Is this Bidi object set to perform the inverse Bidi
 algorithm? Note: calling this method after setting the reordering mode with setReorderingMode will return true if the
 reordering mode was set to REORDER_INVERSE_NUMBERS_AS_L  false for all other values.","boolean true if the Bidi object is set to
 perform the inverse Bidi algorithm by handling numbers as L. |||",,29
"<android.icu.text.Bidi: boolean requiresBidi(char,int,int)>",,,"Return true if the specified text requires bidi analysis. If this returns
 false the text will display left-to-right. Clients can then avoid
 constructing a Bidi object. Text in the Arabic Presentation Forms area of
 Unicode is presumed to already be shaped and ordered for display and so
 will not cause this method to return true.",boolean true if the range of characters requires bidi analysis |||,"text char : the text containing the characters to test |||
start int : the start of the range of characters to test |||
limit int : the limit of the range of characters to test |||",29
<android.icu.text.Bidi: byte getDirection()>,,,Get the directionality of the text.,"byte a value of LTR  RTL or MIXED that indicates if the entire text
         represented by this object is unidirectional
         and which direction or if it is mixed-directional. |||",,29
<android.icu.text.Bidi: byte getLevels()>,,,"Get an array of levels for each character. Note that this method may allocate memory under some
 circumstances unlike getLevelAt() .","byte[] The levels array for the text
         or null if an error occurs. |||",,29
<android.icu.text.Bidi: char getText()>,,,Get the text.,char[] A char array containing the text that the Bidi object was created for. |||,,29
<android.icu.text.Bidi: int getBaseLevel()>,,,Return the base level (0 if left-to-right 1 if right-to-left).,int the base level |||,,29
<android.icu.text.Bidi: int getLogicalIndex(int)>,,,"Get the logical text position from a visual position.
 If such a mapping is used many times on the same Bidi object then calling getVisualMap() is more efficient. The value returned may be MAP_NOWHERE if there is no
 logical position because the corresponding text character is a Bidi
 mark inserted in the output by option OPTION_INSERT_MARKS . This is the inverse method to getVisualIndex() . When the visual output is altered by using options of writeReordered() such as INSERT_LRM_FOR_NUMERIC  KEEP_BASE_COMBINING  OUTPUT_REVERSE  REMOVE_BIDI_CONTROLS the logical position returned may not
 be correct. It is advised to use when possible reordering options
 such as OPTION_INSERT_MARKS and OPTION_REMOVE_CONTROLS .",int The index of this character in the text. |||,visualIndex int : is the visual position of a character. |||,29
<android.icu.text.Bidi: int getProcessedLength()>,,,"Get the length of the source text processed by the last call to setPara() . This length may be different from the length of
 the source text if option OPTION_STREAMING has been
 set. Note that whenever the length of the text affects the execution or the
 result of a method it is the processed length which must be considered
 except for setPara (which receives unprocessed source text)
 and getLength (which returns the original length of the
 source text). In particular the processed length is the one to consider in the
 following cases: maximum value of the limit argument of setLine 
maximum value of the charIndex argument of getParagraph 
maximum value of the charIndex argument of getLevelAt 
number of elements in the array returned by getLevels 
maximum value of the logicalStart argument of getLogicalRun 
maximum value of the logicalIndex argument of getVisualIndex 
number of elements returned by getLogicalMap 
length of text processed by writeReordered","int The length of the part of the source text processed by
         the last call to setPara . |||",,29
<android.icu.text.Bidi: int getReorderingMode()>,,,What is the requested reordering mode for a given Bidi object?,int the current reordering mode of the Bidi object |||,,29
<android.icu.text.Bidi: int getResultLength()>,,,"Get the length of the reordered text resulting from the last call to setPara() . This length may be different from the length
 of the source text if option OPTION_INSERT_MARKS or option OPTION_REMOVE_CONTROLS has been set. This resulting length is the one to consider in the following cases: maximum value of the visualIndex argument of getLogicalIndex 
number of elements returned by getVisualMap","int The length of the reordered text resulting from
         the last call to setPara . |||",,29
<android.icu.text.Bidi: int getRunLevel(int)>,,,Return the level of the nth logical run in this line.,int the level of the run |||,run int : the index of the run between 0 and countRuns()-1 |||,29
<android.icu.text.Bidi: int getRunStart(int)>,,,"Return the index of the character at the start of the nth logical run in
 this line as an offset from the start of the line.",int the start of the run |||,run int : the index of the run between 0 and countRuns() |||,29
<android.icu.text.Bidi: int reorderLogical(byte)>,,,"This is a convenience method that does not use a Bidi object.
 It is intended to be used for when an application has determined the levels
 of objects (character sequences) and just needs to have them reordered (L2).
 This is equivalent to using getLogicalMap() on a Bidi object.",int[] an array of levels.length indexes which will reflect the reordering of the characters. The index map will result in indexMap[logicalIndex]==visualIndex where indexMap represents the returned array. |||,"levels byte : is an array of levels that have been determined by
the application. |||",29
<android.icu.text.Bidi: int reorderVisual(byte)>,,,"This is a convenience method that does not use a Bidi object.
 It is intended to be used for when an application has determined the levels
 of objects (character sequences) and just needs to have them reordered (L2).
 This is equivalent to using getVisualMap() on a Bidi object.",int[] an array of levels.length indexes which will reflect the reordering of the characters. The index map will result in indexMap[visualIndex]==logicalIndex where indexMap represents the returned array. |||,"levels byte : is an array of levels that have been determined by
the application. |||",29
<android.icu.text.Bidi: void orderParagraphsLTR(boolean)>,,,"Specify whether block separators must be allocated level zero
 so that successive paragraphs will progress from left to right.
 This method must be called before setPara() .
 Paragraph separators (B) may appear in the text.  Setting them to level zero
 means that all paragraph separators (including one possibly appearing
 in the last text position) are kept in the reordered text after the text
 that they follow in the source text.
 When this feature is not enabled a paragraph separator at the last
 position of the text before reordering will go to the first position
 of the reordered text when the paragraph level is odd.",void,"ordarParaLTR boolean : specifies whether paragraph separators (B) must
receive level 0 so that successive paragraphs progress from left to right. |||",29
"<android.icu.text.Bidi: void reorderVisually(byte,int,Object,int,int)>",,,"Reorder the objects in the array into visual order based on their levels.
 This is a utility method to use when you have a collection of objects
 representing runs of text in logical order each run containing text at a
 single level. The elements at index from objectStart up to objectStart + count in the
 objects array will be reordered into visual order assuming
 each run of text has the level indicated by the corresponding element in
 the levels array (at index - objectStart + levelStart ).",void,"levels byte : an array representing the bidi level of each object |||
levelStart int : the start position in the levels array |||
objects Object : the array of objects to be reordered into visual order |||
objectStart int : the start position in the objects array |||
count int : the number of objects to reorder |||",29
"<android.icu.text.Bidi: void setPara(char,byte,byte)>",,,"Perform the Unicode Bidi algorithm. It is defined in the Unicode Standard Annex #9 . This method takes a piece of plain text containing one or more paragraphs
 with or without externally specified embedding levels from styled text and computes the left-right-directionality of each character. If the entire text is all of the same directionality then
 the method may not perform all the steps described by the algorithm
 i.e. some levels may not be the same as if all steps were performed.
 This is not relevant for unidirectional text. For example in pure LTR text with numbers the numbers would get
 a resolved level of 2 higher than the surrounding text according to
 the algorithm. This implementation may set all resolved levels to
 the same value in such a case. The text can be composed of multiple paragraphs. Occurrence of a block
 separator in the text terminates a paragraph and whatever comes next starts
 a new paragraph. The exception to this rule is when a Carriage Return (CR)
 is followed by a Line Feed (LF). Both CR and LF are block separators but
 in that case the pair of characters is considered as terminating the
 preceding paragraph and a new paragraph will be started by a character
 coming after the LF. The text is stored internally as an array of characters. Therefore the
 documentation will refer to indexes of the characters in the text.",void,"chars char : contains the text that the Bidi algorithm will be performed
on. This text can be retrieved with getText() or getTextAsString . |||
paraLevel byte : specifies the default level for the text;
it is typically 0 (LTR) or 1 (RTL).
If the method shall determine the paragraph level from the text
then paraLevel can be set to
either LEVEL_DEFAULT_LTR or LEVEL_DEFAULT_RTL ; if the text contains multiple
paragraphs the paragraph level shall be determined separately for
each paragraph; if a paragraph does not include any strongly typed
character then the desired default is used (0 for LTR or 1 for RTL).
Any other value between 0 and MAX_EXPLICIT_LEVEL is also valid with odd levels indicating RTL. |||
embeddingLevels byte : (in) may be used to preset the embedding and
override levels ignoring characters like LRE and PDF in the text.
A level overrides the directional property of its corresponding
(same index) character if the level has the LEVEL_OVERRIDE bit set. Aside from that bit it must be paraLevel<=embeddingLevels[]<=MAX_EXPLICIT_LEVEL except that level 0 is always allowed.
Level 0 for a paragraph separator prevents reordering of paragraphs;
this only works reliably if LEVEL_OVERRIDE is also set for paragraph separators.
Level 0 for other characters is treated as a wildcard
and is lifted up to the resolved level of the surrounding paragraph. Caution: A reference to this array not a copy
of the levels will be stored in the Bidi object;
the embeddingLevels should not be modified to avoid unexpected results on subsequent
Bidi operations. However the setPara() and setLine() methods may modify some or all of the
levels. Note: the embeddingLevels array must
have one entry for each character in text . |||",29
"<android.icu.text.Bidi: void setPara(String,byte,byte)>",,,"Perform the Unicode Bidi algorithm. It is defined in the Unicode Standard Annex #9 . This method takes a piece of plain text containing one or more paragraphs
 with or without externally specified embedding levels from styled text and computes the left-right-directionality of each character. If the entire text is all of the same directionality then
 the method may not perform all the steps described by the algorithm
 i.e. some levels may not be the same as if all steps were performed.
 This is not relevant for unidirectional text. For example in pure LTR text with numbers the numbers would get
 a resolved level of 2 higher than the surrounding text according to
 the algorithm. This implementation may set all resolved levels to
 the same value in such a case. The text can be composed of multiple paragraphs. Occurrence of a block
 separator in the text terminates a paragraph and whatever comes next starts
 a new paragraph. The exception to this rule is when a Carriage Return (CR)
 is followed by a Line Feed (LF). Both CR and LF are block separators but
 in that case the pair of characters is considered as terminating the
 preceding paragraph and a new paragraph will be started by a character
 coming after the LF. Although the text is passed here as a String it is
 stored internally as an array of characters. Therefore the
 documentation will refer to indexes of the characters in the text.",void,"text String : contains the text that the Bidi algorithm will be performed
on. This text can be retrieved with getText() or getTextAsString . |||
paraLevel byte : specifies the default level for the text;
it is typically 0 (LTR) or 1 (RTL).
If the method shall determine the paragraph level from the text
then paraLevel can be set to
either LEVEL_DEFAULT_LTR or LEVEL_DEFAULT_RTL ; if the text contains multiple
paragraphs the paragraph level shall be determined separately for
each paragraph; if a paragraph does not include any strongly typed
character then the desired default is used (0 for LTR or 1 for RTL).
Any other value between 0 and MAX_EXPLICIT_LEVEL is also valid with odd levels indicating RTL. |||
embeddingLevels byte : (in) may be used to preset the embedding and override levels
ignoring characters like LRE and PDF in the text.
A level overrides the directional property of its corresponding
(same index) character if the level has the LEVEL_OVERRIDE bit set. Aside from that bit it must be paraLevel<=embeddingLevels[]<=MAX_EXPLICIT_LEVEL except that level 0 is always allowed.
Level 0 for a paragraph separator prevents reordering of paragraphs;
this only works reliably if LEVEL_OVERRIDE is also set for paragraph separators.
Level 0 for other characters is treated as a wildcard
and is lifted up to the resolved level of the surrounding paragraph. Caution: A reference to this array not a copy
of the levels will be stored in the Bidi object;
the embeddingLevels should not be modified to avoid unexpected results on subsequent
Bidi operations. However the setPara() and setLine() methods may modify some or all of the
levels. Note: the embeddingLevels array must
have one entry for each character in text . |||",29
<android.icu.text.BidiClassifier: void setContext(Object)>,,,"Sets classifier context which can be used either by a caller or
 callee for various purposes.",void,"context Object : Context for this classifier instance.
May be null. |||",29
<android.icu.text.BidiRun: boolean isEvenRun()>,,,Check if run level is even,"boolean true if the embedding level of this run is even i.e. it is a
  left-to-right run. |||",,29
<android.icu.text.BidiRun: byte getEmbeddingLevel()>,,,Get level of run,byte |||,,29
<android.icu.text.BidiRun: String toString()>,,,String to display run,String a string representation of the object. |||,,29
<android.icu.text.CaseMap.Fold: String apply(CharSequence)>,,,"Case-folds a string.
 The result may be longer or shorter than the original. Case-folding is locale-independent and not context-sensitive
 but there is an option for whether to include or exclude mappings for dotted I
 and dotless i that are marked with 'T' in CaseFolding.txt.",String the result string. |||,src CharSequence : The original string. |||,29
<android.icu.text.CaseMap.Title: CaseMap.Title noBreakAdjustment()>,,,"Returns an instance that behaves like this one but
 does not adjust the titlecasing BreakIterator indexes;
 titlecases exactly the characters at breaks from the iterator. By default titlecasing will take each break iterator index
 adjust it to the next relevant character (see adjustToCased() )
 and titlecase that one. Other characters are lowercased.",CaseMap.Title an options object with this option. |||,,29
<android.icu.text.CaseMap.Title: CaseMap.Title omitUnchangedText()>,,,"Returns an instance that behaves like this one but
 omits unchanged text when case-mapping with Edits .",CaseMap.Title an options object with this option. |||,,29
<android.icu.text.CaseMap.Title: CaseMap.Title sentences()>,,,"Returns an instance that behaves like this one but
 titlecases sentences rather than words.
 (Titlecases only the first character of each sentence possibly adjusted.) It is an error to specify multiple titlecasing iterator options together
 including both an option and an explicit BreakIterator.",CaseMap.Title an options object with this option. |||,,29
"<android.icu.text.CaseMap.Title: String apply(Locale,BreakIterator,CharSequence)>",,,"Titlecases a string.
 Casing is locale-dependent and context-sensitive.
 The result may be longer or shorter than the original. Titlecasing uses a break iterator to find the first characters of words
 that are to be titlecased. It titlecases those characters and lowercases
 all others. (This can be modified with options bits.)",String the result string. |||,"locale Locale : The locale ID. Can be null for Locale#getDefault .
(See ULocale#toLocale .) |||
iter BreakIterator : A break iterator to find the first characters of words that are to be titlecased.
It is set to the source string (setText())
and used one or more times for iteration (first() and next()).
If null then a word break iterator for the locale is used
(or something equivalent). |||
src CharSequence : The original string. |||",29
"<android.icu.text.CaseMap.Upper: String apply(Locale,CharSequence)>",,,"Uppercases a string.
 Casing is locale-dependent and context-sensitive.
 The result may be longer or shorter than the original.",String the result string. |||,"locale Locale : The locale ID. Can be null for Locale#getDefault .
(See ULocale#toLocale .) |||
src CharSequence : The original string. |||",29
<android.icu.text.CaseMap: CaseMap.Title toTitle()>,,,,CaseMap.Title Titlecasing object with default options. |||,,29
"<android.icu.text.DecimalFormatSymbols: DecimalFormatSymbols forNumberingSystem(Locale,NumberingSystem)>",,,"[icu] Returns a DecimalFormatSymbols instance for the given locale with digits and symbols
 corresponding to the given NumberingSystem . This method behaves equivalently to getInstance() called with a locale having a
 ""numbers=xxxx"" keyword specifying the numbering system by name. In this method the NumberingSystem argument will be used even if the locale has its own
 ""numbers=xxxx"" keyword.",DecimalFormatSymbols A DecimalFormatSymbols instance. |||,"locale Locale : the locale. |||
ns NumberingSystem : the numbering system. |||",29
<android.icu.text.DecimalFormatSymbols: String getDecimalSeparatorString()>,,,[icu] Returns the string used for decimal sign.,String the decimal sign string |||,,28
<android.icu.text.DecimalFormatSymbols: String getMonetaryDecimalSeparatorString()>,,,[icu] Returns the monetary decimal separator string.,String the monetary decimal separator string |||,,28
<android.icu.text.DecimalFormatSymbols: String getMonetaryGroupingSeparatorString()>,,,[icu] Returns the monetary grouping separator.,String the monetary grouping separator string |||,,28
<android.icu.text.DecimalFormatSymbols: String getPercentString()>,,,[icu] Returns the string used for percent sign.,String the percent string |||,,28
<android.icu.text.DecimalFormatSymbols: void setDigitStrings(String)>,,,"[icu] Sets the array of strings used as digits in order from 0 through 9 Note: When the input array of digit strings contains any strings
 represented by multiple Java chars then getDigits() will return
 the default digits ('0' - '9') and getZeroDigit() will return the
 default zero digit ('0').",void,digitStrings String : The array of digit strings. The length of the array must be exactly 10. |||,28
<android.icu.text.DecimalFormatSymbols: void setGroupingSeparatorString(String)>,,,"[icu] Sets the string used for grouping separator. Note: When the input grouping separator String is represented
 by multiple Java chars then getGroupingSeparator() will
 return the default grouping separator character ('').",void,groupingSeparatorString String : the grouping separator string |||,28
<android.icu.text.DecimalFormatSymbols: void setMonetaryGroupingSeparatorString(String)>,,,"[icu] Sets the monetary grouping separator string. Note: When the input grouping separator String is represented
 by multiple Java chars then getMonetaryGroupingSeparator() will
 return the default monetary grouping separator character ('').",void,sep String : the monetary grouping separator string |||,28
<android.icu.text.Edits.Iterator: int oldLength()>,,,The length of the current span in the source string which starts at sourceIndex() .,int the number of units in the source string which are replaced or remain unchanged. |||,,29
<android.icu.text.Edits: boolean hasChanges()>,,,,boolean true if there are any change edits |||,,29
<android.icu.text.Edits: Edits.Iterator getCoarseIterator()>,,,"Returns an Iterator for coarse-grained change and no-change edits
 (adjacent change edits are treated as one).
 Can be used to perform simple string updates.
 Adjacent change edits are treated as one edit.",Edits.Iterator an Iterator that merges adjacent changes. |||,,29
<android.icu.text.Edits: Edits.Iterator getFineChangesIterator()>,,,"Returns an Iterator for fine-grained change edits
 (full granularity of change edits is retained).
 Can be used for modifying styled text.
 Skips no-change edits.",Edits.Iterator an Iterator that separates adjacent changes. |||,,29
"<android.icu.text.Edits: void addReplace(int,int)>",3,,"Adds a change edit: a record for a text replacement/insertion/deletion.
 Normally called from inside ICU string transformation functions not user code.",void,"oldLength int |||
newLength int |||",29
<android.icu.text.Edits: void addUnchanged(int)>,3,,"Adds a no-change edit: a record for an unchanged segment of text.
 Normally called from inside ICU string transformation functions not user code.",void,unchangedLength int |||,29
"<android.icu.text.RelativeDateTimeFormatter: String format(double,RelativeDateTimeFormatter.RelativeDateTimeUnit)>",,,"Format a combination of RelativeDateTimeUnit and numeric offset
 using a text style if possible e.g.Â ""last week"" ""this week""
 ""next week"" ""yesterday"" ""tomorrow"". Falls back to numeric
 style if no appropriate text term is available for the specified
 offset in the objectâ€™s locale.

 This method returns a String. To get more information about the
 formatting result use formatToValue().",String The formatted string (may be empty in case of error) |||,"offset double : The signed offset for the specified field. |||
unit RelativeDateTimeFormatter.RelativeDateTimeUnit : The unit to use when formatting the relative
date e.g. RelativeDateTimeUnit.WEEK
RelativeDateTimeUnit.FRIDAY. |||",28
"<android.icu.text.RelativeDateTimeFormatter: String formatNumeric(double,RelativeDateTimeFormatter.RelativeDateTimeUnit)>",,,"Format a combination of RelativeDateTimeUnit and numeric offset
 using a numeric style e.g.Â ""1 week ago"" ""in 1 week""
 ""5 weeks ago"" ""in 5 weeks"".

 This method returns a String. To get more information about the
 formatting result use formatNumericToValue().",String The formatted string (may be empty in case of error) |||,"offset double : The signed offset for the specified unit. This
will be formatted according to this object's
NumberFormat object. |||
unit RelativeDateTimeFormatter.RelativeDateTimeUnit : The unit to use when formatting the relative
date e.g. RelativeDateTimeUnit.WEEK
RelativeDateTimeUnit.FRIDAY. |||",28
<android.icu.text.Transliterator.Position: int hashCode()>,,,"Returns a hash code value for the object. This method is
 supported for the benefit of hash tables such as those provided by HashMap . The general contract of hashCode is: Whenever it is invoked on the same object more than once during
     an execution of a Java application the hashCode method
     must consistently return the same integer provided no information
     used in equals comparisons on the object is modified.
     This integer need not remain consistent from one execution of an
     application to another execution of the same application. 
If two objects are equal according to the equals(Object) method then calling the hashCode method on each of
     the two objects must produce the same integer result. 
It is not required that if two objects are unequal
     according to the equals(java.lang.Object) method then calling the hashCode method on each of the
     two objects must produce distinct integer results.  However the
     programmer should be aware that producing distinct integer results
     for unequal objects may improve the performance of hash tables. 
As much as is reasonably practical the hashCode method defined by
 class Object does return distinct integers for distinct
 objects. (This is typically implemented by converting the internal
 address of the object into an integer but this implementation
 technique is not required by the
 Javaâ„¢ programming language.)",int a hash code value for this object. |||,,29
<android.icu.text.Transliterator.Position: String toString()>,,,Returns a string representation of this Position.,String a string representation of the object. |||,,29
"<android.icu.text.Transliterator: int transliterate(Replaceable,int,int)>",,,Transliterates a segment of a string with optional filtering.,"int The new limit index.  The text previously occupying [start
 limit) has been transliterated possibly to a string of a different
 length at [start new-limit ) where new-limit is the return value. If the input offsets are out of bounds
 the returned value is -1 and the input string remains unchanged. |||","text Replaceable : the string to be transliterated |||
start int : the beginning index inclusive; 0 <= start
<= limit . |||
limit int : the ending index exclusive; start <= limit
<= text.length() . |||",29
<android.icu.text.Transliterator: String getDisplayName(String)>,,,"Returns a name for this transliterator that is appropriate for
 display to the user in the default DISPLAY locale.  See getDisplayName(java.lang.String java.util.Locale) for details.",String |||,ID String |||,29
<android.icu.text.Transliterator: String getID()>,,,"Returns a programmatic identifier for this transliterator.
 If this identifier is passed to getInstance() it
 will return this object if it has been registered.",String |||,,29
<android.icu.text.Transliterator: String transliterate(String)>,,,Transliterate an entire string and returns the result. Convenience method.,String The transliterated text |||,text String : the string to be transliterated |||,29
"<android.icu.text.Transliterator: Transliterator createFromRules(String,String,int)>",,,"Returns a Transliterator object constructed from
 the given rule string.  This will be a rule-based Transliterator
 if the rule string contains only rules or a
 compound Transliterator if it contains ID blocks or a
 null Transliterator if it contains ID blocks which parse as
 empty for the given direction.",Transliterator a newly created Transliterator |||,"ID String : the id for the transliterator. |||
rules String : rules separated by ';' |||
dir int : either FORWARD or REVERSE. |||",29
<android.icu.text.Transliterator: Transliterator getInverse()>,,,"Returns this transliterator's inverse.  See the class
 documentation for details.  This implementation simply inverts
 the two entities in the ID and attempts to retrieve the
 resulting transliterator.  That is if getID() returns ""A-B"" then this method will return the result of getInstance(""B-A"") or null if that
 call fails. Subclasses with knowledge of their inverse may wish to
 override this method.","Transliterator a transliterator that is an inverse not necessarily
 exact of this transliterator or null if no such
 transliterator is registered. |||",,29
<android.icu.text.Transliterator: UnicodeFilter getFilter()>,,,Returns the filter used by this transliterator or null if this transliterator uses no filter.,UnicodeFilter |||,,29
<android.icu.text.Transliterator: UnicodeSet getSourceSet()>,,,"Returns the set of all characters that may be modified in the
 input text by this Transliterator.  This incorporates this
 object's current filter; if the filter is changed the return
 value of this function will change.  The default implementation
 returns an empty set. The return result is approximate in any case
 and is intended for use by tests tools or utilities.",UnicodeSet |||,,29
<android.icu.text.Transliterator: UnicodeSet getTargetSet()>,,,"Returns the set of all characters that may be generated as
 replacement text by this transliterator.  The default
 implementation returns the empty set.  Some subclasses may
 override this method to return a more precise result.  The
 return result is approximate in any case and is intended for
 use by tests tools or utilities requiring such
 meta-information. Warning. You might expect an empty filter to always produce an empty target.
 However consider the following:",UnicodeSet |||,,29
"<android.icu.text.Transliterator: void finishTransliteration(Replaceable,Transliterator.Position)>",,,"Finishes any pending transliterations that were waiting for
 more characters.  Clients should call this method as the last
 call after a sequence of one or more calls to transliterate() .",void,"text Replaceable : the buffer holding transliterated and
untransliterated text. |||
index Transliterator.Position : the array of indices previously passed to transliterate(Replaceable) |||",29
"<android.icu.text.Transliterator: void transliterate(Replaceable,Transliterator.Position)>",,,"Transliterates the portion of the text buffer that can be
 transliterated unambiguosly.  This is a convenience method; see transliterate(android.icu.text.Replaceable android.icu.text.Transliterator.Position java.lang.String) for details.",void,"text Replaceable : the buffer holding transliterated and
untransliterated text |||
index Transliterator.Position : the start and limit of the text the position
of the cursor and the start and limit of transliteration. |||",29
<android.icu.util.Currency: Currency fromJavaCurrency(Currency)>,,,Returns a Currency object based on the currency represented by the given java.util.Currency.,Currency An equivalent ICU currency object. |||,currency Currency : The Java currency object to convert. |||,29
<android.icu.util.LocaleData.PaperSize: int getWidth()>,3,,Returns the width of the paper,int the width |||,,28
<android.icu.util.LocaleData: boolean getNoSubstitute()>,3,,"Gets the ""no substitute"" behavior of this locale data object.","boolean Value for the no substitute behavior.  If TRUE
                  methods of this locale data object will return
                  an error when no data is available for that method
                  given the locale ID supplied to the constructor. |||",,28
<android.inputmethodservice.InputMethodService: boolean switchToNextInputMethod(boolean)>,,,"Force switch to the next input method and subtype. If there is no IME enabled except
 current IME and subtype do nothing.","boolean true if the current input method and subtype was successfully switched to the next
 input method and subtype. |||","onlyCurrentIme boolean : if true the framework will find the next subtype which
belongs to the current IME |||",28
<android.inputmethodservice.InputMethodService: boolean switchToPreviousInputMethod()>,,,"Force switch to the last used input method and subtype. If the last input method didn't have
 any subtypes the framework will simply switch to the last input method with no subtype
 specified.","boolean true if the current input method and subtype was successfully switched to the last
 used input method and subtype. |||",,28
<android.inputmethodservice.InputMethodService: void requestShowSelf(int)>,,,"Show the input method's soft input area so the user sees the input method window and can
 interact with it.",void,flags int : Provides additional operating flags. |||,28
<android.location.GnssClock: double getElapsedRealtimeUncertaintyNanos()>,,,"Gets the estimate of the relative precision of the alignment of the getElapsedRealtimeNanos() timestamp with the reported measurements in
 nanoseconds (68% confidence). The value is only available if hasElapsedRealtimeUncertaintyNanos() is true .",double Value is 0.0f or greater |||,,29
<android.location.GnssMeasurement: boolean hasCodeType()>,,,Returns true if getCodeType() is available false otherwise.,boolean |||,,29
<android.location.LocationManager: boolean isLocationEnabled()>,,,Returns the current enabled/disabled state of location. To listen for changes see MODE_CHANGED_ACTION .,boolean true if location is enabled and false if location is disabled. |||,,28
<android.location.LocationManager: String getGnssHardwareModelName()>,,,"Returns the Model Name (including Vendor and Hardware/Software Version) of the GNSS hardware
 driver. No device-specific serial number or ID is returned from this API. Will return null when the GNSS hardware abstraction layer does not support providing
 this value.",String |||,,28
<android.location.SettingInjectorService: void refreshSettings(Context)>,,,Sends a broadcast to refresh the injected settings on location settings page.,void,context Context : This value must never be null . |||,29
<android.media.AudioAttributes.Builder: AudioAttributes.Builder setAllowedCapturePolicy(int)>,,,"Specifies whether the audio may or may not be captured by other apps or the system.

 The default is AudioAttributes#ALLOW_CAPTURE_BY_ALL .

 There are multiple ways to set this policy: for each track independently with this method 
application-wide at runtime with AudioManager#setAllowedCapturePolicy(int) 
application-wide at build time see allowAudioPlaybackCapture in the
      application manifest.","AudioAttributes.Builder the same Builder instance
 This value will never be null . |||",capturePolicy int : Value is AudioAttributes.ALLOW_CAPTURE_BY_ALL  AudioAttributes.ALLOW_CAPTURE_BY_SYSTEM or AudioAttributes.ALLOW_CAPTURE_BY_NONE |||,29
<android.media.AudioFocusRequest.Builder: AudioFocusRequest.Builder setForceDucking(boolean)>,,,"Marks this focus request as forcing ducking regardless of the conditions in which
 the system would or would not enforce ducking.
 Forcing ducking will only be honored when requesting AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK
 with an AudioAttributes usage of AudioAttributes#USAGE_ASSISTANCE_ACCESSIBILITY coming from an accessibility
 service and will be ignored otherwise.","AudioFocusRequest.Builder this Builder instance
 
 This value will never be null . |||",forceDucking boolean : true to force ducking |||,28
<android.media.audiofx.DynamicsProcessing.BandStage: String toString()>,,,"Returns a string representation of the object. In general the toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the
 object is an instance the at-sign character ` @ ' and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words this method returns a string equal to the
 value of:",String a string representation of the object. |||,,28
<android.media.audiofx.DynamicsProcessing.Channel: DynamicsProcessing.Eq getPostEq()>,,,Gets PostEq configuration stage,DynamicsProcessing.Eq PostEq configuration stage |||,,28
<android.media.audiofx.DynamicsProcessing.Channel: DynamicsProcessing.Limiter getLimiter()>,,,Gets Limiter configuration stage,DynamicsProcessing.Limiter Limiter configuration stage |||,,28
<android.media.audiofx.DynamicsProcessing.Channel: DynamicsProcessing.Mbc getMbc()>,,,Gets Mbc configuration stage,DynamicsProcessing.Mbc Mbc configuration stage |||,,28
<android.media.audiofx.DynamicsProcessing.Channel: DynamicsProcessing.MbcBand getMbcBand(int)>,,,Gets MbcBand configuration for Mbc stage for given band index.,DynamicsProcessing.MbcBand MbcBand configuration |||,band int : index of band of interest from Mbc stage |||,28
<android.media.audiofx.DynamicsProcessing.Channel: void setPostEq(DynamicsProcessing.Eq)>,,,"Sets PostEq configuration stage. New PostEq stage must have the same number of bands than
 original PostEq stage.",void,postEq DynamicsProcessing.Eq : configuration |||,28
<android.media.audiofx.DynamicsProcessing.Channel: void setPreEq(DynamicsProcessing.Eq)>,,,"Sets PreEq configuration stage. New PreEq stage must have the same number of bands than
 original PreEq stage.",void,preEq DynamicsProcessing.Eq : configuration |||,28
<android.media.audiofx.DynamicsProcessing.Config.Builder: DynamicsProcessing.Config.Builder setInputGainAllChannelsTo(float)>,,,,DynamicsProcessing.Config.Builder |||,inputGain float |||,28
<android.media.audiofx.DynamicsProcessing.Config.Builder: DynamicsProcessing.Config.Builder setPreEqAllChannelsTo(DynamicsProcessing.Eq)>,,,,DynamicsProcessing.Config.Builder |||,preEq DynamicsProcessing.Eq |||,28
<android.media.audiofx.DynamicsProcessing.Config.Builder: DynamicsProcessing.Config.Builder setPreferredFrameDuration(float)>,,,,DynamicsProcessing.Config.Builder |||,frameDuration float |||,28
<android.media.audiofx.DynamicsProcessing.Config: boolean isLimiterInUse()>,,,Gets if Limiter stage is in use,boolean true if Limiter stage is in use; |||,,28
<android.media.audiofx.DynamicsProcessing.Config: boolean isPreEqInUse()>,,,Gets if preEq stage is in use,boolean true if preEq stage is in use; |||,,28
"<android.media.audiofx.DynamicsProcessing.Config: DynamicsProcessing.EqBand getPreEqBandByChannelIndex(int,int)>",,,,DynamicsProcessing.EqBand |||,"channelIndex int |||
band int |||",28
<android.media.audiofx.DynamicsProcessing.Config: DynamicsProcessing.Limiter getLimiterByChannelIndex(int)>,,,,DynamicsProcessing.Limiter |||,channelIndex int |||,28
<android.media.audiofx.DynamicsProcessing.Config: float getInputGainByChannelIndex(int)>,,,Gets inputGain value in decibels (dB) for channel indicated by channelIndex,float inputGain value in decibels (dB). 0 dB means no change. |||,channelIndex int : index of channel of interest |||,28
<android.media.audiofx.DynamicsProcessing.Config: int getPostEqBandCount()>,,,Gets number of bands configured for the PostEq stage.,int number of bands configured for the PostEq stage. |||,,28
<android.media.audiofx.DynamicsProcessing.Config: String toString()>,,,"Returns a string representation of the object. In general the toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the
 object is an instance the at-sign character ` @ ' and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words this method returns a string equal to the
 value of:",String a string representation of the object. |||,,28
<android.media.audiofx.DynamicsProcessing.Config: void setAllChannelsTo(DynamicsProcessing.Channel)>,,,"Sets ALL channels to the chosen Channel object. Note that all the stages should have the
 same number of bands than the existing ones.",void,channel DynamicsProcessing.Channel : Channel configuration object to be set. |||,28
"<android.media.audiofx.DynamicsProcessing.Config: void setInputGainByChannelIndex(int,float)>",,,Sets the inputGain value in decibels (dB) for the channel indicated by channelIndex.,void,"channelIndex int : index of channel of interest |||
inputGain float : desired value in decibels (dB). |||",28
<android.media.audiofx.DynamicsProcessing.Config: void setPreEqAllChannelsTo(DynamicsProcessing.Eq)>,,,"Sets the PreEq stage configuration for ALL channels. Note that new preEq stage must have
 the same number of bands than original preEq stages.",void,preEq DynamicsProcessing.Eq : desired PreEq configuration to be set |||,28
<android.media.audiofx.DynamicsProcessing.Eq: DynamicsProcessing.EqBand getBand(int)>,,,Gets EqBand object for band of interest.,DynamicsProcessing.EqBand EqBand Object |||,band int : index of band of interest |||,28
<android.media.audiofx.DynamicsProcessing.Limiter: float getPostGain()>,,,"gets the gain applied to the signal AFTER limiting. Measured in decibels (dB) where 0
 dB means no level change",float postGain value in decibels (dB) |||,,28
<android.media.audiofx.DynamicsProcessing.Limiter: float getReleaseTime()>,,,gets release time for limiter compressor in milliseconds (ms),float release time for limiter compressor in milliseconds (ms) |||,,28
<android.media.audiofx.DynamicsProcessing.Limiter: int getLinkGroup()>,,,"Gets the linkGroup index for this Limiter Stage. Only limiters that share the same
 linkGroup index will react together.",int linkGroup index. |||,,28
<android.media.audiofx.DynamicsProcessing.Limiter: String toString()>,,,"Returns a string representation of the object. In general the toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the
 object is an instance the at-sign character ` @ ' and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words this method returns a string equal to the
 value of:",String a string representation of the object. |||,,28
<android.media.audiofx.DynamicsProcessing.Limiter: void setPostGain(float)>,,,"sets the gain to be applied to the siganl AFTER the limiter. Measured in decibels
 (dB) where 0 dB means no level change.",void,postGain float : desired value in decibels (dB) |||,28
<android.media.audiofx.DynamicsProcessing.Limiter: void setRatio(float)>,,,sets limiter compressor ratio (N:1),void,ratio float : desired for the limiter compressor (N:1) |||,28
"<android.media.audiofx.DynamicsProcessing.Mbc: void setBand(int,DynamicsProcessing.MbcBand)>",,,Sets MbcBand object for given band index,void,"band int : index of band to be modified |||
bandCfg DynamicsProcessing.MbcBand : MbcBand object. |||",28
<android.media.audiofx.DynamicsProcessing.MbcBand: float getNoiseGateThreshold()>,,,"gets the noise gate threshold in decibels (dB) from 0 dB Full Scale (dBFS). Noise gate
 thresholds are negative. Signals below this level will be expanded according the
 expanderRatio parameter. A Noise Gate Threshold of -75 dB means very quiet signals might
 be effectively removed from the signal.",float Noise Gate Threshold in decibels (dB) |||,,28
<android.media.audiofx.DynamicsProcessing.MbcBand: float getRatio()>,,,gets the compressor ratio (N:1),float compressor ratio (N:1) |||,,28
<android.media.audiofx.DynamicsProcessing.MbcBand: float getThreshold()>,,,"gets the compressor threshold measured in decibels (dB) from 0 dB Full Scale (dBFS).
 Thresholds are negative. A threshold of 0 dB means no compression will take place.",float compressor threshold in decibels (dB) |||,,28
<android.media.audiofx.DynamicsProcessing.MbcBand: void setKneeWidth(float)>,,,"sets knee width in decibels (dB). See getKneeWidth() for more
 information.",void,kneeWidth float : desired in decibels (dB) |||,28
<android.media.audiofx.DynamicsProcessing.MbcBand: void setPreGain(float)>,,,"sets the gain to be applied to the signal BEFORE the compression measured in decibels
 (dB) where 0 dB means no level change.",void,preGain float : desired in decibels (dB) |||,28
<android.media.audiofx.DynamicsProcessing.MbcBand: void setRatio(float)>,,,sets compressor ratio (N:1),void,ratio float : desired for the compressor (N:1) |||,28
<android.media.audiofx.DynamicsProcessing.Stage: boolean isEnabled()>,,,returns enabled state of the stage,boolean true if stage is enabled for processing false otherwise |||,,28
<android.media.audiofx.DynamicsProcessing.Stage: void setEnabled(boolean)>,,,sets enabled state of the stage,void,enabled boolean : true for enabled false otherwise |||,28
<android.media.audiofx.DynamicsProcessing: DynamicsProcessing.Eq getPostEqByChannelIndex(int)>,,,,DynamicsProcessing.Eq |||,channelIndex int |||,28
"<android.media.audiofx.DynamicsProcessing: DynamicsProcessing.EqBand getPostEqBandByChannelIndex(int,int)>",,,,DynamicsProcessing.EqBand |||,"channelIndex int |||
band int |||",28
<android.media.audiofx.DynamicsProcessing: int getChannelCount()>,,,Gets the number of channels in the effect engine,int number of channels currently in use by the effect engine |||,,28
<android.media.audiofx.DynamicsProcessing: void setAllChannelsTo(DynamicsProcessing.Channel)>,,,,void,channel DynamicsProcessing.Channel |||,28
"<android.media.audiofx.DynamicsProcessing: void setChannelTo(int,DynamicsProcessing.Channel)>",,,,void,"channelIndex int |||
channel DynamicsProcessing.Channel |||",28
"<android.media.audiofx.DynamicsProcessing: void setMbcBandAllChannelsTo(int,DynamicsProcessing.MbcBand)>",,,,void,"band int |||
mbcBand DynamicsProcessing.MbcBand |||",28
"<android.media.audiofx.DynamicsProcessing: void setPostEqBandAllChannelsTo(int,DynamicsProcessing.EqBand)>",,,,void,"band int |||
postEqBand DynamicsProcessing.EqBand |||",28
"<android.media.audiofx.DynamicsProcessing: void setPreEqByChannelIndex(int,DynamicsProcessing.Eq)>",,,,void,"channelIndex int |||
preEq DynamicsProcessing.Eq |||",28
<android.media.AudioManager: boolean isHapticPlaybackSupported()>,,,Return if audio haptic coupled playback is supported or not.,boolean whether audio haptic playback supported. |||,,29
<android.media.AudioManager: void setAllowedCapturePolicy(int)>,,,"Specifies whether the audio played by this app may or may not be captured by other apps or
 the system.

 The default is AudioAttributes#ALLOW_CAPTURE_BY_ALL .

 There are multiple ways to set this policy: for each track independently see AudioAttributes.Builder#setAllowedCapturePolicy(int) 
application-wide at runtime with this method 
application-wide at build time see allowAudioPlaybackCapture in the application
       manifest.",void,"capturePolicy int : one of AudioAttributes#ALLOW_CAPTURE_BY_ALL  AudioAttributes#ALLOW_CAPTURE_BY_SYSTEM  AudioAttributes#ALLOW_CAPTURE_BY_NONE .
Value is AudioAttributes.ALLOW_CAPTURE_BY_ALL  AudioAttributes.ALLOW_CAPTURE_BY_SYSTEM or AudioAttributes.ALLOW_CAPTURE_BY_NONE |||",29
<android.media.AudioPlaybackCaptureConfiguration: MediaProjection getMediaProjection()>,,,,"MediaProjection the MediaProjection used to build this object.
 This value will never be null . |||",,29
<android.media.AudioPresentation.Builder: AudioPresentation.Builder setLocale(ULocale)>,,,Sets the language information of the audio presentation.,AudioPresentation.Builder This value will never be null . |||,"language ULocale : Locale corresponding to ISO 639-1/639-2 language code.
This value must never be null . |||",29
<android.media.AudioPresentation: boolean equals(Object)>,,,"Indicates whether some other object is ""equal to"" this one. The equals method implements an equivalence relation
 on non-null object references: It is reflexive : for any non-null reference value x  x.equals(x) should return true . 
It is symmetric : for any non-null reference values x and y  x.equals(y) should return true if and only if y.equals(x) returns true . 
It is transitive : for any non-null reference values x  y and z if x.equals(y) returns true and y.equals(z) returns true then x.equals(z) should return true . 
It is consistent : for any non-null reference values x and y multiple invocations of x.equals(y) consistently return true or consistently return false provided no
     information used in equals comparisons on the
     objects is modified. 
For any non-null reference value x  x.equals(null) should return false . 
The equals method for class Object implements
 the most discriminating possible equivalence relation on objects;
 that is for any non-null reference values x and y this method returns true if and only
 if x and y refer to the same object
 ( x == y has the value true ). Note that it is generally necessary to override the hashCode method whenever this method is overridden so as to maintain the
 general contract for the hashCode method which states
 that equal objects must have equal hash codes.","boolean true if this object is the same as the obj
          argument; false otherwise. |||",o Object : the reference object with which to compare. |||,28
<android.media.AudioPresentation: boolean hasDialogueEnhancement()>,,,Indicates whether dialogue enhancement is available.,boolean true if dialogue enhancement is available. |||,,28
<android.media.AudioPresentation: int getPresentationId()>,,,"Returns presentation ID used by the framework to select an audio presentation rendered by a
 decoder. Presentation ID is typically sequential but does not have to be.",int |||,,29
<android.media.AudioPresentation: int getProgramId()>,,,"Returns program ID used by the framework to select an audio presentation rendered by a
 decoder. Program ID can be used to further uniquely identify the presentation to a decoder.",int |||,,29
<android.media.AudioPresentation: Locale getLocale()>,,,,Locale the locale corresponding to audio presentation's ISO 639-1/639-2 language code. |||,,28
<android.media.AudioRecord: boolean setPreferredMicrophoneFieldDimension(float)>,,,"Specifies the zoom factor (i.e. the field dimension) for the selected microphone
 (for processing). The selected microphone is determined by the use-case for the stream.",boolean true if sucessful. |||,"zoom float : the desired field dimension of microphone capture. Range is from -1 (wide angle)
though 0 (no zoom) to 1 (maximum zoom).
Value is between -1.0 and 1.0 inclusive |||",29
<android.media.AudioRecordingConfiguration: int getAudioSource()>,,,"Returns the audio source currently used to configure the capture path. It can be different
 from the source returned by getClientAudioSource() if another capture is active.","int the audio source active on the capture path.
 
 Value is MediaRecorder.AudioSource.DEFAULT  MediaRecorder.AudioSource.MIC  MediaRecorder.AudioSource.VOICE_UPLINK  MediaRecorder.AudioSource.VOICE_DOWNLINK  MediaRecorder.AudioSource.VOICE_CALL  MediaRecorder.AudioSource.CAMCORDER  MediaRecorder.AudioSource.VOICE_RECOGNITION  MediaRecorder.AudioSource.VOICE_COMMUNICATION  MediaRecorder.AudioSource.UNPROCESSED or MediaRecorder.AudioSource.VOICE_PERFORMANCE |||",,29
<android.media.AudioRecordingConfiguration: List getClientEffects()>,,,"Returns the list of AudioEffect.Descriptor for all effects currently enabled on
 the audio capture client (e.g. AudioRecord or MediaRecorder ).","List < AudioEffect.Descriptor > List of AudioEffect.Descriptor containing all effects enabled for the client.
 
 This value will never be null . |||",,29
<android.media.AudioTrack: AudioAttributes getAudioAttributes()>,,,"Returns the AudioAttributes used in configuration.
 If a streamType is used instead of an AudioAttributes to configure the AudioTrack
 (the use of streamType for configuration is deprecated)
 then the AudioAttributes equivalent to the streamType is returned.","AudioAttributes The AudioAttributes used to configure the AudioTrack.
 This value will never be null . |||",,29
"<android.media.AudioTrack: boolean isDirectPlaybackSupported(AudioFormat,AudioAttributes)>",,,"Returns whether direct playback of an audio format with the provided attributes is
 currently supported on the system. Direct playback means that the audio stream is not resampled or downmixed
 by the framework. Checking for direct support can help the app select the representation
 of audio content that most closely matches the capabilities of the device and peripherials
 (e.g. A/V receiver) connected to it. Note that the provided stream can still be re-encoded
 or mixed with other streams if needed. Also note that this query only provides information about the support of an audio format.
 It does not indicate whether the resources necessary for the playback are available
 at that instant.",boolean true if the given audio format can be played directly. |||,"format AudioFormat : a non-null AudioFormat instance describing the format of
the audio data.
This value must never be null . |||
attributes AudioAttributes : a non-null AudioAttributes instance.
This value must never be null . |||",29
"<android.media.AudioTrack: void setOffloadDelayPadding(int,int)>",,,"Configures the delay and padding values for the current compressed stream playing
 in offload mode.
 This can only be used on a track successfully initialized with AudioTrack.Builder#setOffloadedPlayback(boolean) . The unit is frames where a
 frame indicates the number of samples per channel e.g. 100 frames for a stereo compressed
 stream corresponds to 200 decoded interleaved PCM samples.",void,"delayInFrames int : number of frames to be ignored at the beginning of the stream. A value
of 0 indicates no delay is to be applied.
Value is 0 or greater |||
paddingInFrames int : number of frames to be ignored at the end of the stream. A value of 0
of 0 indicates no padding is to be applied.
Value is 0 or greater |||",29
<android.media.AudioTrack: void unregisterStreamEventCallback(AudioTrack.StreamEventCallback)>,,,"Unregisters the callback for notification of stream events previously registered
 with registerStreamEventCallback(java.util.concurrent.Executor android.media.AudioTrack.StreamEventCallback) .",void,"eventCallback AudioTrack.StreamEventCallback : the callback to unregister.
This value must never be null . |||",29
<android.media.ExifInterface: boolean hasAttribute(String)>,,,Returns true if the image file has the given attribute defined.,boolean |||,"tag String : the name of the tag.
This value must never be null . |||",29
"<android.media.ImageReader: ImageReader newInstance(int,int,int,int,long)>",,,"Create a new reader for images of the desired size format and consumer usage flag. The maxImages parameter determines the maximum number of Image objects that
 can be be acquired from the ImageReader simultaneously. Requesting more buffers will
 use up more memory so it is important to use only the minimum number necessary for the use
 case. The valid sizes and formats depend on the source of the image data. The format and usage flag combination describes how the buffer will be used by
 consumer end-points. For example if the application intends to send the images to MediaCodec or MediaRecorder for hardware video
 encoding the format and usage flag combination needs to be ImageFormat#PRIVATE and HardwareBuffer#USAGE_VIDEO_ENCODE . When an ImageReader object is created with a valid size and such format/usage flag
 combination the application can send the Image to an ImageWriter that
 is created with the input Surface provided by the MediaCodec or MediaRecorder . If the format is ImageFormat#PRIVATE the created ImageReader will produce images that are not directly accessible by the application. The application can
 still acquire images from this ImageReader and send them to the camera for reprocessing or to the MediaCodec / MediaRecorder for hardware video
 encoding via ImageWriter interface. However the Image#getPlanes() will return an empty array for ImageFormat#PRIVATE format
 images. The application can check if an existing reader's format by calling getImageFormat() . ImageFormat#PRIVATE format ImageReader are more
 efficient to use when application access to image data is not necessary compared to
 ImageReaders using other format such as ImageFormat#YUV_420_888 . Note that not all format and usage flag combinations are supported by the ImageReader . Below are the supported combinations by the ImageReader (assuming the consumer end-points support the such image consumption e.g. hardware video
 encoding).",ImageReader This value will never be null . |||,"width int : The default width in pixels of the Images that this reader will produce.
Value is 1 or greater |||
height int : The default height in pixels of the Images that this reader will produce.
Value is 1 or greater |||
format int : The format of the Image that this reader will produce. This must be one of the ImageFormat or PixelFormat constants. Note that not all formats are supported like ImageFormat.NV21.
Value is ImageFormat.UNKNOWN  ImageFormat.RGB_565  ImageFormat.YV12  ImageFormat.Y8 android.graphics.ImageFormat.Y16 ImageFormat.NV16  ImageFormat.NV21  ImageFormat.YUY2  ImageFormat.JPEG  ImageFormat.DEPTH_JPEG  ImageFormat.YUV_420_888  ImageFormat.YUV_422_888  ImageFormat.YUV_444_888  ImageFormat.FLEX_RGB_888  ImageFormat.FLEX_RGBA_8888  ImageFormat.RAW_SENSOR  ImageFormat.RAW_PRIVATE  ImageFormat.RAW10  ImageFormat.RAW12  ImageFormat.DEPTH16  ImageFormat.DEPTH_POINT_CLOUD android.graphics.ImageFormat.RAW_DEPTH ImageFormat.PRIVATE or ImageFormat.HEIC |||
maxImages int : The maximum number of images the user will want to access simultaneously.
This should be as small as possible to limit memory use. Once maxImages Images are
obtained by the user one of them has to be released before a new Image will
become available for access through acquireLatestImage() or acquireNextImage() . Must be greater than 0.
Value is 1 or greater |||
usage long : The intended usage of the images produced by this ImageReader. See the usages
on HardwareBuffer for a list of valid usage bits. See also HardwareBuffer#isSupported(int int int int long) for checking
if a combination is supported. If it's not supported this will throw
an IllegalArgumentException .
Value is either 0 or a combination of HardwareBuffer.USAGE_CPU_READ_RARELY  HardwareBuffer.USAGE_CPU_READ_OFTEN  HardwareBuffer.USAGE_CPU_WRITE_RARELY  HardwareBuffer.USAGE_CPU_WRITE_OFTEN  HardwareBuffer.USAGE_GPU_SAMPLED_IMAGE  HardwareBuffer.USAGE_GPU_COLOR_OUTPUT  HardwareBuffer.USAGE_PROTECTED_CONTENT  HardwareBuffer.USAGE_VIDEO_ENCODE  HardwareBuffer.USAGE_GPU_DATA_BUFFER  HardwareBuffer.USAGE_SENSOR_DIRECT_DATA  HardwareBuffer.USAGE_GPU_CUBE_MAP and HardwareBuffer.USAGE_GPU_MIPMAP_COMPLETE |||",29
<android.media.ImageReader: void discardFreeBuffers()>,,,"Discard any free buffers owned by this ImageReader. Generally the ImageReader caches buffers for reuse once they have been
 allocated for best performance. However sometimes it may be important to
 release all the cached unused buffers to save on memory. Calling this method will discard all free cached buffers. This does not include any buffers
 associated with Images acquired from the ImageReader any filled buffers waiting to be
 acquired and any buffers currently in use by the source rendering buffers into the
 ImageReader's Surface. The ImageReader continues to be usable after this call but may need to reallocate buffers
 when more buffers are needed for rendering.",void,,28
"<android.media.MediaCas.Session: void sendSessionEvent(int,int,byte)>",,,"Send a session event to a CA system. The format of the event is
 scheme-specific and is opaque to the framework.",void,"event int : an integer denoting a scheme-specific event to be sent. |||
arg int : a scheme-specific integer argument for the event. |||
data byte : a byte array containing scheme-specific data for the event.
This value may be null . |||",29
<android.media.MediaCodec: String getCanonicalName()>,,,"Retrieve the underlying codec name.

 This method is similar to getName() except that it returns the underlying component
 name even if an alias was used to create this MediaCodec object by name",String This value will never be null . |||,,29
<android.media.MediaCodecInfo.VideoCapabilities.PerformancePoint: String toString()>,,,Convert to a debug string,String a string representation of the object. |||,,29
<android.media.MediaCodecInfo.VideoCapabilities: List getSupportedPerformancePoints()>,,,"Returns the supported performance points. May return null if the codec did not
 publish any performance point information (e.g. the vendor codecs have not been updated
 to the latest android release). May return an empty list if the codec published that
 if does not guarantee any performance points. This is a performance guarantee provided by the device manufacturer for hardware codecs
 based on hardware capabilities of the device. The returned list is sorted first by decreasing number of pixels then by decreasing
 width and finally by decreasing frame rate.
 Performance points assume a single active codec. For use cases where multiple
 codecs are active should use that highest pixel count and add the frame rates of
 each individual codec.",List < MediaCodecInfo.VideoCapabilities.PerformancePoint > |||,,29
<android.media.MediaCodecInfo: boolean isSoftwareOnly()>,,,"Query if the codec is software only. Software-only codecs are more secure as they run in
 a tighter security sandbox. On the other hand software-only codecs do not provide any
 performance guarantees.",boolean |||,,29
<android.media.MediaCodecInfo: String getCanonicalName()>,,,"Retrieve the underlying codec name.

 Device implementations may provide multiple aliases (codec names) for the same underlying
 codec to maintain backward app compatibility. This method returns the name of the underlying
 codec name which must not be another alias. For non-aliases this is always the name of the
 codec.",String This value will never be null . |||,,29
<android.media.MediaController2.Builder: MediaController2 build()>,,,Build MediaController2 .,"MediaController2 a new controller
 
 This value will never be null . |||",,29
<android.media.MediaController2.Builder: MediaController2.Builder setConnectionHints(Bundle)>,,,"Set the connection hints for the controller. connectionHints is a session-specific argument to send to the session when
 connecting. The contents of this bundle may affect the connection result. An IllegalArgumentException will be thrown if the bundle contains any
 non-framework Parcelable objects.","MediaController2.Builder The Builder to allow chaining
 
 This value will never be null . |||","connectionHints Bundle : a bundle which contains the connection hints
This value must never be null . |||",29
"<android.media.MediaController2.Builder: MediaController2.Builder setControllerCallback(Executor,MediaController2.ControllerCallback)>",,,Set callback for the controller and its executor.,"MediaController2.Builder The Builder to allow chaining
 
 This value will never be null . |||","executor Executor : callback executor
This value must never be null . |||
callback MediaController2.ControllerCallback : session callback.
This value must never be null . |||",29
"<android.media.MediaController2.ControllerCallback: void onConnected(MediaController2,Session2CommandGroup)>",,,"Called when the controller is successfully connected to the session. The controller
 becomes available afterwards.",void,"controller MediaController2 : the controller for this event
This value must never be null . |||
allowedCommands Session2CommandGroup : commands that's allowed by the session.
This value must never be null . |||",29
<android.media.MediaController2.ControllerCallback: void onDisconnected(MediaController2)>,,,"Called when the session refuses the controller or the controller is disconnected from
 the session. The controller becomes unavailable afterwards and the callback wouldn't
 be called. It will be also called after the MediaController2.close() so you can put clean up code here.
 You don't need to call MediaController2.close() after this.",void,"controller MediaController2 : the controller for this event
This value must never be null . |||",29
<android.media.MediaController2: boolean isPlaybackActive()>,,,Returns whether the session's playback is active.,boolean true if playback active. false otherwise. |||,,29
"<android.media.MediaController2: Object sendSessionCommand(Session2Command,Bundle)>",,,Sends a session command to the session,"Object a token which will be sent together in ControllerCallback#onCommandResult when its result is received.
 
 This value will never be null . |||","command Session2Command : the session command
This value must never be null . |||
args Bundle : optional arguments
This value may be null . |||",29
"<android.media.MediaDrm: boolean isCryptoSchemeSupported(UUID,String,int)>",,,"Query if the given scheme identified by its UUID is supported on
 this device and whether the DRM plugin is able to handle the
 media container format specified by mimeType at the requested
 security level.",boolean |||,"uuid UUID : The UUID of the crypto scheme.
This value must never be null . |||
mimeType String : The MIME type of the media container e.g. ""video/mp4""
or ""video/webm""
This value must never be null . |||
securityLevel int : the security level requested
Value is SECURITY_LEVEL_UNKNOWN  SECURITY_LEVEL_SW_SECURE_CRYPTO  SECURITY_LEVEL_SW_SECURE_DECODE  SECURITY_LEVEL_HW_SECURE_CRYPTO  SECURITY_LEVEL_HW_SECURE_DECODE or SECURITY_LEVEL_HW_SECURE_ALL |||",29
<android.media.MediaDrm: int getConnectedHdcpLevel()>,,,"Return the HDCP level negotiated with downstream receivers the
 device is connected to. If multiple HDCP-capable displays are
 simultaneously connected to separate interfaces this method
 returns the lowest negotiated level of all interfaces. This method should only be used for informational purposes not for
 enforcing compliance with HDCP requirements. Trusted enforcement of
 HDCP policies must be handled by the DRM system.","int the connected HDCP level
 
 Value is HDCP_LEVEL_UNKNOWN  HDCP_NONE  HDCP_V1  HDCP_V2  HDCP_V2_1  HDCP_V2_2  HDCP_V2_3 or HDCP_NO_DIGITAL_OUTPUT |||",,28
<android.media.MediaDrm: int getOfflineLicenseState(byte)>,,,"Request the state of an offline license. An offline license may be usable
 or inactive. The keys in a usable offline license are available for
 decryption. When the offline license state is inactive the keys have
 been marked for release using getKeyRequest(byte[] byte[] String int HashMap ) with
 KEY_TYPE_RELEASE but the key response has not been received. The keys in
 an inactive offline license are not usable for decryption.","int the offline license state
 Value is OFFLINE_LICENSE_STATE_UNKNOWN  OFFLINE_LICENSE_STATE_USABLE or OFFLINE_LICENSE_STATE_RELEASED |||","keySetId byte : selects the offline license
This value must never be null . |||",29
<android.media.MediaDrm: List getOfflineLicenseKeySetIds()>,,,"The keys in an offline license allow protected content to be played even
 if the device is not connected to a network. Offline licenses are stored
 on the device after a key request/response exchange when the key request
 KeyType is OFFLINE. Normally each app is responsible for keeping track of
 the keySetIds it has created. If an app loses the keySetId for any stored
 licenses that it created however it must be able to recover the stored
 keySetIds so those licenses can be removed when they expire or when the
 app is uninstalled. This method returns a list of the keySetIds for all offline licenses.
 The offline license keySetId may be used to query the status of an
 offline license with getOfflineLicenseState(byte[]) or remove it with removeOfflineLicense(byte[]) .","List <byte[]> a list of offline license keySetIds
 
 This value will never be null . |||",,29
<android.media.MediaDrm: List getSecureStopIds()>,,,"Return a list of all secure stop IDs currently in persistent memory.
 The secure stop ID can be used to access or remove the corresponding
 secure stop.","List <byte[]> a list of secure stop IDs
 
 This value will never be null . |||",,28
<android.media.MediaDrm: PersistableBundle getMetrics()>,,,Return Metrics data about the current MediaDrm instance.,"PersistableBundle a PersistableBundle containing the set of attributes and values
 available for this instance of MediaDrm.
 The attributes are described in MetricsConstants .

 Additional vendor-specific fields may also be present in
 the return value. |||",,28
"<android.media.MediaDrm: void setOnEventListener(MediaDrm.OnEventListener,Handler)>",,,Register a callback to be invoked when an event occurs,void,"listener MediaDrm.OnEventListener : the callback that will be run.  Use null to
stop receiving event callbacks.
This value may be null . |||
handler Handler : the handler on which the listener should be invoked or
null if the listener should be invoked on the calling thread's looper.
This value may be null . |||",29
"<android.media.MediaDrm: void setOnExpirationUpdateListener(Executor,MediaDrm.OnExpirationUpdateListener)>",,,"Register a callback to be invoked when a session expiration update
 occurs.",void,"executor Executor : the executor through which the listener should be invoked
This value must never be null .
Callback and listener events are dispatched through this Executor providing an easy way to control which thread is
used. To dispatch events through the main thread of your
application you can use Context.getMainExecutor() .
To dispatch events through a shared thread pool you can use AsyncTask#THREAD_POOL_EXECUTOR . |||
listener MediaDrm.OnExpirationUpdateListener : the callback that will be run.
This value must never be null . |||",29
"<android.media.MediaDrm: void setOnKeyStatusChangeListener(Executor,MediaDrm.OnKeyStatusChangeListener)>",,,"Register a callback to be invoked when the state of keys in a session
 change.",void,"executor Executor : the executor on which the listener should be invoked.
This value must never be null .
Callback and listener events are dispatched through this Executor providing an easy way to control which thread is
used. To dispatch events through the main thread of your
application you can use Context.getMainExecutor() .
To dispatch events through a shared thread pool you can use AsyncTask#THREAD_POOL_EXECUTOR . |||
listener MediaDrm.OnKeyStatusChangeListener : the callback that will be run when key status changes.
This value must never be null . |||",29
"<android.media.MediaDrm: void setOnSessionLostStateListener(MediaDrm.OnSessionLostStateListener,Handler)>",,,"Register a callback to be invoked when session state has been
 lost. This event can occur on devices that are not capable of
 retaining crypto session state across device suspend/resume
 cycles.  When this event occurs the session must be closed and
 a new session opened to resume operation.",void,"listener MediaDrm.OnSessionLostStateListener : the callback that will be run or null to unregister the
previously registered callback.
This value may be null . |||
handler Handler : the handler on which the listener should be invoked or null if the listener should be invoked on the calling thread's looper.
This value may be null . |||",29
<android.media.MediaExtractor: List getAudioPresentations(int)>,,,Get the list of available audio presentations for the track.,"List < AudioPresentation > a list of available audio presentations for a given valid audio track index.
 The list will be empty if the source does not contain any audio presentations.
 
 This value will never be null . |||",trackIndex int : index of the track. |||,28
<android.media.MediaExtractor: long getSampleSize()>,,,,"long size of the current sample in bytes or -1 if no more
 samples are available. |||",,28
<android.media.MediaFormat: boolean containsFeature(String)>,,,Returns true iff a feature of the given name exists in the format.,boolean |||,name String : This value must never be null . |||,29
"<android.media.MediaFormat: float getFloat(String,float)>",,,Returns the value of an float key or the default value if the key is missing.,float defaultValue if the key does not exist or the stored value for the key is null |||,"name String : This value must never be null . |||
defaultValue float |||",29
"<android.media.MediaFormat: long getLong(String,long)>",,,Returns the value of an long key or the default value if the key is missing.,long defaultValue if the key does not exist or the stored value for the key is null |||,"name String : This value must never be null . |||
defaultValue long |||",29
<android.media.MediaFormat: Number getNumber(String)>,,,"Returns the value of a numeric key. This is provided as a convenience method for keys
 that may take multiple numeric types such as KEY_FRAME_RATE or KEY_I_FRAME_INTERVAL .",Number null if the key does not exist or the stored value for the key is null |||,name String : This value must never be null . |||,29
"<android.media.MediaFormat: Number getNumber(String,Number)>",,,Returns the value of a numeric key or the default value if the key is missing.,Number defaultValue if the key does not exist or the stored value for the key is null |||,"name String : This value must never be null . |||
defaultValue Number : This value must never be null . |||",29
<android.media.MediaFormat: Set getFeatures()>,,,"Returns a Set view of the features contained in this MediaFormat.

 The set is backed by the MediaFormat object so changes to the format are reflected in the
 set and vice-versa. If the format is modified while an iteration over the set is in progress
 (except through the iterator's own remove operation) the results of the iteration are
 undefined. The set supports element removal which removes the corresponding mapping from the
 format via the Iterator.remove Set.remove removeAll retainAll and clear operations.
 It does not support the add or addAll operations.",Set < String > This value will never be null . |||,,29
<android.media.MediaFormat: Set getKeys()>,,,"Returns a Set view of the keys contained in this MediaFormat.

 The set is backed by the MediaFormat object so changes to the format are reflected in the
 set and vice-versa. If the format is modified while an iteration over the set is in progress
 (except through the iterator's own remove operation) the results of the iteration are
 undefined. The set supports element removal which removes the corresponding mapping from the
 format via the Iterator.remove Set.remove removeAll retainAll and clear operations.
 It does not support the add or addAll operations.",Set < String > This value will never be null . |||,,29
<android.media.MediaFormat: void removeFeature(String)>,3,,"Removes a given feature setting if present. Has no effect if the feature setting is not
 present.",void,name String : This value must never be null . |||,29
<android.media.MediaFormat: void removeKey(String)>,3,,Removes a value of a given key if present. Has no effect if the key is not present.,void,name String : This value must never be null . |||,29
<android.media.MediaMetadataRetriever.BitmapParams: Bitmap.Config getPreferredConfig()>,,,Retrieve the preferred bitmap config in the params.,"Bitmap.Config the preferred bitmap config.
 
 This value will never be null . |||",,28
"<android.media.MediaMetadataRetriever: Bitmap getFrameAtIndex(int,MediaMetadataRetriever.BitmapParams)>",,,"This method retrieves a video frame by its index. It should only be called
 after setDataSource(Context Uri) .

 After the bitmap is returned you can query the actual parameters that were
 used to create the bitmap from the BitmapParams argument for instance
 to query the bitmap config used for the bitmap with BitmapParams#getActualConfig .",Bitmap A Bitmap containing the requested video frame or null if the retrieval fails. |||,"frameIndex int : 0-based index of the video frame. The frame index must be that of
a valid frame. The total number of frames available for retrieval can be queried
via the METADATA_KEY_VIDEO_FRAME_COUNT key. |||
params MediaMetadataRetriever.BitmapParams : BitmapParams that controls the returned bitmap config (such as pixel formats).
This value must never be null . |||",28
"<android.media.MediaPlayer: void addOnRoutingChangedListener(AudioRouting.OnRoutingChangedListener,Handler)>",3,,"Adds an AudioRouting.OnRoutingChangedListener to receive notifications of routing
 changes on this MediaPlayer.",void,"listener AudioRouting.OnRoutingChangedListener : The AudioRouting.OnRoutingChangedListener interface to receive
notifications of rerouting events. |||
handler Handler : Specifies the Handler object for the thread on which to execute
the callback. If null the handler on the main looper will be used. |||",28
"<android.media.MediaPlayer: void setOnMediaTimeDiscontinuityListener(MediaPlayer.OnMediaTimeDiscontinuityListener,Handler)>",3,,Sets the listener to be invoked when a media time discontinuity is encountered.,void,"listener MediaPlayer.OnMediaTimeDiscontinuityListener : the listener called after a discontinuity
This value must never be null . |||
handler Handler : the Handler that receives the listener events
This value must never be null . |||",28
<android.media.MediaRecorder: void unregisterAudioRecordingCallback(AudioManager.AudioRecordingCallback)>,3,,Unregister an audio recording callback previously registered with registerAudioRecordingCallback(java.util.concurrent.Executor android.media.AudioManager.AudioRecordingCallback) .,void,"cb AudioManager.AudioRecordingCallback : non-null callback to unregister
This value must never be null . |||",29
"<android.media.MediaSession2.Builder: MediaSession2.Builder setSessionCallback(Executor,MediaSession2.SessionCallback)>",,,Set callback for the session and its executor.,"MediaSession2.Builder The Builder to allow chaining
 
 This value will never be null . |||","executor Executor : callback executor
This value must never be null . |||
callback MediaSession2.SessionCallback : session callback.
This value must never be null . |||",29
<android.media.MediaSession2.ControllerInfo: Bundle getConnectionHints()>,,,,"Bundle connection hints sent from controller.
 
 This value will never be null . |||",,29
<android.media.MediaSession2.ControllerInfo: int getUid()>,,,,int uid of the controller. Can be a negative value if the uid cannot be obtained. |||,,29
<android.media.MediaSession2.ControllerInfo: MediaSessionManager.RemoteUserInfo getRemoteUserInfo()>,,,,"MediaSessionManager.RemoteUserInfo remote user info of the controller.
 
 This value will never be null . |||",,29
"<android.media.MediaSession2.SessionCallback: Session2Command.Result onSessionCommand(MediaSession2,MediaSession2.ControllerInfo,Session2Command,Bundle)>",3,,Called when a controller sent a session command.,"Session2Command.Result the result for the session command. If null RESULT_INFO_SKIPPED
         will be sent to the session. |||","session MediaSession2 : the session for this event
This value must never be null . |||
controller MediaSession2.ControllerInfo : controller information
This value must never be null . |||
command Session2Command : the session command
This value must never be null . |||
args Bundle : optional arguments
This value may be null . |||",29
"<android.media.MediaSession2.SessionCallback: Session2CommandGroup onConnect(MediaSession2,MediaSession2.ControllerInfo)>",,,"Called when a controller is created for this session. Return allowed commands for
 controller. By default it returns null . You can reject the connection by returning null . In that case controller
 receives MediaController2.ControllerCallback#onDisconnected(MediaController2) and cannot be used. The controller hasn't connected yet in this method so calls to the controller
 (e.g. MediaSession2.sendSessionCommand(MediaSession2.ControllerInfo Session2Command Bundle) ) would be ignored. Override onPostConnect(MediaSession2 MediaSession2.ControllerInfo) for
 the custom initialization for the controller instead.",Session2CommandGroup allowed commands. Can be null to reject connection. |||,"session MediaSession2 : the session for this event
This value must never be null . |||
controller MediaSession2.ControllerInfo : controller information.
This value must never be null . |||",29
"<android.media.MediaSession2.SessionCallback: void onPostConnect(MediaSession2,MediaSession2.ControllerInfo)>",,,"Called immediately after a controller is connected. This is a convenient method to add
 custom initialization between the session and a controller. Note that calls to the controller (e.g. MediaSession2.sendSessionCommand(MediaSession2.ControllerInfo Session2Command Bundle) ) work here but don't
 work in onConnect(MediaSession2 MediaSession2.ControllerInfo) because the controller hasn't connected yet in onConnect(MediaSession2 MediaSession2.ControllerInfo) .",void,"session MediaSession2 : the session for this event
This value must never be null . |||
controller MediaSession2.ControllerInfo : controller information.
This value must never be null . |||",29
"<android.media.MediaSession2: Object sendSessionCommand(MediaSession2.ControllerInfo,Session2Command,Bundle)>",,,Sends a session command to a specific controller,"Object a token which will be sent together in SessionCallback#onCommandResult when its result is received.
 
 This value will never be null . |||","controller MediaSession2.ControllerInfo : the controller to get the session command
This value must never be null . |||
command Session2Command : the session command
This value must never be null . |||
args Bundle : optional arguments
This value may be null . |||",29
<android.media.MediaSession2: Session2Token getToken()>,,,Returns the Session2Token for creating MediaController2 .,Session2Token This value will never be null . |||,,29
"<android.media.MediaSession2: void cancelSessionCommand(MediaSession2.ControllerInfo,Object)>",,,Cancels the session command previously sent.,void,"controller MediaSession2.ControllerInfo : the controller to get the session command
This value must never be null . |||
token Object : the token which is returned from sendSessionCommand(MediaSession2.ControllerInfo Session2Command Bundle) .
This value must never be null . |||",29
<android.media.MediaSession2Service: MediaSession2Service.MediaNotification onUpdateNotification(MediaSession2)>,,,"Called when notification UI needs update. Override this method to show or cancel your own
 notification UI. This would be called on MediaSession2 's callback executor when playback state is
 changed. With the notification returned here the service becomes foreground service when the playback
 is started. Apps must request the permission Manifest.permission.FOREGROUND_SERVICE in order to use this API. It becomes
 background service after the playback is stopped.",MediaSession2Service.MediaNotification a MediaNotification . Can be null . |||,"session MediaSession2 : a session that needs notification update.
This value must never be null . |||",29
<android.media.MediaSession2Service: void addSession(MediaSession2)>,,,Adds a session to this service. Added session will be removed automatically when it's closed or removed when removeSession(MediaSession2) is called.,void,"session MediaSession2 : a session to be added.
This value must never be null . |||",29
<android.media.MicrophoneInfo.Coordinate3F: boolean equals(Object)>,,,"Indicates whether some other object is ""equal to"" this one. The equals method implements an equivalence relation
 on non-null object references: It is reflexive : for any non-null reference value x  x.equals(x) should return true . 
It is symmetric : for any non-null reference values x and y  x.equals(y) should return true if and only if y.equals(x) returns true . 
It is transitive : for any non-null reference values x  y and z if x.equals(y) returns true and y.equals(z) returns true then x.equals(z) should return true . 
It is consistent : for any non-null reference values x and y multiple invocations of x.equals(y) consistently return true or consistently return false provided no
     information used in equals comparisons on the
     objects is modified. 
For any non-null reference value x  x.equals(null) should return false . 
The equals method for class Object implements
 the most discriminating possible equivalence relation on objects;
 that is for any non-null reference values x and y this method returns true if and only
 if x and y refer to the same object
 ( x == y has the value true ). Note that it is generally necessary to override the hashCode method whenever this method is overridden so as to maintain the
 general contract for the hashCode method which states
 that equal objects must have equal hash codes.","boolean true if this object is the same as the obj
          argument; false otherwise. |||",obj Object : the reference object with which to compare. |||,28
<android.media.MicrophoneInfo: float getMinSpl()>,,,Returns the level in dB of the minimum SPL that can be registered by the device at 1000Hz.,float the minimum level in dB or SPL_UNKNOWN if minimum SPL is unknown |||,,28
<android.media.MicrophoneInfo: int getIndexInTheGroup()>,,,Returns unique index for device within its group.,"int the microphone's index in its group or INDEX_IN_THE_GROUP_UNKNOWN if the
 index in the group is unknown |||",,28
<android.media.MicrophoneInfo: List getFrequencyResponse()>,,,"Returns a Pair list of frequency responses.
 For every Pair in the list the first value represents frequency in Hz
 and the second value represents response in dB.",List < Pair < Float  Float >> the frequency response of the microphone |||,,28
<android.media.MicrophoneInfo: MicrophoneInfo.Coordinate3F getPosition()>,1,,"Returns A Coordinate3F object that represents the geometric location of microphone
 in meters from bottom-left-back corner of appliance. X-axis Y-axis and Z-axis show
 as the x y z values.","MicrophoneInfo.Coordinate3F the geometric location of the microphone or POSITION_UNKNOWN if the
 geometric location is unknown |||",,28
<android.media.MicrophoneInfo: String getDescription()>,1,,Returns alphanumeric code that uniquely identifies the device.,String the description of the microphone |||,,28
<android.media.Ringtone: boolean isLooping()>,3,,Returns whether the looping mode was enabled on this player.,boolean true if this player loops when playing. |||,,28
"<android.media.session.MediaController.PlaybackInfo: void writeToParcel(Parcel,int)>",2,,Flatten this object in to a Parcel.,void,"dest Parcel : The Parcel in which the object should be written. |||
flags int : Additional flags about how the object should be written.
May be 0 or Parcelable.PARCELABLE_WRITE_RETURN_VALUE .
Value is either 0 or a combination of Parcelable.PARCELABLE_WRITE_RETURN_VALUE and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES |||",29
<android.media.session.MediaSessionManager.RemoteUserInfo: boolean equals(Object)>,3,,"Returns equality of two RemoteUserInfo. Two RemoteUserInfo objects are equal
 if and only if they have the same package name same pid and same uid.",boolean true if equals false otherwise |||,"obj Object : the reference object with which to compare.
This value may be null . |||",28
<android.media.session.MediaSessionManager: void notifySession2Created(Session2Token)>,3,,"This API is not generally intended for third party application developers.
 Use the AndroidX Media2 session
 Library for consistent behavior across all devices. Notifies that a new MediaSession2 with type Session2Token#TYPE_SESSION is
 created. Do not use this API directly but create a new instance through the MediaSession2.Builder instead.",void,"token Session2Token : newly created session2 token
This value must never be null . |||",29
<android.media.Session2Command.Result: Bundle getResultData()>,,,Returns the result data.,Bundle This value may be null . |||,,29
<android.media.Session2Command: boolean equals(Object)>,3,,"Indicates whether some other object is ""equal to"" this one. The equals method implements an equivalence relation
 on non-null object references: It is reflexive : for any non-null reference value x  x.equals(x) should return true . 
It is symmetric : for any non-null reference values x and y  x.equals(y) should return true if and only if y.equals(x) returns true . 
It is transitive : for any non-null reference values x  y and z if x.equals(y) returns true and y.equals(z) returns true then x.equals(z) should return true . 
It is consistent : for any non-null reference values x and y multiple invocations of x.equals(y) consistently return true or consistently return false provided no
     information used in equals comparisons on the
     objects is modified. 
For any non-null reference value x  x.equals(null) should return false . 
The equals method for class Object implements
 the most discriminating possible equivalence relation on objects;
 that is for any non-null reference values x and y this method returns true if and only
 if x and y refer to the same object
 ( x == y has the value true ). Note that it is generally necessary to override the hashCode method whenever this method is overridden so as to maintain the
 general contract for the hashCode method which states
 that equal objects must have equal hash codes.","boolean true if this object is the same as the obj
          argument; false otherwise. |||",obj Object : This value may be null . |||,29
<android.media.Session2Command: Bundle getCustomExtras()>,,,"Gets the extra bundle of a custom command.
 This will return null for a predefined command.",Bundle |||,,29
<android.media.Session2CommandGroup.Builder: Session2CommandGroup build()>,3,,Builds Session2CommandGroup .,"Session2CommandGroup a new Session2CommandGroup .
 
 This value will never be null . |||",,29
<android.media.Session2CommandGroup.Builder: Session2CommandGroup.Builder addCommand(Session2Command)>,3,,Adds a command to this command group.,Session2CommandGroup.Builder |||,"command Session2Command : A command to add. Shouldn't be null .
This value must never be null . |||",29
<android.media.Session2CommandGroup: boolean hasCommand(int)>,3,,Checks whether this command group has a command that matches given commandCode .,boolean |||,"commandCode int : A command code to find.
Shouldn't be Session2Command#COMMAND_CODE_CUSTOM . |||",29
<android.media.Session2CommandGroup: boolean hasCommand(Session2Command)>,,,Checks whether this command group has a command that matches given command .,boolean |||,"command Session2Command : A command to find. Shouldn't be null .
This value must never be null . |||",29
"<android.media.Session2CommandGroup: void writeToParcel(Parcel,int)>",,,Flatten this object in to a Parcel.,void,"dest Parcel : This value must never be null . |||
flags int : Additional flags about how the object should be written.
May be 0 or Parcelable.PARCELABLE_WRITE_RETURN_VALUE .
Value is either 0 or a combination of Parcelable.PARCELABLE_WRITE_RETURN_VALUE and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES |||",29
<android.media.Session2Token: int hashCode()>,3,,"Returns a hash code value for the object. This method is
 supported for the benefit of hash tables such as those provided by HashMap . The general contract of hashCode is: Whenever it is invoked on the same object more than once during
     an execution of a Java application the hashCode method
     must consistently return the same integer provided no information
     used in equals comparisons on the object is modified.
     This integer need not remain consistent from one execution of an
     application to another execution of the same application. 
If two objects are equal according to the equals(Object) method then calling the hashCode method on each of
     the two objects must produce the same integer result. 
It is not required that if two objects are unequal
     according to the equals(java.lang.Object) method then calling the hashCode method on each of the
     two objects must produce distinct integer results.  However the
     programmer should be aware that producing distinct integer results
     for unequal objects may improve the performance of hash tables. 
As much as is reasonably practical the hashCode method defined by
 class Object does return distinct integers for distinct
 objects. (This is typically implemented by converting the internal
 address of the object into an integer but this implementation
 technique is not required by the
 Javaâ„¢ programming language.)",int a hash code value for this object. |||,,29
<android.media.Session2Token: String toString()>,,,"Returns a string representation of the object. In general the toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the
 object is an instance the at-sign character ` @ ' and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words this method returns a string equal to the
 value of:",String a string representation of the object. |||,,29
"<android.media.Session2Token: void writeToParcel(Parcel,int)>",,,Flatten this object in to a Parcel.,void,"dest Parcel : The Parcel in which the object should be written. |||
flags int : Additional flags about how the object should be written.
May be 0 or Parcelable.PARCELABLE_WRITE_RETURN_VALUE .
Value is either 0 or a combination of Parcelable.PARCELABLE_WRITE_RETURN_VALUE and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES |||",29
<android.media.SubtitleData: byte getData()>,,,"Returns the encoded data for the subtitle content.
 Encoding format depends on the subtitle type refer to CEA 708  CEA/EIA 608 and WebVTT defined by the MIME type
 of the subtitle track.","byte[] the encoded subtitle data
 
 This value will never be null . |||",,28
<android.media.SubtitleData: long getStartTimeUs()>,,,Returns the media time at which the subtitle should be displayed expressed in microseconds.,long the display start time for the subtitle |||,,28
"<android.media.ThumbnailUtils: Bitmap createAudioThumbnail(String,int)>",,,"This method was deprecated
      in API level 29. Callers should migrate to using createAudioThumbnail(java.io.File android.util.Size android.os.CancellationSignal) as it offers more control over resizing and cancellation. Create a thumbnail for given audio file.",Bitmap This value may be null . |||,"filePath String : The audio file.
This value must never be null . |||
kind int : The desired thumbnail kind such as MediaStore.Images.Thumbnails.MINI_KIND . |||",29
<android.net.ConnectivityManager: byte getNetworkWatchlistConfigHash()>,,,"The network watchlist is a list of domains and IP addresses that are associated with
 potentially harmful apps. This method returns the SHA-256 of the watchlist config file
 currently used by the system for validation purposes.","byte[] Hash of network watchlist config file. Null if config does not exist.
 
 This value may be null . |||",,28
"<android.net.DnsResolver: void query(Network,String,int,int,Executor,CancellationSignal,Callback)>",,,"Send a DNS query with the specified name and query type get back a set of
 InetAddresses with rfc6724 sorting style asynchronously.

 The answer will be provided asynchronously through the provided Callback .",void,"network Network : Network specifying which network to query on. null for query on default network.
This value may be null . |||
domain String : domain name to query
This value must never be null . |||
nsType int : dns resource record (RR) type as one of the TYPE_* constants
Value is TYPE_A or TYPE_AAAA |||
flags int : flags as a combination of the FLAGS_* constants
Value is FLAG_EMPTY  FLAG_NO_RETRY  FLAG_NO_CACHE_STORE or FLAG_NO_CACHE_LOOKUP |||
executor Executor : The Executor that the callback should be executed on.
This value must never be null .
Callback and listener events are dispatched through this Executor providing an easy way to control which thread is
used. To dispatch events through the main thread of your
application you can use Context.getMainExecutor() .
To dispatch events through a shared thread pool you can use AsyncTask#THREAD_POOL_EXECUTOR . |||
cancellationSignal CancellationSignal : used by the caller to signal if the query should be
cancelled. May be null .
This value may be null . |||
callback Callback : a Callback which will be called to notify the caller
of the result of dns query.
This value must never be null . |||",29
"<android.net.DnsResolver: void rawQuery(Network,byte,int,Executor,CancellationSignal,Callback)>",,,"Send a raw DNS query.
 The answer will be provided asynchronously through the provided Callback .",void,"network Network : Network specifying which network to query on. null for query on default network.
This value may be null . |||
query byte : blob message to query
This value must never be null . |||
flags int : flags as a combination of the FLAGS_* constants
Value is FLAG_EMPTY  FLAG_NO_RETRY  FLAG_NO_CACHE_STORE or FLAG_NO_CACHE_LOOKUP |||
executor Executor : The Executor that the callback should be executed on.
This value must never be null .
Callback and listener events are dispatched through this Executor providing an easy way to control which thread is
used. To dispatch events through the main thread of your
application you can use Context.getMainExecutor() .
To dispatch events through a shared thread pool you can use AsyncTask#THREAD_POOL_EXECUTOR . |||
cancellationSignal CancellationSignal : used by the caller to signal if the query should be
cancelled. May be null .
This value may be null . |||
callback Callback : a Callback which will be called to notify the caller
of the result of dns query.
This value must never be null . |||",29
<android.net.InetAddresses: InetAddress parseNumericAddress(String)>,,,"Returns an InetAddress corresponding to the given numeric address (such
 as ""192.168.0.1"" or ""2001:4860:800d::68"" ). See isNumericAddress(java.lang.String) (String)} for a definition as to what constitutes a
 numeric address. This method will never do a DNS lookup.","InetAddress an InetAddress instance corresponding to the address.
 This value will never be null . |||","address String : the address to parse must be numeric.
This value must never be null . |||",29
<android.net.IpSecAlgorithm: byte getKey()>,,,Get the key for this algorithm,byte[] This value will never be null . |||,,28
<android.net.IpSecAlgorithm: String getName()>,,,Get the algorithm name,String This value will never be null . |||,,28
<android.net.IpSecAlgorithm: String toString()>,,,"Returns a string representation of the object. In general the toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the
 object is an instance the at-sign character ` @ ' and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words this method returns a string equal to the
 value of:",String This value will never be null . |||,,28
"<android.net.IpSecAlgorithm: void writeToParcel(Parcel,int)>",,,Write to parcel,void,"out Parcel : The Parcel in which the object should be written. |||
flags int : Additional flags about how the object should be written.
May be 0 or Parcelable.PARCELABLE_WRITE_RETURN_VALUE .
Value is either 0 or a combination of Parcelable.PARCELABLE_WRITE_RETURN_VALUE and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES |||",28
<android.net.IpSecManager.SecurityParameterIndex: int getSpi()>,,,Get the underlying SPI held by this object.,int |||,,28
<android.net.IpSecManager.SecurityParameterIndex: void finalize()>,,,Check that the SPI was closed properly.,void,,28
<android.net.IpSecManager.UdpEncapsulationSocket: void finalize()>,,,Check that the socket was closed properly.,void,,28
<android.net.IpSecManager: IpSecManager.SecurityParameterIndex allocateSecurityParameterIndex(InetAddress)>,,,Reserve a random SPI for traffic bound to or from the specified destination address. If successful this SPI is guaranteed available until released by a call to SecurityParameterIndex#close() .,"IpSecManager.SecurityParameterIndex the reserved SecurityParameterIndex
 This value will never be null . |||","destinationAddress InetAddress : the destination address for traffic bearing the requested SPI.
For inbound traffic the destination should be an address currently assigned on-device.
This value must never be null . |||",28
"<android.net.IpSecManager: void applyTransportModeTransform(FileDescriptor,int,IpSecTransform)>",,,"Apply an IPsec transform to a socket. This applies transport mode encapsulation to the given socket. Once applied I/O on the
 socket will be encapsulated according to the parameters of the IpSecTransform . When
 the transform is removed from the socket by calling removeTransportModeTransforms(FileDescriptor) unprotected traffic can resume on that socket. For security reasons the destination address of any traffic on the socket must match the
 remote InetAddress of the IpSecTransform . Attempts to send traffic to any
 other IP address will result in an IOException. In addition reads and writes on the socket
 will throw IOException if the user deactivates the transform (by calling IpSecTransform#close() ) without calling removeTransportModeTransforms(FileDescriptor) . Note that when applied to TCP sockets calling IpSecTransform#close() on an
 applied transform before completion of graceful shutdown may result in the shutdown sequence
 failing to complete. As such applications requiring graceful shutdown MUST close the socket
 prior to deactivating the applied transform. Socket closure may be performed asynchronously
 (in batches) so the returning of a close function does not guarantee shutdown of a socket.
 Setting an SO_LINGER timeout results in socket closure being performed synchronously and is
 sufficient to ensure shutdown.

 Specifically if the transform is deactivated (by calling IpSecTransform#close() )
 prior to the socket being closed the standard [FIN - FIN/ACK - ACK] or the reset [RST]
 packets are dropped due to the lack of a valid Transform. Similarly if a socket without the
 SO_LINGER option set is closed the delayed/batched FIN packets may be dropped. When applying a new tranform to a socket in the outbound direction the previous transform
 will be removed and the new transform will take effect immediately sending all traffic on
 the new transform; however when applying a transform in the inbound direction traffic
 on the old transform will continue to be decrypted and delivered until that transform is
 deallocated by calling IpSecTransform#close() . This overlap allows lossless rekey
 procedures where both transforms are valid until both endpoints are using the new transform
 and all in-flight packets have been received.",void,"socket FileDescriptor : a socket file descriptor
This value must never be null . |||
direction int : the direction in which the transform should be applied
Value is DIRECTION_IN or DIRECTION_OUT |||
transform IpSecTransform : a transport mode IpSecTransform This value must never be null . |||",28
"<android.net.IpSecManager: void applyTransportModeTransform(Socket,int,IpSecTransform)>",,,"Apply an IPsec transform to a stream socket. This applies transport mode encapsulation to the given socket. Once applied I/O on the
 socket will be encapsulated according to the parameters of the IpSecTransform . When
 the transform is removed from the socket by calling removeTransportModeTransforms(FileDescriptor) unprotected traffic can resume on that socket. For security reasons the destination address of any traffic on the socket must match the
 remote InetAddress of the IpSecTransform . Attempts to send traffic to any
 other IP address will result in an IOException. In addition reads and writes on the socket
 will throw IOException if the user deactivates the transform (by calling IpSecTransform#close() ) without calling removeTransportModeTransforms(FileDescriptor) . Note that when applied to TCP sockets calling IpSecTransform#close() on an
 applied transform before completion of graceful shutdown may result in the shutdown sequence
 failing to complete. As such applications requiring graceful shutdown MUST close the socket
 prior to deactivating the applied transform. Socket closure may be performed asynchronously
 (in batches) so the returning of a close function does not guarantee shutdown of a socket.
 Setting an SO_LINGER timeout results in socket closure being performed synchronously and is
 sufficient to ensure shutdown.

 Specifically if the transform is deactivated (by calling IpSecTransform#close() )
 prior to the socket being closed the standard [FIN - FIN/ACK - ACK] or the reset [RST]
 packets are dropped due to the lack of a valid Transform. Similarly if a socket without the
 SO_LINGER option set is closed the delayed/batched FIN packets may be dropped. When applying a new tranform to a socket in the outbound direction the previous transform
 will be removed and the new transform will take effect immediately sending all traffic on
 the new transform; however when applying a transform in the inbound direction traffic
 on the old transform will continue to be decrypted and delivered until that transform is
 deallocated by calling IpSecTransform#close() . This overlap allows lossless rekey
 procedures where both transforms are valid until both endpoints are using the new transform
 and all in-flight packets have been received.",void,"socket Socket : a stream socket
This value must never be null . |||
direction int : the direction in which the transform should be applied
Value is DIRECTION_IN or DIRECTION_OUT |||
transform IpSecTransform : a transport mode IpSecTransform This value must never be null . |||",28
<android.net.IpSecManager: void removeTransportModeTransforms(FileDescriptor)>,,,"Remove an IPsec transform from a socket. Once removed traffic on the socket will not be encrypted. Removing transforms from a
 socket allows the socket to be reused for communication in the clear. If an IpSecTransform object applied to this socket was deallocated by calling IpSecTransform#close() then communication on the socket will fail until this method
 is called.",void,"socket FileDescriptor : a socket that previously had a transform applied to it
This value must never be null . |||",28
<android.net.IpSecTransform.Builder: IpSecTransform.Builder setEncryption(IpSecAlgorithm)>,,,Set the encryption algorithm. Encryption is mutually exclusive with authenticated encryption.,IpSecTransform.Builder This value will never be null . |||,"algo IpSecAlgorithm : IpSecAlgorithm specifying the encryption to be applied.
This value must never be null . |||",28
<android.net.IpSecTransform: boolean equals(Object)>,,,Standard equals.,"boolean true if this object is the same as the obj
          argument; false otherwise. |||",other Object : the reference object with which to compare. |||,28
<android.net.LinkProperties: String getPrivateDnsServerName()>,,,"Returns the private DNS server name that is in use. If not null private DNS is in strict mode. In this mode applications should ensure
 that all DNS queries are encrypted and sent to this hostname and that
 queries are only sent if the hostname's certificate is valid. If null and isPrivateDnsActive() is true private
 DNS is in opportunistic mode and applications should ensure that DNS
 queries are encrypted and sent to a DNS server returned by getDnsServers() . System DNS will handle each of these cases
 correctly but applications implementing their own DNS lookups must make
 sure to follow these requirements.",String The private DNS server name. |||,,28
<android.net.LinkProperties: void clear()>,,,Clears this object to its initial state.,void,,29
<android.net.MacAddress: boolean equals(Object)>,,,"Indicates whether some other object is ""equal to"" this one. The equals method implements an equivalence relation
 on non-null object references: It is reflexive : for any non-null reference value x  x.equals(x) should return true . 
It is symmetric : for any non-null reference values x and y  x.equals(y) should return true if and only if y.equals(x) returns true . 
It is transitive : for any non-null reference values x  y and z if x.equals(y) returns true and y.equals(z) returns true then x.equals(z) should return true . 
It is consistent : for any non-null reference values x and y multiple invocations of x.equals(y) consistently return true or consistently return false provided no
     information used in equals comparisons on the
     objects is modified. 
For any non-null reference value x  x.equals(null) should return false . 
The equals method for class Object implements
 the most discriminating possible equivalence relation on objects;
 that is for any non-null reference values x and y this method returns true if and only
 if x and y refer to the same object
 ( x == y has the value true ). Note that it is generally necessary to override the hashCode method whenever this method is overridden so as to maintain the
 general contract for the hashCode method which states
 that equal objects must have equal hash codes.","boolean true if this object is the same as the obj
          argument; false otherwise. |||",o Object : the reference object with which to compare. |||,28
<android.net.MacAddress: boolean isLocallyAssigned()>,,,,boolean true if this MacAddress is a locally assigned address. |||,,28
<android.net.MacAddress: MacAddress fromString(String)>,,,"Creates a MacAddress from the given String representation. A valid String representation
 for a MacAddress is a series of 6 values in the range [0ff] printed in hexadecimal
 and joined by ':' characters.","MacAddress the MacAddress corresponding to the given String representation.
 This value will never be null . |||","addr String : a String representation of a MAC address.
This value must never be null . |||",28
<android.net.MacAddress: String toString()>,,,"Returns a string representation of the object. In general the toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the
 object is an instance the at-sign character ` @ ' and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words this method returns a string equal to the
 value of:",String This value will never be null . |||,,28
<android.net.NetworkRequest: boolean hasCapability(int)>,,,,boolean |||,capability int : Value is NetworkCapabilities.NET_CAPABILITY_MMS  NetworkCapabilities.NET_CAPABILITY_SUPL  NetworkCapabilities.NET_CAPABILITY_DUN  NetworkCapabilities.NET_CAPABILITY_FOTA  NetworkCapabilities.NET_CAPABILITY_IMS  NetworkCapabilities.NET_CAPABILITY_CBS  NetworkCapabilities.NET_CAPABILITY_WIFI_P2P  NetworkCapabilities.NET_CAPABILITY_IA  NetworkCapabilities.NET_CAPABILITY_RCS  NetworkCapabilities.NET_CAPABILITY_XCAP  NetworkCapabilities.NET_CAPABILITY_EIMS  NetworkCapabilities.NET_CAPABILITY_NOT_METERED  NetworkCapabilities.NET_CAPABILITY_INTERNET  NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED  NetworkCapabilities.NET_CAPABILITY_TRUSTED  NetworkCapabilities.NET_CAPABILITY_NOT_VPN  NetworkCapabilities.NET_CAPABILITY_VALIDATED  NetworkCapabilities.NET_CAPABILITY_CAPTIVE_PORTAL  NetworkCapabilities.NET_CAPABILITY_NOT_ROAMING  NetworkCapabilities.NET_CAPABILITY_FOREGROUND  NetworkCapabilities.NET_CAPABILITY_NOT_CONGESTED  NetworkCapabilities.NET_CAPABILITY_NOT_SUSPENDED android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID NetworkCapabilities.NET_CAPABILITY_MCX or android.net.NetworkCapabilities.NET_CAPABILITY_PARTIAL_CONNECTIVITY |||,28
<android.net.RouteInfo: boolean hasGateway()>,,,"Indicates if this route has a next hop ( true ) or is directly-connected
 ( false ).",boolean true if a gateway is specified |||,,29
<android.net.SocketKeepalive.Callback: void onStarted()>,,,The requested keepalive was successfully started.,void,,29
<android.net.SocketKeepalive: void start(int)>,,,"Request that keepalive be started with the given intervalSec . See SocketKeepalive . If the remote binder dies or the binder call throws an exception
 when invoking start or stop of the SocketKeepalive a RemoteException will be
 thrown into the executor . This is typically not important to catch because the remote
 party is the system so if it is not in shape to communicate through binder the system is
 probably going down anyway. If the caller cares regardless it can use a custom Executor to catch the RemoteException .",void,"intervalSec int : The target interval in seconds between keepalive packet transmissions.
The interval should be between 10 seconds and 3600 seconds otherwise ERROR_INVALID_INTERVAL will be returned.
Value is between MIN_INTERVAL_SEC and MAX_INTERVAL_SEC inclusive |||",29
<android.net.ssl.SSLEngines: boolean isSupportedEngine(SSLEngine)>,,,"Returns whether the given engine can be used with the methods in this class.  In general
 only engines from the platform TLS provider are supported.",boolean |||,engine SSLEngine : This value must never be null . |||,29
"<android.net.ssl.SSLEngines: void setUseSessionTickets(SSLEngine,boolean)>",,,Enables or disables the use of session tickets. This function must be called before the handshake is started or it will have no effect.,void,"engine SSLEngine : the engine
This value must never be null . |||
useSessionTickets boolean : whether to enable or disable the use of session tickets |||",29
<android.net.ssl.SSLSockets: boolean isSupportedSocket(SSLSocket)>,,,"Returns whether the given socket can be used with the methods in this class.  In general
 only sockets from the platform TLS provider are supported.",boolean |||,socket SSLSocket : This value must never be null . |||,29
<android.net.TrafficStats: void clearThreadStatsUid()>,,,"Clear any active UID set to account Socket traffic originating
 from the current thread.",void,,28
<android.net.TrafficStats: void tagFileDescriptor(FileDescriptor)>,,,"Tag the given FileDescriptor socket with any statistics
 parameters active for the current thread. Subsequent calls always replace
 any existing parameters. When finished call untagFileDescriptor(java.io.FileDescriptor) to remove statistics
 parameters.",void,fd FileDescriptor |||,28
<android.net.TrafficStats: void untagFileDescriptor(FileDescriptor)>,,,Remove any statistics parameters from the given FileDescriptor socket.,void,fd FileDescriptor |||,28
<android.net.VpnService: boolean isLockdownEnabled()>,,,"Returns whether the service is running in always-on VPN lockdown mode. In this mode the
 system ensures that the service is always running and that the apps aren't allowed to bypass
 the VPN.",boolean |||,,29
"<android.net.wifi.aware.DiscoverySessionCallback: void onServiceDiscoveredWithinRange(PeerHandle,byte,List,int)>",,,"Called when a discovery (publish or subscribe) operation results in a
 service discovery. Called when a Subscribe service was configured with a range requirement SubscribeConfig.Builder#setMinDistanceMm(int) and/or SubscribeConfig.Builder#setMaxDistanceMm(int) and the Publish service was configured
 with PublishConfig.Builder#setRangingEnabled(boolean) . If either Publisher or Subscriber does not enable Ranging or if Ranging is temporarily
 disabled by the underlying device service discovery proceeds without ranging and the onServiceDiscovered(android.net.wifi.aware.PeerHandle byte[] java.util.List) is called. Note that this method and onServiceDiscovered(android.net.wifi.aware.PeerHandle byte[] java.util.List) may be
 called multiple times per service discovery.",void,"peerHandle PeerHandle : An opaque handle to the peer matching our discovery operation. |||
serviceSpecificInfo byte : The service specific information (arbitrary
byte array) provided by the peer as part of its discovery
configuration. |||
matchFilter List : The filter which resulted in this service discovery. For PublishConfig#PUBLISH_TYPE_UNSOLICITED  SubscribeConfig#SUBSCRIBE_TYPE_PASSIVE discovery sessions this is the publisher's
match filter. For PublishConfig#PUBLISH_TYPE_SOLICITED  SubscribeConfig#SUBSCRIBE_TYPE_ACTIVE discovery sessions this
is the subscriber's match filter. |||
distanceMm int : The measured distance to the Publisher in mm. Note: the measured distance
may be negative for very close devices. |||",28
<android.net.wifi.aware.ParcelablePeerHandle: int describeContents()>,,,"Describe the kinds of special objects contained in this Parcelable
 instance's marshaled representation. For example if the object will
 include a file descriptor in the output of writeToParcel(android.os.Parcel int) the return value of this method must include the CONTENTS_FILE_DESCRIPTOR bit.","int a bitmask indicating the set of special object types marshaled
 by this Parcelable object instance.
 
 Value is either 0 or CONTENTS_FILE_DESCRIPTOR |||",,29
"<android.net.wifi.aware.ParcelablePeerHandle: void writeToParcel(Parcel,int)>",2,,Flatten this object in to a Parcel.,void,"dest Parcel : The Parcel in which the object should be written. |||
flags int : Additional flags about how the object should be written.
May be 0 or Parcelable.PARCELABLE_WRITE_RETURN_VALUE .
Value is either 0 or a combination of Parcelable.PARCELABLE_WRITE_RETURN_VALUE and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES |||",29
"<android.net.wifi.aware.WifiAwareNetworkInfo: void writeToParcel(Parcel,int)>",2,,Flatten this object in to a Parcel.,void,"dest Parcel : The Parcel in which the object should be written. |||
flags int : Additional flags about how the object should be written.
May be 0 or Parcelable.PARCELABLE_WRITE_RETURN_VALUE .
Value is either 0 or a combination of Parcelable.PARCELABLE_WRITE_RETURN_VALUE and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES |||",29
<android.net.wifi.aware.WifiAwareNetworkSpecifier.Builder: WifiAwareNetworkSpecifier.Builder setPort(int)>,,,"Configure the port number which will be used to create a connection over this link. This
 configuration should only be done on the server device e.g. the device creating the ServerSocket . Notes: The server device must be the Publisher device! 
The port information can only be specified on secure links specified using setPskPassphrase(java.lang.String) or setPmk(byte[]) .","WifiAwareNetworkSpecifier.Builder the current Builder builder enabling chaining of builder
         methods.
 
 This value will never be null . |||","port int : A positive integer indicating the port to be used for communication.
Value is between 0 and 65535 inclusive |||",29
<android.net.wifi.aware.WifiAwareNetworkSpecifier.Builder: WifiAwareNetworkSpecifier.Builder setPskPassphrase(String)>,,,"Configure the PSK Passphrase for the Wi-Fi Aware connection being requested. This method
 is optional - if not called then an Open (unencrypted) connection will be created.","WifiAwareNetworkSpecifier.Builder the current Builder builder enabling chaining of builder
         methods.
 
 This value will never be null . |||","pskPassphrase String : The (optional) passphrase to be used to encrypt the link. Use the setPmk(byte[]) to specify a PMK.
This value must never be null . |||",29
<android.net.wifi.aware.WifiAwareNetworkSpecifier.Builder: WifiAwareNetworkSpecifier.Builder setTransportProtocol(int)>,,,"Configure the transport protocol which will be used to create a connection over this
 link. This configuration should only be done on the server device e.g. the device
 creating the ServerSocket for TCP. Notes: The server device must be the Publisher device! 
The transport protocol information can only be specified on secure links
     specified using setPskPassphrase(java.lang.String) or setPmk(byte[]) .","WifiAwareNetworkSpecifier.Builder the current Builder builder enabling chaining of builder
         methods.
 
 This value will never be null . |||","transportProtocol int : The transport protocol to be used for communication.
Value is between 0 and 255 inclusive |||",29
<android.net.wifi.p2p.WifiP2pConfig.Builder: WifiP2pConfig.Builder setGroupOperatingFrequency(int)>,,,"Specify the frequency in MHz to use for creating the group or joining the group. When creating a group as Group Owner using WifiP2pManager#createGroup(
 WifiP2pManager.Channel WifiP2pConfig WifiP2pManager.ActionListener) specifying a frequency only allows the system to pick the specified frequency.
 If the Group Owner cannot create a group at the specified frequency
 the operation will fail.
 When not specifying a frequency it allows the system to pick operating frequency
 from all supported bands. When joining a group as Group Client using WifiP2pManager#connect(
 WifiP2pManager.Channel WifiP2pConfig WifiP2pManager.ActionListener) specifying a frequency only allows the system to scan the specified frequency.
 If the frequency is not supported or invalid the operation will fail.
 When not specifying a frequency it allows the system to scan all supported
 frequencies to find the desired group. setGroupOperatingBand(int) and setGroupOperatingFrequency(int) are
     mutually exclusive. Setting operating band and frequency both is invalid. Optional. 0 by default.","WifiP2pConfig.Builder The builder to facilitate chaining builder.setXXX(..).setXXX(..) .
 
 This value will never be null . |||",frequency int : the operating frequency of the group. |||,29
<android.net.wifi.p2p.WifiP2pGroup: int getFrequency()>,,,Get the operating frequency (in MHz) of the p2p group,int |||,,29
"<android.net.wifi.p2p.WifiP2pManager: void requestDiscoveryState(WifiP2pManager.Channel,WifiP2pManager.DiscoveryStateListener)>",,,"Request p2p discovery state. This state indicates whether p2p discovery has started or stopped.
 The valid value is one of WIFI_P2P_DISCOVERY_STARTED or WIFI_P2P_DISCOVERY_STOPPED . The state is returned using the DiscoveryStateListener listener. This state is also included in the WIFI_P2P_DISCOVERY_CHANGED_ACTION broadcast event with extra EXTRA_DISCOVERY_STATE .",void,"c WifiP2pManager.Channel : is the channel created at initialize(Context Looper WifiP2pManager.ChannelListener) .
This value must never be null . |||
listener WifiP2pManager.DiscoveryStateListener : for callback when discovery state is available..
This value must never be null . |||",29
"<android.net.wifi.p2p.WifiP2pManager: void requestP2pState(WifiP2pManager.Channel,WifiP2pManager.P2pStateListener)>",,,"Request p2p enabled state. This state indicates whether Wi-Fi p2p is enabled or disabled.
 The valid value is one of WIFI_P2P_STATE_DISABLED or WIFI_P2P_STATE_ENABLED . The state is returned using the P2pStateListener listener. This state is also included in the WIFI_P2P_STATE_CHANGED_ACTION broadcast event with extra EXTRA_WIFI_STATE .",void,"c WifiP2pManager.Channel : is the channel created at initialize(Context Looper WifiP2pManager.ChannelListener) .
This value must never be null . |||
listener WifiP2pManager.P2pStateListener : for callback when p2p state is available..
This value must never be null . |||",29
<android.net.wifi.rtt.RangingRequest.Builder: RangingRequest.Builder addAccessPoint(ScanResult)>,,,"Add the device specified by the ScanResult to the list of devices with
 which to measure range. The total number of peers added to a request cannot exceed the
 limit specified by RangingRequest.getMaxPeers() . Ranging may not be supported if the Access Point does not support IEEE 802.11mc. Use ScanResult#is80211mcResponder() to verify the Access Point's capabilities. If
 not supported the result status will be RangingResult#STATUS_RESPONDER_DOES_NOT_SUPPORT_IEEE80211MC .",RangingRequest.Builder The builder to facilitate chaining builder.setXXX(..).setXXX(..) . |||,"apInfo ScanResult : Information of an Access Point (AP) obtained in a Scan Result.
This value must never be null . |||",28
<android.net.wifi.rtt.RangingRequest: int getMaxPeers()>,,,"Returns the maximum number of peers to range which can be specified in a single RangingRequest . The limit applies no matter how the peers are added to the request e.g.
 through RangingRequest.Builder#addAccessPoint(ScanResult) or RangingRequest.Builder#addAccessPoints(List) .",int Maximum number of peers. |||,,28
<android.net.wifi.rtt.RangingResult: int getDistanceStdDevMm()>,,,,"int The standard deviation of the measured distance (in mm) to the device specified by getMacAddress() or getPeerHandle() . The standard deviation is calculated
 over the measurements executed in a single RTT burst. The number of measurements is returned
 by getNumSuccessfulMeasurements() - 0 successful measurements indicate that the
 standard deviation is not valid (a valid standard deviation requires at least 2 data points). Only valid if getStatus() returns STATUS_SUCCESS otherwise will throw an
 exception. |||",,28
<android.net.wifi.rtt.RangingResult: int getNumAttemptedMeasurements()>,,,,"int The number of attempted measurements used in the RTT exchange resulting in this set
 of results. The number of successful measurements is returned by getNumSuccessfulMeasurements() which at most if there are no errors will be 1 less
 that the number of attempted measurements. Only valid if getStatus() returns STATUS_SUCCESS otherwise will throw an
 exception. |||",,28
<android.net.wifi.rtt.RangingResult: int getNumSuccessfulMeasurements()>,,,,"int The number of successful measurements used to calculate the distance and standard
 deviation. If the number of successful measurements if 1 then then standard deviation
 returned by getDistanceStdDevMm() is not valid (a 0 is returned for the standard
 deviation). The total number of measurement attempts is returned by getNumAttemptedMeasurements() . The number of successful measurements will be at
 most 1 less then the number of attempted measurements. Only valid if getStatus() returns STATUS_SUCCESS otherwise will throw an
 exception. |||",,28
<android.net.wifi.rtt.RangingResult: MacAddress getMacAddress()>,,,,"MacAddress The MAC address of the device whose range measurement was requested. Will correspond
 to the MAC address of the device in the RangingRequest . Will return a null for results corresponding to requests issued using a PeerHandle i.e. using the RangingRequest.Builder#addWifiAwarePeer(PeerHandle) API. |||",,28
<android.net.wifi.rtt.ResponderLocation: boolean isLciSubelementValid()>,,,,"boolean true if the LCI subelement (containing Latitude Longitude and Altitude) is valid. This method tells us if the responder has provided its Location Configuration
 Information (LCI) directly and is useful when an external database of responder locations
 is not available If isLciSubelementValid() returns true all the LCI values provided by the corresponding
 getter methods will have been set as described by the responder or else if false they
 should not be used and will throw an IllegalStateException. |||",,29
<android.net.wifi.rtt.ResponderLocation: boolean isZaxisSubelementValid()>,,,,boolean if the Z subelement (containing mobility Floor Height above floor) is valid. |||,,29
<android.net.wifi.rtt.ResponderLocation: double getAltitudeUncertainty()>,,,,double the Altitude uncertainty in meters. Only valid if isLciSubelementValid() returns true or will throw an exception. An unknown uncertainty is indicated by 0. |||,,29
<android.net.wifi.rtt.ResponderLocation: double getFloorNumber()>,1,,,"double the Z sub element Floor Number. Only valid if isZaxisSubelementValid() returns true or will throw an exception. Note: this number can be positive or negative with value increments of +/- 1/16 of a
 floor. . |||",,29
<android.net.wifi.rtt.ResponderLocation: double getLatitudeUncertainty()>,,,,double the latitude uncertainty in degrees. Only valid if isLciSubelementValid() returns true or will throw an exception. An unknown uncertainty is indicated by 0. |||,,29
<android.net.wifi.rtt.ResponderLocation: double getLongitude()>,,,,double the Longitude in degrees.. Only valid if isLciSubelementValid() returns true or will throw an exception. |||,,29
<android.net.wifi.rtt.ResponderLocation: double getLongitudeUncertainty()>,,,,double the Longitude uncertainty in degrees. Only valid if isLciSubelementValid() returns true or will throw an exception. An unknown uncertainty is indicated by 0. |||,,29
<android.net.wifi.rtt.ResponderLocation: SparseArray toCivicLocationSparseArray()>,,,,SparseArray < String > the civic location represented as a SparseArray Valid keys to access the SparseArray can be found in CivicLocationKeys . Will return a null when there is no Civic Location defined. |||,,29
<android.net.wifi.rtt.ResponderLocation: String getMapImageMimeType()>,,,,"String the Map Image file Mime type referred to by getMapImageUrl().
 
 This value may be null . |||",,29
<android.net.wifi.WifiConfiguration: MacAddress getRandomizedMacAddress()>,,,"Returns MAC address set to be the local randomized MAC address.
 Depending on user preference the device may or may not use the returned MAC address for
 connections to this network. Information is restricted to Device Owner Profile Owner and Carrier apps
 (which will only obtain addresses for configurations which they create). Other callers
 will receive a default ""02:00:00:00:00:00"" MAC address.",MacAddress This value will never be null . |||,,29
<android.net.wifi.WifiInfo: int getTxLinkSpeedMbps()>,,,Returns the current transmit link speed in Mbps.,"int the Tx link speed or LINK_SPEED_UNKNOWN if link speed is unknown.
 Value is -1 or greater |||",,29
<android.net.wifi.WifiInfo: String getPasspointProviderFriendlyName()>,,,"Returns the Provider Friendly Name of the network if it is a Passpoint network. The Provider Friendly Name may be null if no network currently connected currently connected network is not
 passpoint network or the caller has insufficient permissions to access the Provider Friendly
 Name.",String |||,,29
<android.net.wifi.WifiManager: boolean isEasyConnectSupported()>,,,"Wi-Fi Easy Connect (DPP) introduces standardized mechanisms to simplify the provisioning and
 configuration of Wi-Fi devices.
 For more details visit https://www.wi-fi.org/ and
 search for ""Easy Connect"" or ""Device Provisioning Protocol specification"".",boolean true if this device supports Wi-Fi Easy-connect (Device Provisioning Protocol) |||,,29
<android.net.wifi.WifiManager: boolean isWpa3SaeSupported()>,,,,boolean true if this device supports WPA3-Personal SAE |||,,29
<android.net.wifi.WifiManager: boolean isWpa3SuiteBSupported()>,,,,boolean true if this device supports WPA3-Enterprise Suite-B-192 |||,,29
<android.net.wifi.WifiManager: int addNetworkSuggestions(List)>,,,"Provide a list of network suggestions to the device. See WifiNetworkSuggestion for a detailed explanation of the parameters.
 When the device decides to connect to one of the provided network suggestions platform sends
 a directed broadcast ACTION_WIFI_NETWORK_SUGGESTION_POST_CONNECTION to the app if
 the network was created with WifiNetworkSuggestion.Builder flag set and the app holds ACCESS_FINE_LOCATION permission. NOTE:","int Status code for the operation. One of the STATUS_NETWORK_SUGGESTIONS_ values.
 Value is STATUS_NETWORK_SUGGESTIONS_SUCCESS  STATUS_NETWORK_SUGGESTIONS_ERROR_INTERNAL  STATUS_NETWORK_SUGGESTIONS_ERROR_APP_DISALLOWED  STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_DUPLICATE  STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_EXCEEDS_MAX_PER_APP  STATUS_NETWORK_SUGGESTIONS_ERROR_REMOVE_INVALID  STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_NOT_ALLOWED or STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_INVALID |||","networkSuggestions List : List of network suggestions provided by the app.
This value must never be null . |||",29
<android.net.wifi.WifiManager: int getMaxNumberOfNetworkSuggestionsPerApp()>,,,Returns the max number of network suggestions that are allowed per app on the device.,int |||,,29
<android.net.wifi.WifiManager: int removeNetworkSuggestions(List)>,,,"Remove some or all of the network suggestions that were previously provided by the app.
 If one of the suggestions being removed was used to establish connection to the current
 network then the device will immediately disconnect from that network.

 See WifiNetworkSuggestion for a detailed explanation of the parameters.
 See WifiNetworkSuggestion#equals(Object) for the equivalence evaluation used. Requires Manifest.permission.CHANGE_WIFI_STATE","int Status code for the operation. One of the STATUS_NETWORK_SUGGESTIONS_ values.
 Any matching suggestions are removed from the device and will not be considered for any
 further connection attempts.
 
 Value is STATUS_NETWORK_SUGGESTIONS_SUCCESS  STATUS_NETWORK_SUGGESTIONS_ERROR_INTERNAL  STATUS_NETWORK_SUGGESTIONS_ERROR_APP_DISALLOWED  STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_DUPLICATE  STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_EXCEEDS_MAX_PER_APP  STATUS_NETWORK_SUGGESTIONS_ERROR_REMOVE_INVALID  STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_NOT_ALLOWED or STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_INVALID |||","networkSuggestions List : List of network suggestions to be removed. Pass an empty list
to remove all the previous suggestions provided by the app.
This value must never be null . |||",29
<android.net.wifi.WifiNetworkSpecifier.Builder: WifiNetworkSpecifier.Builder setIsEnhancedOpen(boolean)>,,,Specifies whether this represents an Enhanced Open (OWE) network.,"WifiNetworkSpecifier.Builder Instance of Builder to enable chaining of the builder method.
 
 This value will never be null . |||",isEnhancedOpen boolean : true to indicate that the network uses enhanced open false otherwise. |||,29
<android.net.wifi.WifiNetworkSpecifier.Builder: WifiNetworkSpecifier.Builder setWpa2Passphrase(String)>,,,"Set the ASCII WPA2 passphrase for this network. Needed for authenticating to
 WPA2-PSK networks.","WifiNetworkSpecifier.Builder Instance of Builder to enable chaining of the builder method.
 This value will never be null . |||","passphrase String : passphrase of the network.
This value must never be null . |||",29
<android.net.wifi.WifiNetworkSpecifier: String toString()>,,,"Returns a string representation of the object. In general the toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the
 object is an instance the at-sign character ` @ ' and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words this method returns a string equal to the
 value of:",String a string representation of the object. |||,,29
<android.net.wifi.WifiNetworkSuggestion.Builder: WifiNetworkSuggestion.Builder setIsEnhancedOpen(boolean)>,,,Specifies whether this represents an Enhanced Open (OWE) network.,"WifiNetworkSuggestion.Builder Instance of Builder to enable chaining of the builder method.
 
 This value will never be null . |||",isEnhancedOpen boolean : true to indicate that the network used enhanced open false otherwise. |||,29
<android.net.wifi.WifiNetworkSuggestion.Builder: WifiNetworkSuggestion.Builder setSsid(String)>,2,,Set the unicode SSID for the network.,"WifiNetworkSuggestion.Builder Instance of Builder to enable chaining of the builder method.
 This value will never be null . |||","ssid String : The SSID of the network. It must be valid Unicode.
This value must never be null . |||",29
<android.net.wifi.WifiNetworkSuggestion.Builder: WifiNetworkSuggestion.Builder setWpa3EnterpriseConfig(WifiEnterpriseConfig)>,,,"Set the associated enterprise configuration for this network. Needed for authenticating
 to WPA3-SuiteB networks. See WifiEnterpriseConfig for description.","WifiNetworkSuggestion.Builder Instance of Builder to enable chaining of the builder method.
 
 This value will never be null . |||","enterpriseConfig WifiEnterpriseConfig : Instance of WifiEnterpriseConfig .
This value must never be null . |||",29
<android.net.wifi.WifiNetworkSuggestion.Builder: WifiNetworkSuggestion.Builder setWpa3Passphrase(String)>,,,"Set the ASCII WPA3 passphrase for this network. Needed for authenticating to WPA3-SAE
 networks.","WifiNetworkSuggestion.Builder Instance of Builder to enable chaining of the builder method.
 This value will never be null . |||","passphrase String : passphrase of the network.
This value must never be null . |||",29
<android.net.wifi.WifiNetworkSuggestion: int describeContents()>,3,,"Describe the kinds of special objects contained in this Parcelable
 instance's marshaled representation. For example if the object will
 include a file descriptor in the output of writeToParcel(android.os.Parcel int) the return value of this method must include the CONTENTS_FILE_DESCRIPTOR bit.","int a bitmask indicating the set of special object types marshaled
 by this Parcelable object instance.
 
 Value is either 0 or CONTENTS_FILE_DESCRIPTOR |||",,29
<android.net.wifi.WifiNetworkSuggestion: int hashCode()>,,,"Returns a hash code value for the object. This method is
 supported for the benefit of hash tables such as those provided by HashMap . The general contract of hashCode is: Whenever it is invoked on the same object more than once during
     an execution of a Java application the hashCode method
     must consistently return the same integer provided no information
     used in equals comparisons on the object is modified.
     This integer need not remain consistent from one execution of an
     application to another execution of the same application. 
If two objects are equal according to the equals(Object) method then calling the hashCode method on each of
     the two objects must produce the same integer result. 
It is not required that if two objects are unequal
     according to the equals(java.lang.Object) method then calling the hashCode method on each of the
     two objects must produce distinct integer results.  However the
     programmer should be aware that producing distinct integer results
     for unequal objects may improve the performance of hash tables. 
As much as is reasonably practical the hashCode method defined by
 class Object does return distinct integers for distinct
 objects. (This is typically implemented by converting the internal
 address of the object into an integer but this implementation
 technique is not required by the
 Javaâ„¢ programming language.)",int a hash code value for this object. |||,,29
<android.net.wifi.WifiNetworkSuggestion: String toString()>,,,"Returns a string representation of the object. In general the toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the
 object is an instance the at-sign character ` @ ' and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words this method returns a string equal to the
 value of:",String a string representation of the object. |||,,29
"<android.net.wifi.WifiNetworkSuggestion: void writeToParcel(Parcel,int)>",3,,Flatten this object in to a Parcel.,void,"dest Parcel : The Parcel in which the object should be written. |||
flags int : Additional flags about how the object should be written.
May be 0 or Parcelable.PARCELABLE_WRITE_RETURN_VALUE .
Value is either 0 or a combination of Parcelable.PARCELABLE_WRITE_RETURN_VALUE and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES |||",29
"<android.nfc.cardemulation.CardEmulation: boolean setOffHostForService(ComponentName,String)>",3,,"Sets the off-host Secure Element for the given service. If off-host SE was initially set (either statically
 through the manifest or dynamically by using this API)
 it will be replaced with this one. All AIDs registered by
 this service will be re-routed to this Secure Element if
 successful. AIDs that was statically assigned using manifest
 will re-route to off-host SE that stated in manifest after NFC
 toggle. Note that you can only set off-host SE for a service that
 is running under the same UID as the caller of this API. Typically
 this means you need to call this from the same
 package as the service itself though UIDs can also
 be shared between packages using shared UIDs. Registeration will be successful only if the Secure Element
 exists on the device. Requires Manifest.permission.NFC","boolean whether the registration was successful.
 
 This value will never be null . |||","service ComponentName : The component name of the service
This value must never be null . |||
offHostSecureElement String : Secure Element to register the AID to. Only accept strings with
prefix SIM or prefix eSE.
Ref: GSMA TS.26 - NFC Handset Requirements
TS26_NFC_REQ_069: For UICC Secure Element Name SHALL be
SIM[smartcard slot]
(e.g. SIM/SIM1 SIM2â€¦ SIMn).
TS26_NFC_REQ_070: For embedded SE Secure Element Name SHALL be
eSE[number]
(e.g. eSE/eSE1 eSE2 etc.).
This value must never be null . |||",29
"<android.opengl.EGL15: boolean eglDestroySync(EGLDisplay,EGLSync)>",3,,,boolean |||,"dpy EGLDisplay |||
sync EGLSync |||",29
"<android.opengl.EGL15: int eglClientWaitSync(EGLDisplay,EGLSync,int,long)>",3,,,int |||,"dpy EGLDisplay |||
sync EGLSync |||
flags int |||
timeout long |||",29
<android.os.Build.Partition: int hashCode()>,,,"Returns a hash code value for the object. This method is
 supported for the benefit of hash tables such as those provided by HashMap . The general contract of hashCode is: Whenever it is invoked on the same object more than once during
     an execution of a Java application the hashCode method
     must consistently return the same integer provided no information
     used in equals comparisons on the object is modified.
     This integer need not remain consistent from one execution of an
     application to another execution of the same application. 
If two objects are equal according to the equals(Object) method then calling the hashCode method on each of
     the two objects must produce the same integer result. 
It is not required that if two objects are unequal
     according to the equals(java.lang.Object) method then calling the hashCode method on each of the
     two objects must produce distinct integer results.  However the
     programmer should be aware that producing distinct integer results
     for unequal objects may improve the performance of hash tables. 
As much as is reasonably practical the hashCode method defined by
 class Object does return distinct integers for distinct
 objects. (This is typically implemented by converting the internal
 address of the object into an integer but this implementation
 technique is not required by the
 Javaâ„¢ programming language.)",int a hash code value for this object. |||,,29
<android.os.Build.Partition: long getBuildTimeMillis()>,,,The time (ms since epoch) at which this partition was built see Build#TIME .,long |||,,29
<android.os.Build.Partition: String getFingerprint()>,1,,The build fingerprint of this partition see Build#FINGERPRINT .,String This value will never be null . |||,,29
<android.os.Build: List getFingerprintedPartitions()>,,,"Get build information about partitions that have a separate fingerprint defined.

 The list includes partitions that are suitable candidates for over-the-air updates. This is
 not an exhaustive list of partitions on the device.",List < Build.Partition > This value will never be null . |||,,29
"<android.os.Debug: void attachJvmtiAgent(String,String,ClassLoader)>",,,"Attach a library as a jvmti agent to the current runtime with the given classloader
 determining the library search path. Note: agents may only be attached to debuggable apps. Otherwise this function will
 throw a SecurityException.",void,"library String : the library containing the agent.
This value must never be null . |||
options String : the options passed to the agent.
This value may be null . |||
classLoader ClassLoader : the classloader determining the library search path.
This value may be null . |||",28
"<android.os.FileUtils: long copy(InputStream,OutputStream,CancellationSignal,Executor,FileUtils.ProgressListener)>",,,"Copy the contents of one stream to another. Attempts to use several optimization strategies to copy the data in the
 kernel before falling back to a userspace copy as a last resort.",long number of bytes copied. |||,"in InputStream : This value must never be null . |||
out OutputStream : This value must never be null . |||
signal CancellationSignal : to signal if the copy should be cancelled early.
This value may be null . |||
executor Executor : that listener events should be delivered via.
This value may be null . |||
listener FileUtils.ProgressListener : to be periodically notified as the copy progresses.
This value may be null . |||",29
<android.os.FileUtils: void closeQuietly(AutoCloseable)>,3,,"This method was deprecated
      in API level R. This method may suppress potentially significant exceptions particularly when
   closing writable resources. With a writable resource a failure thrown from close() should be considered as significant as a failure thrown from a write method because it may
   indicate a failure to flush bytes to the underlying resource. Closes the given object quietly ignoring any checked exceptions. Does
 nothing if the given object is null .",void,closeable AutoCloseable : This value may be null . |||,29
<android.os.FileUtils: void closeQuietly(FileDescriptor)>,3,,"This method was deprecated
      in API level R. This method may suppress potentially significant exceptions particularly when
   closing writable resources. With a writable resource a failure thrown from close() should be considered as significant as a failure thrown from a write method because it may
   indicate a failure to flush bytes to the underlying resource. Closes the given object quietly ignoring any checked exceptions. Does
 nothing if the given object is null .",void,fd FileDescriptor : This value may be null . |||,29
<android.os.Handler: Handler createAsync(Looper)>,3,,"Create a new Handler whose posted messages and runnables are not subject to
 synchronization barriers such as display vsync. Messages sent to an async handler are guaranteed to be ordered with respect to one another
 but not necessarily with respect to messages from other Handlers.","Handler a new async Handler instance
 
 This value will never be null . |||","looper Looper : the Looper that the new Handler should be bound to
This value must never be null . |||",28
<android.os.LocaleList: boolean isPseudoLocale(ULocale)>,3,,Returns true if locale is a pseudo-locale false otherwise.,boolean |||,locale ULocale : This value may be null . |||,29
<android.os.Parcel: SparseArray createTypedSparseArray(Creator)>,,,"Read into a new SparseArray items containing a particular object type
 that were written with writeTypedSparseArray(android.util.SparseArray int) at the
 current dataPosition().  The list must have previously been written
 via writeTypedSparseArray(android.util.SparseArray int) with the same object type.","SparseArray <T> A newly created SparseArray containing objects with the same data
         as those that were previously written.

 This value may be null . |||","creator Creator : The creator to use when for instantiation.
This value must never be null . |||",29
"<android.os.Parcel: void writeTypedSparseArray(SparseArray,int)>",2,,"Flatten a SparseArray containing a particular object type into the parcel
 at the current dataPosition() and growing dataCapacity() if needed. The
 type of the objects in the array must be one that implements Parcelable.
 Unlike the generic writeSparseArray(android.util.SparseArray) method however only
 the raw data of the objects is written and not their type so you must use the
 corresponding createTypedSparseArray(android.os.Parcelable.Creator) .",void,"val SparseArray : The list of objects to be written.
This value may be null . |||
parcelableFlags int : The parcelable flags to use. |||",29
<android.os.PowerManager: int getCurrentThermalStatus()>,3,,This function returns the current thermal status of the device.,"int thermal status as int THERMAL_STATUS_NONE if device in not under
 thermal throttling.
 
 Value is THERMAL_STATUS_NONE  THERMAL_STATUS_LIGHT  THERMAL_STATUS_MODERATE  THERMAL_STATUS_SEVERE  THERMAL_STATUS_CRITICAL  THERMAL_STATUS_EMERGENCY or THERMAL_STATUS_SHUTDOWN |||",,29
"<android.os.PowerManager: void addThermalStatusListener(Executor,PowerManager.OnThermalStatusChangedListener)>",3,,This function adds a listener for thermal status change.,void,"executor Executor : Executor to handle listener callback.
This value must never be null .
Callback and listener events are dispatched through this Executor providing an easy way to control which thread is
used. To dispatch events through the main thread of your
application you can use Context.getMainExecutor() .
To dispatch events through a shared thread pool you can use AsyncTask#THREAD_POOL_EXECUTOR . |||
listener PowerManager.OnThermalStatusChangedListener : listener to be added.
This value must never be null . |||",29
<android.os.PowerManager: void removeThermalStatusListener(PowerManager.OnThermalStatusChangedListener)>,,,This function removes a listener for thermal status change,void,"listener PowerManager.OnThermalStatusChangedListener : listener to be removed
This value must never be null . |||",29
<android.os.Process: boolean isIsolated()>,,,Returns whether the current process is in an isolated sandbox.,boolean |||,,28
<android.os.StrictMode.VmPolicy.Builder: StrictMode.VmPolicy.Builder detectImplicitDirectBoot()>,,,"Detect any implicit reliance on Direct Boot automatic filtering
 of PackageManager values. Violations are only triggered
 when implicit calls are made while the user is locked. Apps becoming Direct Boot aware need to carefully inspect each
 query site and explicitly decide which combination of flags they
 want to use: PackageManager#MATCH_DIRECT_BOOT_AWARE 
PackageManager#MATCH_DIRECT_BOOT_UNAWARE 
PackageManager#MATCH_DIRECT_BOOT_AUTO",StrictMode.VmPolicy.Builder This value will never be null . |||,,29
"<android.os.UserManager: boolean requestQuietModeEnabled(boolean,UserHandle)>",,,"Enables or disables quiet mode for a managed profile. If quiet mode is enabled apps in a
 managed profile don't run generate notifications or consume data or battery. If a user's credential is needed to turn off quiet mode a confirm credential screen will be
 shown to the user. The change may not happen instantly however apps can listen for Intent#ACTION_MANAGED_PROFILE_AVAILABLE and Intent#ACTION_MANAGED_PROFILE_UNAVAILABLE broadcasts in order to be notified of
 the change of the quiet mode. Apps can also check the current state of quiet mode by
 calling isQuietModeEnabled(android.os.UserHandle) . The caller must either be the foreground default launcher or have one of these permissions: MANAGE_USERS or MODIFY_QUIET_MODE .",boolean false if user's credential is needed in order to turn off quiet mode true otherwise |||,"enableQuietMode boolean : whether quiet mode should be enabled or disabled |||
userHandle UserHandle : user handle of the profile
This value must never be null . |||",28
"<android.provider.DocumentsContract: boolean isRootsUri(Context,Uri)>",,,"Test if the given URI represents all roots of the authority
 backed by DocumentsProvider .",boolean |||,"context Context : This value must never be null . |||
uri Uri : This value may be null . |||",29
<android.provider.MediaStore: Uri setIncludePending(Uri)>,,,"This method was deprecated
      in API level R. consider migrating to QUERY_ARG_MATCH_PENDING which
             is more expressive. Update the given Uri to also include any pending media items from
 calls such as ContentResolver#query(Uri String[] Bundle CancellationSignal) .
 By default no pending items are returned.",Uri This value will never be null . |||,uri Uri : This value must never be null . |||,29
<android.provider.MediaStore: Uri setRequireOriginal(Uri)>,,,"Update the given Uri to indicate that the caller requires the
 original file contents when calling ContentResolver#openFileDescriptor(Uri String) . This can be useful when the caller wants to ensure they're backing up the
 exact bytes of the underlying media without any Exif redaction being
 performed. If the original file contents cannot be provided a UnsupportedOperationException will be thrown when the returned Uri is used such as when the caller doesn't hold Manifest.permission.ACCESS_MEDIA_LOCATION .",Uri This value will never be null . |||,uri Uri : This value must never be null . |||,29
<android.se.omapi.Channel: boolean isBasicChannel()>,,,Returns a boolean telling if this channel is the basic channel.,"boolean true if this channel is a basic channel. false if
         this channel is a logical channel. |||",,28
<android.se.omapi.Channel: boolean isOpen()>,,,Tells if this channel is open.,boolean false if the channel is closed or in case of an error. true otherwise. |||,,28
<android.se.omapi.Channel: byte transmit(byte)>,,,"Transmit an APDU command (as per ISO/IEC 7816-4) to the Secure Element. The
 underlying layers generate as many TPDUs as necessary to transport this APDU. The
 API shall ensure that all available data returned from Secure Element including
 concatenated responses are retrieved and made available to the calling application. If a
 warning status code is received the API wont check for further response data but will
 return all data received so far and the warning status code. The transport part is invisible from the application. The generated response is the
 response of the APDU which means that all protocols related responses are handled
 inside the API or the underlying implementation. The transmit method shall support extended length APDU commands independently of
 the coding within the ATR. For status word '61 XX' the API or underlying implementation shall issue a GET
 RESPONSE command as specified by ISO 7816-4 standard with LE=XX; for the status
 word '6C XX' the API or underlying implementation shall reissue the input command
 with LE=XX. For other status words the API (or underlying implementation) shall return
 the complete response including data and status word to the device application. The API
 (or underlying implementation) shall not handle internally the received status words. The
 channel shall not be closed even if the Secure Element answered with an error code.
 The system ensures the synchronization between all the concurrent calls to this method
 and that only one APDU will be sent at a time irrespective of the number of TPDUs that
 might be required to transport it to the SE. The entire APDU communication to this SE is
 locked to the APDU. The channel information in the class byte in the APDU will be ignored. The system will
 add any required information to ensure the APDU is transported on this channel.
 The only restrictions on the set of commands that can be sent is defined below the API
 implementation shall be able to send all other commands: MANAGE_CHANNEL commands are not allowed. 
SELECT by DF Name (p1=04) are not allowed. 
CLA bytes with channel numbers are de-masked.","byte[] the response received as a byte array. The returned byte array contains the data
 bytes in the following order:
 [<first data byte> ... <last data byte> <sw1> <sw2>]

 This value will never be null . |||","command byte : the APDU command to be transmitted as a byte array.
This value must never be null . |||",28
<android.se.omapi.Channel: void close()>,,,"Closes this channel to the Secure Element. If the method is called when
 the channel is already closed this method will be ignored. The close()
 method shall wait for completion of any pending transmit(byte[] command)
 before closing the channel.",void,,28
<android.se.omapi.Reader: String getName()>,,,"Return the name of this reader. If this reader is a SIM reader then its name must be ""SIM[Slot]"". 
If the reader is a SD or micro SD reader then its name must be ""SD[Slot]"" 
If the reader is a embedded SE reader then its name must be ""eSE[Slot]""","String the reader name as a String.
 
 This value will never be null . |||",,28
<android.se.omapi.SEService: void shutdown()>,,,"Releases all Secure Elements resources allocated by this SEService
 (including any binding to an underlying service).
 As a result isConnected() will return false after shutdown() was called.
 After this method call the SEService object is not connected.
 This method should be called when connection to the Secure Element is not needed
 or in the termination method of the calling application
 (or part of this application) which is bound to this SEService.",void,,28
<android.se.omapi.Session: byte getATR()>,,,"Get the Answer to Reset of this Secure Element. The returned byte array can be null if the ATR for this Secure Element is
 not available.",byte[] the ATR as a byte array or null. |||,,28
<android.se.omapi.Session: Channel openBasicChannel(byte)>,,,"This method is provided to ease the development of mobile application and for compliancy
 with existing applications.
 This method is equivalent to openBasicChannel(aid P2=0x00)",Channel an instance of Channel if available or null. |||,"aid byte : the AID of the Applet to be selected on this channel as a
byte array or null if no Applet is to be selected.
This value may be null . |||",28
<android.se.omapi.Session: Channel openLogicalChannel(byte)>,,,"This method is provided to ease the development of mobile application and for compliancy
 with existing applications.
 This method is equivalent to openLogicalChannel(aid P2=0x00)","Channel an instance of Channel. Null if the Secure Element is unable to
         provide a new logical channel.
 
 This value may be null . |||","aid byte : the AID of the Applet to be selected on this channel as a
byte array.
This value may be null . |||",28
<android.se.omapi.Session: void close()>,,,"Close the connection with the Secure Element. This will close any
 channels opened by this application with this Secure Element.",void,,28
<android.security.AttestedKeyPair: KeyPair getKeyPair()>,,,"Returns the generated key pair associated with the attestation record
 in this instance.",KeyPair This value may be null . |||,,28
<android.security.ConfirmationCallback: void onCanceled()>,,,Called when the requested prompt was dismissed by the application.,void,,28
<android.security.ConfirmationCallback: void onError(Throwable)>,,,Called when the requested prompt was dismissed because of a low-level error.,void,e Throwable : a throwable representing the error. |||,28
<android.security.ConfirmationPrompt.Builder: ConfirmationPrompt.Builder setExtraData(byte)>,3,,Sets the extra data for the prompt.,ConfirmationPrompt.Builder the builder. |||,extraData byte : data to include in the response data. |||,28
<android.security.ConfirmationPrompt.Builder: ConfirmationPrompt.Builder setPromptText(CharSequence)>,3,,Sets the prompt text for the prompt.,ConfirmationPrompt.Builder the builder. |||,promptText CharSequence : the text to present in the prompt. |||,28
<android.security.ConfirmationPrompt: void cancelPrompt()>,3,,"Cancels a prompt currently being displayed.

 On success the ConfirmationCallback#onCanceled method on
 the supplied callback object will be called asynchronously.",void,,28
<android.security.keystore.KeyGenParameterSpec.Builder: KeyGenParameterSpec.Builder setUserConfirmationRequired(boolean)>,,,"Sets whether this key is authorized to be used only for messages confirmed by the
 user.

 Confirmation is separate from user authentication (see setUserAuthenticationRequired(boolean) ). Keys can be created that require
 confirmation but not user authentication or user authentication but not confirmation
 or both. Confirmation verifies that some user with physical possession of the device has
 approved a displayed message. User authentication verifies that the correct user is
 present and has authenticated. This authorization applies only to secret key and private key operations. Public key
 operations are not restricted.

 See ConfirmationPrompt class for
 more details about user confirmations.",KeyGenParameterSpec.Builder This value will never be null . |||,required boolean |||,28
<android.security.keystore.KeyGenParameterSpec.Builder: KeyGenParameterSpec.Builder setUserPresenceRequired(boolean)>,,,"Sets whether a test of user presence is required to be performed between the Signature.initSign() and Signature.sign() method calls.
 It requires that the KeyStore implementation have a direct way to validate the user
 presence for example a KeyStore hardware backed strongbox can use a button press that
 is observable in hardware. A test for user presence is tangential to authentication. The
 test can be part of an authentication step as long as this step can be validated by the
 hardware protecting the key and cannot be spoofed. For example a physical button press
 can be used as a test of user presence if the other pins connected to the button are not
 able to simulate a button press.There must be no way for the primary processor to fake a
 button press or that button must not be used as a test of user presence.",KeyGenParameterSpec.Builder This value will never be null . |||,required boolean |||,28
<android.security.keystore.KeyGenParameterSpec: boolean isUnlockedDeviceRequired()>,,,"Returns true if the screen must be unlocked for this key to be used for decryption or
 signing. Encryption and signature verification will still be available when the screen is
 locked.",boolean |||,,28
<android.security.keystore.KeyGenParameterSpec: boolean isUserConfirmationRequired()>,,,"Returns true if the key is authorized to be used only for messages confirmed by the
 user.

 Confirmation is separate from user authentication (see Builder#setUserAuthenticationRequired(boolean) ). Keys can be created that require
 confirmation but not user authentication or user authentication but not confirmation or
 both. Confirmation verifies that some user with physical possession of the device has
 approved a displayed message. User authentication verifies that the correct user is present
 and has authenticated. This authorization applies only to secret key and private key operations. Public key
 operations are not restricted.",boolean |||,,28
<android.security.keystore.KeyGenParameterSpec: boolean isUserPresenceRequired()>,3,,"Returns true if the key is authorized to be used only if a test of user presence has
 been performed between the Signature.initSign() and Signature.sign() calls.
 It requires that the KeyStore implementation have a direct way to validate the user presence
 for example a KeyStore hardware backed strongbox can use a button press that is observable
 in hardware. A test for user presence is tangential to authentication. The test can be part
 of an authentication step as long as this step can be validated by the hardware protecting
 the key and cannot be spoofed. For example a physical button press can be used as a test of
 user presence if the other pins connected to the button are not able to simulate a button
 press. There must be no way for the primary processor to fake a button press or that
 button must not be used as a test of user presence.",boolean |||,,28
<android.security.keystore.KeyInfo: boolean isUserConfirmationRequired()>,,,"Returns true if the key is authorized to be used only for messages confirmed by the
 user.

 Confirmation is separate from user authentication (see isUserAuthenticationRequired() ). Keys can be created that require confirmation but
 not user authentication or user authentication but not confirmation or both. Confirmation
 verifies that some user with physical possession of the device has approved a displayed
 message. User authentication verifies that the correct user is present and has
 authenticated. This authorization applies only to secret key and private key operations. Public key
 operations are not restricted.",boolean |||,,28
<android.security.keystore.KeyProtection.Builder: KeyProtection.Builder setUserConfirmationRequired(boolean)>,,,"Sets whether this key is authorized to be used only for messages confirmed by the
 user.

 Confirmation is separate from user authentication (see setUserAuthenticationRequired(boolean) ). Keys can be created that require
 confirmation but not user authentication or user authentication but not confirmation
 or both. Confirmation verifies that some user with physical possession of the device has
 approved a displayed message. User authentication verifies that the correct user is
 present and has authenticated. This authorization applies only to secret key and private key operations. Public key
 operations are not restricted.

 See ConfirmationPrompt class for
 more details about user confirmations.",KeyProtection.Builder This value will never be null . |||,required boolean |||,28
<android.security.keystore.KeyProtection: boolean isUserConfirmationRequired()>,,,"Returns true if the key is authorized to be used only for messages confirmed by the
 user.

 Confirmation is separate from user authentication (see isUserAuthenticationRequired() ). Keys can be created that require confirmation but
 not user authentication or user authentication but not confirmation or both. Confirmation
 verifies that some user with physical possession of the device has approved a displayed
 message. User authentication verifies that the correct user is present and has
 authenticated. This authorization applies only to secret key and private key operations. Public key
 operations are not restricted.",boolean |||,,28
<android.security.keystore.KeyProtection: boolean isUserPresenceRequired()>,,,"Returns true if the key is authorized to be used only if a test of user presence has
 been performed between the Signature.initSign() and Signature.sign() calls.
 It requires that the KeyStore implementation have a direct way to validate the user presence
 for example a KeyStore hardware backed strongbox can use a button press that is observable
 in hardware. A test for user presence is tangential to authentication. The test can be part
 of an authentication step as long as this step can be validated by the hardware protecting
 the key and cannot be spoofed. For example a physical button press can be used as a test of
 user presence if the other pins connected to the button are not able to simulate a button
 press. There must be no way for the primary processor to fake a button press or that
 button must not be used as a test of user presence.",boolean |||,,28
<android.service.autofill.BatchUpdates.Builder: BatchUpdates build()>,,,Creates a new BatchUpdates instance.,BatchUpdates |||,,28
<android.service.autofill.BatchUpdates: String toString()>,,,"Returns a string representation of the object. In general the toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the
 object is an instance the at-sign character ` @ ' and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words this method returns a string equal to the
 value of:",String a string representation of the object. |||,,28
"<android.service.autofill.Dataset.Builder: Dataset.Builder setValue(AutofillId,AutofillValue,Pattern)>",,,"Sets the value of a field using an explicit filter . This method is typically used when the dataset requires authentication and the service
 does not know its value but wants to hide the dataset after the user enters a minimum
 number of characters. For example if the dataset represents a credit card number and the
 service does not want to show the ""Tap to authenticate"" message until the user tapped
 4 digits in which case the filter would be Pattern.compile(""\\d.{4}"") . Note: If the dataset requires authentication but the service knows its text
 value it's easier to filter by calling setValue(android.view.autofill.AutofillId android.view.autofill.AutofillValue) and
 use the value to filter.",Dataset.Builder this builder. |||,"id AutofillId : id returned by AssistStructure.ViewNode.getAutofillId() .
This value must never be null . |||
value AutofillValue : the value to be autofilled. Pass null if you do not have the value
but the target view is a logical part of the dataset. For example if
the dataset needs authentication and you have no access to the value.
This value may be null . |||
filter Pattern : regex used to determine if the dataset should be shown in the autofill UI;
when null it disables filtering on that dataset (this is the recommended
approach when value is not null and field contains sensitive data
such as passwords).
This value may be null . |||",28
<android.service.autofill.DateValueSanitizer: String toString()>,,,"Returns a string representation of the object. In general the toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the
 object is an instance the at-sign character ` @ ' and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words this method returns a string equal to the
 value of:",String a string representation of the object. |||,,28
<android.service.autofill.FieldClassification.Match: float getScore()>,,,"Gets a classification score for the value of this field compared to the value of the UserData entry. The score is based in a comparison of the field value and the user data entry and it
 ranges from 0.0F to 1.0F : 1.0F represents a full match ( 100% ). 
0.0F represents a full mismatch ( 0% ). 
Any other value is a partial match. 
How the score is calculated depends on the UserData.Builder#setFieldClassificationAlgorithm(String android.os.Bundle) used.",float |||,,28
<android.service.autofill.FieldClassification.Match: String toString()>,,,"Returns a string representation of the object. In general the toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the
 object is an instance the at-sign character ` @ ' and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words this method returns a string equal to the
 value of:",String a string representation of the object. |||,,28
<android.service.autofill.FieldClassification: List getMatches()>,,,"Gets the Match with the highest Match#getScore() (sorted in
 descending order). Note: There's no guarantee of how many matches will be returned. In fact
 the Android System might return just the top match to minimize the impact of field
 classification in the device's health.",List < FieldClassification.Match > This value will never be null . |||,,28
<android.service.autofill.FillContext: AutofillId getFocusedId()>,,,The AutofillId of the view that triggered autofill.,AutofillId This value will never be null . |||,,29
<android.service.autofill.FillEventHistory.Event: Map getChangedFields()>,,,"Returns which fields in the selected datasets were changed by the user after the dataset
 was selected. For example server provides: User select both datasets (for username and password) but after the fields are
 autofilled user changes them to: Then the result is the following map: Note: Only set on events of type TYPE_CONTEXT_COMMITTED .","Map < AutofillId  String > map map whose key is the id of the change fields and value is the id of
 dataset that has that field and was selected by the user.
 
 This value will never be null . |||",,28
<android.service.autofill.FillEventHistory.Event: Set getIgnoredDatasetIds()>,,,Returns which datasets were NOT selected by the user. Note: Only set on events of type TYPE_CONTEXT_COMMITTED .,Set < String > This value will never be null . |||,,28
<android.service.autofill.FillEventHistory.Event: Set getSelectedDatasetIds()>,,,Returns which datasets were selected by the user. Note: Only set on events of type TYPE_CONTEXT_COMMITTED .,Set < String > This value will never be null . |||,,28
<android.service.autofill.FillResponse.Builder: FillResponse.Builder disableAutofill(long)>,,,"Disables autofill for the app or activity. This method is useful to optimize performance in cases where the service knows it
 can not autofill an appâ€”for example when the service has a list of ""blacklisted""
 apps such as office suites. By default it disables autofill for all activities in the app unless the response is flagged with FillResponse.FLAG_DISABLE_ACTIVITY_ONLY . Autofill for the app or activity is automatically re-enabled after any of the
 following conditions: Note: Activities that are running when autofill is re-enabled remain
 disabled for autofill until they finish and restart.","FillResponse.Builder this builder

 This value will never be null . |||",duration long : duration to disable autofill in milliseconds. |||,28
<android.service.autofill.FillResponse.Builder: FillResponse.Builder setHeader(RemoteViews)>,3,,"Sets a header to be shown as the first element in the list of datasets. When this method is called you must also add a dataset otherwise build() throws an IllegalStateException . Similarly this
 method should only be used on FillResponse that do not require
 authentication (as the header could have been set directly in the main presentation in
 these cases). Theme does not work with RemoteViews layout. Avoid hardcoded text color
 or background color: Autofill on different platforms may have different themes.","FillResponse.Builder this builder

 This value will never be null . |||","header RemoteViews : a presentation to represent the header. This presentation is not clickable
â€”calling RemoteViews#setOnClickPendingIntent(int android.app.PendingIntent) on it would
have no effect.
This value must never be null . |||",28
<android.service.autofill.FillResponse.Builder: FillResponse.Builder setUserData(UserData)>,,,"Sets a specific UserData for field classification for this request only. Any fields in this UserData will override corresponding fields in the generic
 UserData object","FillResponse.Builder this builder
 This value will never be null . |||",userData UserData : This value must never be null . |||,29
"<android.service.autofill.ImageTransformation.Builder: ImageTransformation.Builder addOption(Pattern,int,CharSequence)>",,,"Adds an option to replace the child view with a different image and content description
 when the regex matches.",ImageTransformation.Builder this build |||,"regex Pattern : regular expression defining what should be matched to use this image.
This value must never be null . |||
resId int : resource id of the image (in the autofill service's package). The RemoteViews must contain a ImageView child with that id. |||
contentDescription CharSequence : content description to be applied in the child view.
This value must never be null . |||",28
<android.service.autofill.SaveInfo.Builder: SaveInfo.Builder setTriggerId(AutofillId)>,,,"Explicitly defines the view that should commit the autofill context when clicked. Usually the save request is only automatically triggered after the activity is
 finished or all relevant views become invisible but there are scenarios where the
 autofill context is automatically commited too late
 â€”for example when the activity manually clears the autofillable views when a
 button is tapped. This method can be used to trigger the autofill save UI earlier in
 these scenarios. Note: This method should only be used in scenarios where the automatic workflow
 is not enough otherwise it could trigger the autofill save UI when it should notâ€”
 for example when the user entered invalid credentials for the autofillable views.",SaveInfo.Builder This value will never be null . |||,id AutofillId : This value must never be null . |||,28
<android.service.autofill.SaveRequest: List getDatasetIds()>,,,Gets the ids of the datasets selected by the user in the order in which they were selected.,List < String > This value may be null . |||,,28
<android.service.autofill.TextValueSanitizer: int describeContents()>,,,"Describe the kinds of special objects contained in this Parcelable
 instance's marshaled representation. For example if the object will
 include a file descriptor in the output of writeToParcel(android.os.Parcel int) the return value of this method must include the CONTENTS_FILE_DESCRIPTOR bit.","int a bitmask indicating the set of special object types marshaled
 by this Parcelable object instance.
 
 Value is either 0 or CONTENTS_FILE_DESCRIPTOR |||",,28
<android.service.autofill.TextValueSanitizer: String toString()>,,,"Returns a string representation of the object. In general the toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the
 object is an instance the at-sign character ` @ ' and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words this method returns a string equal to the
 value of:",String a string representation of the object. |||,,28
"<android.service.autofill.TextValueSanitizer: void writeToParcel(Parcel,int)>",2,,Flatten this object in to a Parcel.,void,"parcel Parcel : The Parcel in which the object should be written. |||
flags int : Additional flags about how the object should be written.
May be 0 or Parcelable.PARCELABLE_WRITE_RETURN_VALUE .
Value is either 0 or a combination of Parcelable.PARCELABLE_WRITE_RETURN_VALUE and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES |||",28
"<android.service.autofill.UserData.Builder: UserData.Builder add(String,String)>",2,,Adds a new value for user data.,UserData.Builder This value will never be null . |||,"value String : value of the user data.
This value must never be null . |||
categoryId String : string used to identify the category the value is associated with.
This value must never be null . |||",28
"<android.service.autofill.UserData.Builder: UserData.Builder setFieldClassificationAlgorithmForCategory(String,String,Bundle)>",3,,"Sets the algorithm used for field classification for the specified category. The currently available algorithms can be retrieved through AutofillManager#getAvailableFieldClassificationAlgorithms() . If not set the AutofillManager#getDefaultFieldClassificationAlgorithm() is
 used instead.",UserData.Builder this builder |||,"categoryId String : autofill field category.
This value must never be null . |||
name String : name of the algorithm or null to used default.
This value may be null . |||
args Bundle : optional arguments to the algorithm.
This value may be null . |||",29
<android.service.autofill.UserData: String getFieldClassificationAlgorithmForCategory(String)>,,,"Gets the name of the algorithm corresponding to the specific autofill category
 that is used to calculate Match#getScore()",String String name of algorithm null if none found. |||,"categoryId String : autofill field category
This value must never be null . |||",29
"<android.service.autofill.UserData: void writeToParcel(Parcel,int)>",,,Flatten this object in to a Parcel.,void,"parcel Parcel : The Parcel in which the object should be written. |||
flags int : Additional flags about how the object should be written.
May be 0 or Parcelable.PARCELABLE_WRITE_RETURN_VALUE .
Value is either 0 or a combination of Parcelable.PARCELABLE_WRITE_RETURN_VALUE and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES |||",28
<android.service.carrier.CarrierIdentifier: int getCarrierId()>,1,,Returns the carrier id.,int |||,,29
<android.service.carrier.CarrierMessagingClientService: IBinder onBind(Intent)>,1,,"Return the communication channel to the service.  May return null if
 clients can not bind to the service.  The returned IBinder is usually for a complex interface
 that has been described using
 aidl . Note that unlike other application components calls on to the
 IBinder interface returned here may not happen on the main thread
 of the process .  More information about the main thread can be found in Processes and
 Threads .",IBinder This value will never be null . |||,intent Intent : This value may be null . |||,29
<android.service.media.MediaBrowserService: MediaSessionManager.RemoteUserInfo getCurrentBrowserInfo()>,,,Gets the browser information who sent the current request.,MediaSessionManager.RemoteUserInfo |||,,28
<android.service.notification.NotificationListenerService.Ranking: long getLastAudiblyAlertedMillis()>,,,"Returns the last time this notification alerted the user via sound or vibration. Value is a non-negative timestamp measured as the number of
 milliseconds since 1970-01-01T00:00:00Z.","long the time of the last alerting behavior in milliseconds.
 
 Value is a non-negative timestamp measured as the number of
 milliseconds since 1970-01-01T00:00:00Z. |||",,29
<android.service.notification.StatusBarNotification: int getUid()>,,,The notifying app's ( getPackageName() 's) uid.,int |||,,29
<android.service.notification.StatusBarNotification: String getOpPkg()>,,,"The package that posted the notification. Might be different from getPackageName() if the app owning the notification has
 a NotificationManager#setNotificationDelegate(String) .",String This value will never be null . |||,,29
<android.service.notification.ZenPolicy.Builder: ZenPolicy build()>,,,Builds the current ZenPolicy.,ZenPolicy This value will never be null . |||,,29
<android.service.notification.ZenPolicy.Builder: ZenPolicy.Builder allowCalls(int)>,,,"Whether to allow notifications with category Notification#CATEGORY_CALL that match audienceType to play sounds and visually appear or to intercept
 them when DND is active.",ZenPolicy.Builder This value will never be null . |||,"audienceType int : callers that are allowed to bypass DND
Value is ZenPolicy.PEOPLE_TYPE_UNSET  ZenPolicy.PEOPLE_TYPE_ANYONE  ZenPolicy.PEOPLE_TYPE_CONTACTS  ZenPolicy.PEOPLE_TYPE_STARRED or ZenPolicy.PEOPLE_TYPE_NONE |||",29
<android.service.notification.ZenPolicy.Builder: ZenPolicy.Builder allowMessages(int)>,,,"Whether to allow notifications with category Notification#CATEGORY_MESSAGE that match audienceType to play sounds and visually appear or to intercept
 them when DND is active.",ZenPolicy.Builder This value will never be null . |||,"audienceType int : message senders that are allowed to bypass DND
Value is ZenPolicy.PEOPLE_TYPE_UNSET  ZenPolicy.PEOPLE_TYPE_ANYONE  ZenPolicy.PEOPLE_TYPE_CONTACTS  ZenPolicy.PEOPLE_TYPE_STARRED or ZenPolicy.PEOPLE_TYPE_NONE |||",29
<android.service.notification.ZenPolicy.Builder: ZenPolicy.Builder allowReminders(boolean)>,,,Whether to allow notifications with category Notification#CATEGORY_REMINDER to play sounds and visually appear or to intercept them when DND is active.,ZenPolicy.Builder This value will never be null . |||,allow boolean |||,29
<android.service.notification.ZenPolicy.Builder: ZenPolicy.Builder hideAllVisualEffects()>,3,,Disallows notifications intercepted by DND from showing when DND is active.,ZenPolicy.Builder This value will never be null . |||,,29
<android.service.notification.ZenPolicy.Builder: ZenPolicy.Builder showLights(boolean)>,3,,"Whether NotificationChannel#shouldShowLights() from
 notifications intercepted by DND are blocked.",ZenPolicy.Builder This value will never be null . |||,show boolean |||,29
<android.service.notification.ZenPolicy.Builder: ZenPolicy.Builder showPeeking(boolean)>,3,,Whether notifications intercepted by DND are prevented from peeking.,ZenPolicy.Builder This value will never be null . |||,show boolean |||,29
<android.service.notification.ZenPolicy: int describeContents()>,1,,"Describe the kinds of special objects contained in this Parcelable
 instance's marshaled representation. For example if the object will
 include a file descriptor in the output of writeToParcel(android.os.Parcel int) the return value of this method must include the CONTENTS_FILE_DESCRIPTOR bit.","int a bitmask indicating the set of special object types marshaled
 by this Parcelable object instance.
 
 Value is either 0 or CONTENTS_FILE_DESCRIPTOR |||",,29
<android.service.notification.ZenPolicy: int getPriorityCategoryEvents()>,3,,"Whether this policy wants to allow notifications with category Notification#CATEGORY_EVENT to play sounds and visually appear
 or to intercept them when DND is active.",int STATE_UNSET  STATE_ALLOW or STATE_DISALLOW Value is STATE_UNSET  STATE_ALLOW or STATE_DISALLOW |||,,29
<android.service.notification.ZenPolicy: int getPriorityCategorySystem()>,3,,"Whether this policy wants to allow system sounds when DND is active.
 When system is STATE_DISALLOW the system stream will be muted when DND is active.",int STATE_UNSET  STATE_ALLOW or STATE_DISALLOW Value is STATE_UNSET  STATE_ALLOW or STATE_DISALLOW |||,,29
<android.service.notification.ZenPolicy: int getVisualEffectAmbient()>,3,,"Whether this policy allows notifications intercepted by DND from appearing on ambient
 displays on devices that support ambient display.",int Value is STATE_UNSET  STATE_ALLOW or STATE_DISALLOW |||,,29
<android.service.notification.ZenPolicy: int getVisualEffectNotificationList()>,3,,"Whether this policy allows notifications intercepted by DND from appearing in notification
 list views like the notification shade or lockscreen on devices that support those
 views.",int Value is STATE_UNSET  STATE_ALLOW or STATE_DISALLOW |||,,29
<android.service.notification.ZenPolicy: int getVisualEffectStatusBar()>,3,,"Whether this policy allows notifications intercepted by DND from appearing in the status bar
 on devices that support status bars.",int Value is STATE_UNSET  STATE_ALLOW or STATE_DISALLOW |||,,29
"<android.service.notification.ZenPolicy: void writeToParcel(Parcel,int)>",,,Flatten this object in to a Parcel.,void,"dest Parcel : The Parcel in which the object should be written. |||
flags int : Additional flags about how the object should be written.
May be 0 or Parcelable.PARCELABLE_WRITE_RETURN_VALUE .
Value is either 0 or a combination of Parcelable.PARCELABLE_WRITE_RETURN_VALUE and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES |||",29
<android.service.voice.VoiceInteractionService: Set onGetSupportedVoiceActions(Set)>,,,"Request to query for what extended voice actions this service supports. This method will
 be called when the system checks the supported actions of this VoiceInteractionService . Supported actions may be delivered to VoiceInteractionSession later to request a session to perform an action. Voice actions are defined in support libraries and could vary based on platform context.
 For example car related voice actions will be defined in car support libraries.","Set < String > Returns a subset of checked voice actions. Additional voice actions in the
 returned set will be ignored. Returns empty set if no actions are supported.
 
 This value will never be null . |||","voiceActions Set : A set of checked voice actions.
This value must never be null . |||",29
<android.service.voice.VoiceInteractionSession.AssistState: AssistContent getAssistContent()>,,,,"AssistContent Additional content data supplied by the app through Activity.onProvideAssistContent .
 May be null if assist data has been disabled by the user or device policy; will
 not be automatically filled in with data from the app if the app has marked its
 window as secure. |||",,29
<android.service.voice.VoiceInteractionSession.AssistState: Bundle getAssistData()>,,,,"Bundle Arbitrary data supplied by the app through Activity.onProvideAssistData .
 May be null if assist data has been disabled by the user or device policy. |||",,29
<android.service.voice.VoiceInteractionSession.AssistState: int getIndex()>,,,,"int the index of the activity that this state is for or -1
     if there was no assist data captured.
 
 Value is -1 or greater |||",,29
"<android.system.Os: int sendto(FileDescriptor,byte,int,int,int,SocketAddress)>",,,See sendto(2) .,int |||,"fd FileDescriptor |||
bytes byte |||
byteOffset int |||
byteCount int |||
flags int |||
address SocketAddress |||",29
"<android.system.Os: long sendfile(FileDescriptor,FileDescriptor,Int64Ref,long)>",,,See sendfile(2) .,long |||,"outFd FileDescriptor |||
inFd FileDescriptor |||
offset Int64Ref |||
byteCount long |||",28
"<android.system.Os: StructTimeval getsockoptTimeval(FileDescriptor,int,int)>",,,"See getsockopt(2) . Only for use with option values that return a struct timeval such as OsConstants#SO_RCVTIMEO and OsConstants#SO_SNDTIMEO . Use with other
 options may throw an IllegalArgumentException or return junk values.",StructTimeval |||,"fd FileDescriptor |||
level int |||
option int |||",29
<android.system.StructTimeval: boolean equals(Object)>,,,"Indicates whether some other object is ""equal to"" this one. The equals method implements an equivalence relation
 on non-null object references: It is reflexive : for any non-null reference value x  x.equals(x) should return true . 
It is symmetric : for any non-null reference values x and y  x.equals(y) should return true if and only if y.equals(x) returns true . 
It is transitive : for any non-null reference values x  y and z if x.equals(y) returns true and y.equals(z) returns true then x.equals(z) should return true . 
It is consistent : for any non-null reference values x and y multiple invocations of x.equals(y) consistently return true or consistently return false provided no
     information used in equals comparisons on the
     objects is modified. 
For any non-null reference value x  x.equals(null) should return false . 
The equals method for class Object implements
 the most discriminating possible equivalence relation on objects;
 that is for any non-null reference values x and y this method returns true if and only
 if x and y refer to the same object
 ( x == y has the value true ). Note that it is generally necessary to override the hashCode method whenever this method is overridden so as to maintain the
 general contract for the hashCode method which states
 that equal objects must have equal hash codes.","boolean true if this object is the same as the obj
          argument; false otherwise. |||",o Object : the reference object with which to compare. |||,29
<android.system.StructTimeval: StructTimeval fromMillis(long)>,,,,StructTimeval |||,millis long |||,29
"<android.telecom.CallRedirectionService: void redirectCall(Uri,PhoneAccountHandle,boolean)>",,,"The implemented CallRedirectionService calls this method to response a request
 received via onPlaceCall(android.net.Uri android.telecom.PhoneAccountHandle boolean) to inform Telecom that
 changes are required to the phone number or/and PhoneAccountHandle for the outgoing
 call. Telecom will cancel the call if the implemented CallRedirectionService replies Telecom a handle for an emergency number. This can only be called from implemented onPlaceCall(android.net.Uri android.telecom.PhoneAccountHandle boolean) . The response corresponds to the
 latest request via onPlaceCall(android.net.Uri android.telecom.PhoneAccountHandle boolean) .",void,"gatewayUri Uri : the gateway uri for call redirection.
This value must never be null . |||
targetPhoneAccount PhoneAccountHandle : the PhoneAccountHandle to use when placing the call.
This value must never be null . |||
confirmFirst boolean : Telecom will ask users to confirm the redirection via a yes/no dialog
if the confirmFirst is true and if the redirection request of this
response was sent with a true flag of allowInteractiveResponse via onPlaceCall(android.net.Uri android.telecom.PhoneAccountHandle boolean) |||",29
<android.telecom.Connection: void onDeflect(Uri)>,,,"Notifies this Connection which is in STATE_RINGING of
 a request to deflect.",void,address Uri |||,28
<android.telecom.Connection: void onStartRtt(Connection.RttTextStream)>,,,"Notifies this Connection that the user has requested an RTT session.
 The connection service should call sendRttInitiationSuccess() or sendRttInitiationFailure(int) to inform Telecom of the success or failure of the
 request respectively.",void,"rttTextStream Connection.RttTextStream : The object that should be used to send text to or receive text from
the in-call app.
This value must never be null . |||",28
<android.telecom.Connection: void onStopRtt()>,,,"Notifies this Connection that it should terminate any existing RTT communication
 channel. No response to Telecom is needed for this method.",void,,28
<android.telecom.Connection: void sendRemoteRttRequest()>,,,"Informs listeners that the remote side of the call has requested an upgrade to include an
 RTT session in the call.",void,,28
<android.telecom.Connection: void sendRttInitiationFailure(int)>,,,Informs listeners that a previously requested RTT session via ConnectionRequest#isRequestingRtt() or onStartRtt(android.telecom.Connection.RttTextStream) has failed.,void,"reason int : One of the reason codes defined in RttModifyStatus with the
exception of RttModifyStatus#SESSION_MODIFY_REQUEST_SUCCESS . |||",28
<android.telecom.ConnectionRequest: Connection.RttTextStream getRttTextStream()>,,,"Gets the Connection.RttTextStream object that should be used to
 send and receive RTT text to/from the in-call app.",Connection.RttTextStream An instance of Connection.RttTextStream or null if this connection request is not requesting an RTT session upon connection establishment. |||,,28
<android.telecom.ConnectionService: void connectionServiceFocusReleased()>,,,"Call to inform Telecom that your ConnectionService has released call resources (e.g
 microphone camera). The ConnectionService will be disconnected when it failed to call this method within
 5 seconds after onConnectionServiceFocusLost() is called.",void,,28
<android.telecom.ConnectionService: void onConnectionServiceFocusLost()>,,,"Called when the ConnectionService has lost the call focus.
 The ConnectionService should release the call resources and invokes ConnectionService#connectionServiceFocusReleased() to inform telecom that it has
 released the call resources.",void,,28
"<android.telecom.ConnectionService: void onHandoverFailed(ConnectionRequest,int)>",,,Called by Telecom in response to a TelecomManager#acceptHandover() invocation which failed. For a full discussion of the handover process and the APIs involved see Call.handoverTo(PhoneAccountHandle int Bundle),void,"request ConnectionRequest : Details about the call which failed to handover. |||
error int : Reason for handover failure.  Will be one of the
Value is Call.Callback.HANDOVER_FAILURE_DEST_APP_REJECTED  Call.Callback.HANDOVER_FAILURE_NOT_SUPPORTED  Call.Callback.HANDOVER_FAILURE_USER_REJECTED  Call.Callback.HANDOVER_FAILURE_ONGOING_EMERGENCY_CALL or Call.Callback.HANDOVER_FAILURE_UNKNOWN |||",28
<android.telecom.PhoneAccountSuggestion: int getReason()>,,,,"int The reason for this suggestion
 
 Value is REASON_NONE  REASON_INTRA_CARRIER  REASON_FREQUENT  REASON_USER_SET or REASON_OTHER |||",,29
<android.telecom.PhoneAccountSuggestion: int hashCode()>,,,"Returns a hash code value for the object. This method is
 supported for the benefit of hash tables such as those provided by HashMap . The general contract of hashCode is: Whenever it is invoked on the same object more than once during
     an execution of a Java application the hashCode method
     must consistently return the same integer provided no information
     used in equals comparisons on the object is modified.
     This integer need not remain consistent from one execution of an
     application to another execution of the same application. 
If two objects are equal according to the equals(Object) method then calling the hashCode method on each of
     the two objects must produce the same integer result. 
It is not required that if two objects are unequal
     according to the equals(java.lang.Object) method then calling the hashCode method on each of the
     two objects must produce distinct integer results.  However the
     programmer should be aware that producing distinct integer results
     for unequal objects may improve the performance of hash tables. 
As much as is reasonably practical the hashCode method defined by
 class Object does return distinct integers for distinct
 objects. (This is typically implemented by converting the internal
 address of the object into an integer but this implementation
 technique is not required by the
 Javaâ„¢ programming language.)",int a hash code value for this object. |||,,29
"<android.telecom.TelecomManager: void acceptHandover(Uri,int,PhoneAccountHandle)>",,,"Called by an app to indicate that it wishes to accept the handover of an ongoing call to a PhoneAccountHandle it defines. A call handover is the process where an ongoing call is transferred from one app (i.e. ConnectionService to another app.  The user could for example choose to continue a
 mobile network call in a video calling app.  The mobile network call via the Telephony stack
 is referred to as the source of the handover and the video calling app is referred to as the
 destination. When considering a handover scenario the initiating device is where a user initiated
 the handover process (e.g. by calling Call.handoverTo(PhoneAccountHandle int Bundle) and the other device is considered the receiving device. For a full discussion of the handover process and the APIs involved see Call.handoverTo(PhoneAccountHandle int Bundle) . This method is called from the receiving side of a handover to indicate a desire to
 accept the handover of an ongoing call to another ConnectionService identified by PhoneAccountHandle destAcct. For managed ConnectionService s the specified PhoneAccountHandle must have been registered with registerPhoneAccount(PhoneAccount) and
 the user must have enabled the corresponding PhoneAccount .  This can be checked using getPhoneAccount(PhoneAccountHandle) . Self-managed ConnectionService s must have Manifest.permission.MANAGE_OWN_CALLS to handover a call to it. Once invoked this method will cause the system to bind to the ConnectionService associated with the PhoneAccountHandle destAcct and call
 (See ConnectionService#onCreateIncomingHandoverConnection ). For a managed ConnectionService a SecurityException will be thrown if either
 the PhoneAccountHandle destAcct does not correspond to a registered PhoneAccount or the associated PhoneAccount is not currently enabled by the
 user. For a self-managed ConnectionService a SecurityException will be thrown if
 the calling app does not have Manifest.permission.MANAGE_OWN_CALLS .",void,"srcAddr Uri : The Uri of the ongoing call to handover to the callerâ€™s ConnectionService . |||
videoState int : Video state after the handover.
Value is either 0 or a combination of VideoProfile.STATE_AUDIO_ONLY  VideoProfile.STATE_TX_ENABLED  VideoProfile.STATE_RX_ENABLED  VideoProfile.STATE_BIDIRECTIONAL and VideoProfile.STATE_PAUSED |||
destAcct PhoneAccountHandle : The PhoneAccountHandle registered to the calling package. |||",28
<android.telephony.AvailableNetworkInfo: boolean equals(Object)>,,,"Indicates whether some other object is ""equal to"" this one. The equals method implements an equivalence relation
 on non-null object references: It is reflexive : for any non-null reference value x  x.equals(x) should return true . 
It is symmetric : for any non-null reference values x and y  x.equals(y) should return true if and only if y.equals(x) returns true . 
It is transitive : for any non-null reference values x  y and z if x.equals(y) returns true and y.equals(z) returns true then x.equals(z) should return true . 
It is consistent : for any non-null reference values x and y multiple invocations of x.equals(y) consistently return true or consistently return false provided no
     information used in equals comparisons on the
     objects is modified. 
For any non-null reference value x  x.equals(null) should return false . 
The equals method for class Object implements
 the most discriminating possible equivalence relation on objects;
 that is for any non-null reference values x and y this method returns true if and only
 if x and y refer to the same object
 ( x == y has the value true ). Note that it is generally necessary to override the hashCode method whenever this method is overridden so as to maintain the
 general contract for the hashCode method which states
 that equal objects must have equal hash codes.","boolean true if this object is the same as the obj
          argument; false otherwise. |||",o Object : the reference object with which to compare. |||,29
<android.telephony.AvailableNetworkInfo: int describeContents()>,1,,"Describe the kinds of special objects contained in this Parcelable
 instance's marshaled representation. For example if the object will
 include a file descriptor in the output of writeToParcel(android.os.Parcel int) the return value of this method must include the CONTENTS_FILE_DESCRIPTOR bit.","int a bitmask indicating the set of special object types marshaled
 by this Parcelable object instance.
 
 Value is either 0 or CONTENTS_FILE_DESCRIPTOR |||",,29
<android.telephony.AvailableNetworkInfo: List getBands()>,,,"Returns the frequency bands that need to be scanned by opportunistic network service

 The returned value is defined in either of AccessNetworkConstants.GeranBand  AccessNetworkConstants.UtranBand and AccessNetworkConstants.EutranBand See AccessNetworkConstants.AccessNetworkType for details regarding different network
 types. When no specific bands are specified (empty array or null) CBRS band AccessNetworkConstants.EutranBand#BAND_48 will be used for network scan.",List < Integer > |||,,29
<android.telephony.AvailableNetworkInfo: String toString()>,,,"Returns a string representation of the object. In general the toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the
 object is an instance the at-sign character ` @ ' and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words this method returns a string equal to the
 value of:",String a string representation of the object. |||,,29
"<android.telephony.AvailableNetworkInfo: void writeToParcel(Parcel,int)>",,,Flatten this object in to a Parcel.,void,"dest Parcel : The Parcel in which the object should be written. |||
flags int : Additional flags about how the object should be written.
May be 0 or Parcelable.PARCELABLE_WRITE_RETURN_VALUE .
Value is either 0 or a combination of Parcelable.PARCELABLE_WRITE_RETURN_VALUE and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES |||",29
<android.telephony.CellIdentity: boolean equals(Object)>,3,,"Indicates whether some other object is ""equal to"" this one. The equals method implements an equivalence relation
 on non-null object references: It is reflexive : for any non-null reference value x  x.equals(x) should return true . 
It is symmetric : for any non-null reference values x and y  x.equals(y) should return true if and only if y.equals(x) returns true . 
It is transitive : for any non-null reference values x  y and z if x.equals(y) returns true and y.equals(z) returns true then x.equals(z) should return true . 
It is consistent : for any non-null reference values x and y multiple invocations of x.equals(y) consistently return true or consistently return false provided no
     information used in equals comparisons on the
     objects is modified. 
For any non-null reference value x  x.equals(null) should return false . 
The equals method for class Object implements
 the most discriminating possible equivalence relation on objects;
 that is for any non-null reference values x and y this method returns true if and only
 if x and y refer to the same object
 ( x == y has the value true ). Note that it is generally necessary to override the hashCode method whenever this method is overridden so as to maintain the
 general contract for the hashCode method which states
 that equal objects must have equal hash codes.","boolean true if this object is the same as the obj
          argument; false otherwise. |||",other Object : the reference object with which to compare. |||,28
<android.telephony.CellIdentity: CharSequence getOperatorAlphaLong()>,,,,"CharSequence The long alpha tag associated with the current scan result (may be the operator
 name string or extended operator name string). May be null if unknown. |||",,28
<android.telephony.CellIdentity: CharSequence getOperatorAlphaShort()>,,,,"CharSequence The short alpha tag associated with the current scan result (may be the operator
 name string or extended operator name string).  May be null if unknown. |||",,28
<android.telephony.CellIdentity: int describeContents()>,1,,Implement the Parcelable interface,"int a bitmask indicating the set of special object types marshaled
 by this Parcelable object instance.
 
 Value is either 0 or CONTENTS_FILE_DESCRIPTOR |||",,28
<android.telephony.CellIdentityGsm: String getMobileNetworkOperator()>,,,,String a 5 or 6 character string (MCC+MNC) null if any field is unknown. |||,,28
<android.telephony.CellIdentityNr: int getTac()>,,,Get the tracking area code.,"int a 16 bit integer or CellInfo#UNAVAILABLE if unknown.
 
 Value is between 0 and 65535 inclusive |||",,29
<android.telephony.CellIdentityNr: String getMccString()>,,,,String Mobile Country Code in string format or null if unknown. |||,,29
<android.telephony.CellIdentityNr: String getMncString()>,,,,String Mobile Network Code in string fomrat or null if unknown. |||,,29
<android.telephony.CellIdentityNr: String toString()>,,,"Returns a string representation of the object. In general the toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the
 object is an instance the at-sign character ` @ ' and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words this method returns a string equal to the
 value of:",String a string representation of the object. |||,,29
<android.telephony.CellIdentityTdscdma: int describeContents()>,1,,Implement the Parcelable interface,"int a bitmask indicating the set of special object types marshaled
 by this Parcelable object instance.
 
 Value is either 0 or CONTENTS_FILE_DESCRIPTOR |||",,28
<android.telephony.CellIdentityTdscdma: int getLac()>,,,,int 16-bit Location Area Code 0..65535 UNAVAILABLE if unavailable. |||,,28
<android.telephony.CellIdentityTdscdma: int hashCode()>,,,"Returns a hash code value for the object. This method is
 supported for the benefit of hash tables such as those provided by HashMap . The general contract of hashCode is: Whenever it is invoked on the same object more than once during
     an execution of a Java application the hashCode method
     must consistently return the same integer provided no information
     used in equals comparisons on the object is modified.
     This integer need not remain consistent from one execution of an
     application to another execution of the same application. 
If two objects are equal according to the equals(Object) method then calling the hashCode method on each of
     the two objects must produce the same integer result. 
It is not required that if two objects are unequal
     according to the equals(java.lang.Object) method then calling the hashCode method on each of the
     two objects must produce distinct integer results.  However the
     programmer should be aware that producing distinct integer results
     for unequal objects may improve the performance of hash tables. 
As much as is reasonably practical the hashCode method defined by
 class Object does return distinct integers for distinct
 objects. (This is typically implemented by converting the internal
 address of the object into an integer but this implementation
 technique is not required by the
 Javaâ„¢ programming language.)",int a hash code value for this object. |||,,28
<android.telephony.CellIdentityTdscdma: String getMncString()>,,,Get Mobile Network Code in string format,String Mobile Network Code in string format null if unknown |||,,28
<android.telephony.CellIdentityTdscdma: String getMobileNetworkOperator()>,,,,String a 5 or 6 character string (MCC+MNC) null if any field is unknown |||,,29
<android.telephony.CellIdentityWcdma: String getMccString()>,,,,String Mobile Country Code in string version null if unavailable. |||,,28
<android.telephony.CellIdentityWcdma: String getMobileNetworkOperator()>,1,,,String a 5 or 6 character string (MCC+MNC) null if any field is unknown |||,,28
<android.telephony.CellInfo: int getCellConnectionStatus()>,1,,Gets the connection status of this cell.,"int The connection status of the cell.
 
 Value is CONNECTION_NONE  CONNECTION_PRIMARY_SERVING  CONNECTION_SECONDARY_SERVING or CONNECTION_UNKNOWN |||",,28
<android.telephony.CellInfoNr: boolean equals(Object)>,,,"Indicates whether some other object is ""equal to"" this one. The equals method implements an equivalence relation
 on non-null object references: It is reflexive : for any non-null reference value x  x.equals(x) should return true . 
It is symmetric : for any non-null reference values x and y  x.equals(y) should return true if and only if y.equals(x) returns true . 
It is transitive : for any non-null reference values x  y and z if x.equals(y) returns true and y.equals(z) returns true then x.equals(z) should return true . 
It is consistent : for any non-null reference values x and y multiple invocations of x.equals(y) consistently return true or consistently return false provided no
     information used in equals comparisons on the
     objects is modified. 
For any non-null reference value x  x.equals(null) should return false . 
The equals method for class Object implements
 the most discriminating possible equivalence relation on objects;
 that is for any non-null reference values x and y this method returns true if and only
 if x and y refer to the same object
 ( x == y has the value true ). Note that it is generally necessary to override the hashCode method whenever this method is overridden so as to maintain the
 general contract for the hashCode method which states
 that equal objects must have equal hash codes.","boolean true if this object is the same as the obj
          argument; false otherwise. |||",other Object : the reference object with which to compare. |||,29
<android.telephony.CellInfoNr: int hashCode()>,,,"Returns a hash code value for the object. This method is
 supported for the benefit of hash tables such as those provided by HashMap . The general contract of hashCode is: Whenever it is invoked on the same object more than once during
     an execution of a Java application the hashCode method
     must consistently return the same integer provided no information
     used in equals comparisons on the object is modified.
     This integer need not remain consistent from one execution of an
     application to another execution of the same application. 
If two objects are equal according to the equals(Object) method then calling the hashCode method on each of
     the two objects must produce the same integer result. 
It is not required that if two objects are unequal
     according to the equals(java.lang.Object) method then calling the hashCode method on each of the
     two objects must produce distinct integer results.  However the
     programmer should be aware that producing distinct integer results
     for unequal objects may improve the performance of hash tables. 
As much as is reasonably practical the hashCode method defined by
 class Object does return distinct integers for distinct
 objects. (This is typically implemented by converting the internal
 address of the object into an integer but this implementation
 technique is not required by the
 Javaâ„¢ programming language.)",int a hash code value for this object. |||,,29
"<android.telephony.CellInfoNr: void writeToParcel(Parcel,int)>",2,,Implement the Parcelable interface,void,"dest Parcel : The Parcel in which the object should be written. |||
flags int : Additional flags about how the object should be written.
May be 0 or Parcelable.PARCELABLE_WRITE_RETURN_VALUE .
Value is either 0 or a combination of Parcelable.PARCELABLE_WRITE_RETURN_VALUE and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES |||",29
<android.telephony.CellInfoTdscdma: CellSignalStrengthTdscdma getCellSignalStrength()>,,,,"CellSignalStrengthTdscdma a CellSignalStrengthTdscdma instance.
 
 This value will never be null . |||",,29
<android.telephony.CellInfoTdscdma: String toString()>,,,"Returns a string representation of the object. In general the toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the
 object is an instance the at-sign character ` @ ' and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words this method returns a string equal to the
 value of:",String a string representation of the object. |||,,29
"<android.telephony.CellInfoTdscdma: void writeToParcel(Parcel,int)>",,,Implement the Parcelable interface,void,"dest Parcel : The Parcel in which the object should be written. |||
flags int : Additional flags about how the object should be written.
May be 0 or Parcelable.PARCELABLE_WRITE_RETURN_VALUE .
Value is either 0 or a combination of Parcelable.PARCELABLE_WRITE_RETURN_VALUE and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES |||",29
<android.telephony.CellSignalStrengthGsm: int getBitErrorRate()>,,,Return the Bit Error Rate.,int the bit error rate (0-7 99) as defined in TS 27.007 8.5 or UNAVAILABLE . |||,,29
<android.telephony.CellSignalStrengthNr: int describeContents()>,1,,"Describe the kinds of special objects contained in this Parcelable
 instance's marshaled representation. For example if the object will
 include a file descriptor in the output of writeToParcel(android.os.Parcel int) the return value of this method must include the CONTENTS_FILE_DESCRIPTOR bit.","int a bitmask indicating the set of special object types marshaled
 by this Parcelable object instance.
 
 Value is either 0 or CONTENTS_FILE_DESCRIPTOR |||",,29
<android.telephony.CellSignalStrengthNr: int getAsuLevel()>,,,"Get the RSRP in ASU.

 Asu is calculated based on 3GPP RSRP. Refer to 3GPP 27.007 (Ver 10.3.0) Sec 8.69",int RSRP in ASU 0..97 255 or UNAVAILABLE |||,,29
<android.telephony.CellSignalStrengthNr: int getCsiRsrq()>,,,"Reference: 3GPP TS 38.215.
 Range: -20 dB to -3 dB.","int CSI reference signal received quality CellInfo#UNAVAILABLE means unreported
 value. |||",,29
<android.telephony.CellSignalStrengthNr: int getSsSinr()>,,,"Reference: 3GPP TS 38.215 Sec 5.1.* 3GPP TS 38.133 10.1.16.1
 Range: -23 dB to 40 dB","int SS signal-to-noise and interference ratio CellInfo#UNAVAILABLE means
 unreported value. |||",,29
<android.telephony.CellSignalStrengthNr: int hashCode()>,,,"Returns a hash code value for the object. This method is
 supported for the benefit of hash tables such as those provided by HashMap . The general contract of hashCode is: Whenever it is invoked on the same object more than once during
     an execution of a Java application the hashCode method
     must consistently return the same integer provided no information
     used in equals comparisons on the object is modified.
     This integer need not remain consistent from one execution of an
     application to another execution of the same application. 
If two objects are equal according to the equals(Object) method then calling the hashCode method on each of
     the two objects must produce the same integer result. 
It is not required that if two objects are unequal
     according to the equals(java.lang.Object) method then calling the hashCode method on each of the
     two objects must produce distinct integer results.  However the
     programmer should be aware that producing distinct integer results
     for unequal objects may improve the performance of hash tables. 
As much as is reasonably practical the hashCode method defined by
 class Object does return distinct integers for distinct
 objects. (This is typically implemented by converting the internal
 address of the object into an integer but this implementation
 technique is not required by the
 Javaâ„¢ programming language.)",int a hash code value for this object. |||,,29
<android.telephony.CellSignalStrengthTdscdma: int describeContents()>,,,Implement the Parcelable interface,"int a bitmask indicating the set of special object types marshaled
 by this Parcelable object instance.
 
 Value is either 0 or CONTENTS_FILE_DESCRIPTOR |||",,29
<android.telephony.CellSignalStrengthTdscdma: int getDbm()>,,,Get the RSCP as dBm value -120..-24dBm or CellInfo#UNAVAILABLE .,int |||,,29
<android.telephony.data.ApnSetting.Builder: ApnSetting.Builder setApnName(String)>,,,Sets the name of the APN.,ApnSetting.Builder This value will never be null . |||,"apnName String : the name to set for the APN
This value may be null . |||",28
<android.telephony.data.ApnSetting.Builder: ApnSetting.Builder setApnTypeBitmask(int)>,,,"Sets the bitmask of APN types. Apn types are usage categories for an APN entry. One APN entry may support multiple
 APN types eg a single APN may service regular internet traffic (""default"") as well as
 MMS-specific connections. The bitmask of APN types is calculated from APN types defined in ApnSetting .",ApnSetting.Builder This value will never be null . |||,"apnTypeBitmask int : a bitmask describing the types of the APN
Value is either 0 or a combination of ApnSetting.TYPE_DEFAULT  ApnSetting.TYPE_MMS  ApnSetting.TYPE_SUPL  ApnSetting.TYPE_DUN  ApnSetting.TYPE_HIPRI  ApnSetting.TYPE_FOTA  ApnSetting.TYPE_IMS  ApnSetting.TYPE_CBS  ApnSetting.TYPE_IA  ApnSetting.TYPE_EMERGENCY  ApnSetting.TYPE_MCX and ApnSetting.TYPE_XCAP |||",28
<android.telephony.data.ApnSetting.Builder: ApnSetting.Builder setAuthType(int)>,,,Sets the authentication type of the APN.,ApnSetting.Builder This value will never be null . |||,"authType int : the authentication type to set for the APN
Value is ApnSetting.AUTH_TYPE_NONE  ApnSetting.AUTH_TYPE_PAP  ApnSetting.AUTH_TYPE_CHAP or ApnSetting.AUTH_TYPE_PAP_OR_CHAP |||",28
<android.telephony.data.ApnSetting.Builder: ApnSetting.Builder setMmsc(Uri)>,3,,Sets the MMSC Uri of the APN.,ApnSetting.Builder This value will never be null . |||,"mmsc Uri : the MMSC Uri to set for the APN
This value may be null . |||",28
<android.telephony.data.ApnSetting.Builder: ApnSetting.Builder setMmsProxyPort(int)>,3,,Sets the MMS proxy port of the APN.,ApnSetting.Builder This value will never be null . |||,mmsPort int : the MMS proxy port to set for the APN |||,28
<android.telephony.data.ApnSetting.Builder: ApnSetting.Builder setProxyAddress(String)>,3,,Sets the proxy address of the APN.,ApnSetting.Builder This value will never be null . |||,"proxy String : the proxy address to set for the APN
This value may be null . |||",29
<android.telephony.data.ApnSetting.Builder: ApnSetting.Builder setUser(String)>,,,Sets the APN username of the APN.,ApnSetting.Builder This value will never be null . |||,"user String : the APN username to set for the APN
This value may be null . |||",28
<android.telephony.data.ApnSetting: boolean isEnabled()>,,,Returns the current status of APN. true : enabled APN. false : disabled APN.,boolean the current status |||,,28
<android.telephony.data.ApnSetting: InetAddress getMmsProxyAddress()>,,,"This method was deprecated
      in API level 29. use getMmsProxyAddressAsString() instead. Gets the MMS proxy address configured for the APN. The MMS proxy address might be an IP
 address or hostname. This method returns null if system networking (typically DNS)
 isnâ€™t available to resolve a hostname valueâ€”values set as IP addresses donâ€™t have this
 restriction. This is a known problem and will be addressed in a future release.",InetAddress the MMS proxy address or null if DNS isnâ€™t available to resolve a hostname |||,,28
<android.telephony.data.ApnSetting: int getId()>,1,,Returns the unique database id for this entry.,int the unique database id |||,,28
<android.telephony.data.ApnSetting: int getMvnoType()>,,,Returns the MVNO match type for this APN.,"int the MVNO match type
 
 Value is MVNO_TYPE_SPN  MVNO_TYPE_IMSI  MVNO_TYPE_GID or MVNO_TYPE_ICCID |||",,28
<android.telephony.data.ApnSetting: String getEntryName()>,,,Gets the human-readable name that describes the APN.,String the entry name for the APN |||,,28
<android.telephony.data.ApnSetting: String getProxyAddressAsString()>,,,Returns the proxy address of the APN.,String proxy address. |||,,29
<android.telephony.emergency.EmergencyNumber: boolean equals(Object)>,,,"Indicates whether some other object is ""equal to"" this one. The equals method implements an equivalence relation
 on non-null object references: It is reflexive : for any non-null reference value x  x.equals(x) should return true . 
It is symmetric : for any non-null reference values x and y  x.equals(y) should return true if and only if y.equals(x) returns true . 
It is transitive : for any non-null reference values x  y and z if x.equals(y) returns true and y.equals(z) returns true then x.equals(z) should return true . 
It is consistent : for any non-null reference values x and y multiple invocations of x.equals(y) consistently return true or consistently return false provided no
     information used in equals comparisons on the
     objects is modified. 
For any non-null reference value x  x.equals(null) should return false . 
The equals method for class Object implements
 the most discriminating possible equivalence relation on objects;
 that is for any non-null reference values x and y this method returns true if and only
 if x and y refer to the same object
 ( x == y has the value true ). Note that it is generally necessary to override the hashCode method whenever this method is overridden so as to maintain the
 general contract for the hashCode method which states
 that equal objects must have equal hash codes.","boolean true if this object is the same as the obj
          argument; false otherwise. |||",o Object : the reference object with which to compare. |||,29
<android.telephony.emergency.EmergencyNumber: boolean isInEmergencyServiceCategories(int)>,,,Checks if the emergency number is in the supplied emergency service category(s).,"boolean true if the emergency number is in the specified emergency service
 category(s) or if its emergency service category is EMERGENCY_SERVICE_CATEGORY_UNSPECIFIED ; false otherwise. |||","categories int : - the supplied emergency service categories
Value is either 0 or a combination of EMERGENCY_SERVICE_CATEGORY_UNSPECIFIED  EMERGENCY_SERVICE_CATEGORY_POLICE  EMERGENCY_SERVICE_CATEGORY_AMBULANCE  EMERGENCY_SERVICE_CATEGORY_FIRE_BRIGADE  EMERGENCY_SERVICE_CATEGORY_MARINE_GUARD  EMERGENCY_SERVICE_CATEGORY_MOUNTAIN_RESCUE  EMERGENCY_SERVICE_CATEGORY_MIEC and EMERGENCY_SERVICE_CATEGORY_AIEC |||",29
<android.telephony.emergency.EmergencyNumber: String getCountryIso()>,,,Get the country code string (lowercase character) in ISO 3166 format of the emergency number.,"String the country code string (lowercase character) in ISO 3166 format.
 
 This value will never be null . |||",,29
<android.telephony.emergency.EmergencyNumber: String getMnc()>,,,Get the Mobile Network Code of the emergency number.,"String the Mobile Network Code of the emergency number.
 
 This value will never be null . |||",,29
<android.telephony.emergency.EmergencyNumber: String toString()>,,,"Returns a string representation of the object. In general the toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the
 object is an instance the at-sign character ` @ ' and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words this method returns a string equal to the
 value of:",String a string representation of the object. |||,,29
<android.telephony.euicc.DownloadableSubscription: DownloadableSubscription forActivationCode(String)>,,,"Create a DownloadableSubscription for the given activation code. This fills the encodedActivationCode field. Other fields like confirmationCode
 carrierName and accessRules may be filled in the implementation of android.service.euicc.EuiccService if exists.",DownloadableSubscription the DownloadableSubscription which may be passed to EuiccManager#downloadSubscription . |||,"encodedActivationCode String : the activation code to use. An activation code can be parsed
from a user scanned QR code. The format of activation code is defined in SGP.22. For
example ""1$SMDP.GSMA.COM$04386-AGYFT-A74Y8-3F815$1.3.6.1.4.1.31746"". For detail see com.android.euicc.data.ActivationCode . Must not be null. |||",28
<android.telephony.euicc.EuiccInfo: int describeContents()>,,,"Describe the kinds of special objects contained in this Parcelable
 instance's marshaled representation. For example if the object will
 include a file descriptor in the output of writeToParcel(android.os.Parcel int) the return value of this method must include the CONTENTS_FILE_DESCRIPTOR bit.","int a bitmask indicating the set of special object types marshaled
 by this Parcelable object instance.
 
 Value is either 0 or CONTENTS_FILE_DESCRIPTOR |||",,28
<android.telephony.euicc.EuiccManager: EuiccInfo getEuiccInfo()>,,,Returns information about the eUICC chip/device.,EuiccInfo the EuiccInfo . May be null if the eUICC is not ready. |||,,28
<android.telephony.euicc.EuiccManager: EuiccManager createForCardId(int)>,,,Create a new EuiccManager object pinned to the given card ID.,"EuiccManager an EuiccManager that uses the given card ID for all calls.
 
 This value will never be null . |||",cardId int |||,29
<android.telephony.euicc.EuiccManager: String getEid()>,,,"Returns the EID identifying the eUICC hardware. Requires that the calling app has carrier privileges on the active subscription on the
 current eUICC. A calling app with carrier privileges for one eUICC may not necessarily have
 access to the EID of another eUICC.",String the EID. May be null if the eUICC is not ready. |||,,28
"<android.telephony.euicc.EuiccManager: void downloadSubscription(DownloadableSubscription,boolean,PendingIntent)>",,,"Attempt to download the given DownloadableSubscription . Requires the android.Manifest.permission#WRITE_EMBEDDED_SUBSCRIPTIONS permission
 or the calling app must be authorized to manage both the currently-active subscription on the
 current eUICC and the subscription to be downloaded according to the subscription metadata.
 Without the former an EMBEDDED_SUBSCRIPTION_RESULT_RESOLVABLE_ERROR will be
 returned in the callback intent to prompt the user to accept the download. On a multi-active SIM device requires the android.Manifest.permission#WRITE_EMBEDDED_SUBSCRIPTIONS permission or a calling app
 only if the targeted eUICC does not currently have an active subscription or the calling app
 is authorized to manage the active subscription on the target eUICC and the calling app is
 authorized to manage any active subscription on any SIM. Without it an EMBEDDED_SUBSCRIPTION_RESULT_RESOLVABLE_ERROR will be returned in the callback
 intent to prompt the user to accept the download. The caller should also be authorized to
 manage the subscription to be downloaded. Requires android.Manifest.permission.WRITE_EMBEDDED_SUBSCRIPTIONS",void,"subscription DownloadableSubscription : the subscription to download. |||
switchAfterDownload boolean : if true the profile will be activated upon successful download. |||
callbackIntent PendingIntent : a PendingIntent to launch when the operation completes. |||",28
"<android.telephony.euicc.EuiccManager: void switchToSubscription(int,PendingIntent)>",,,"Switch to (enable) the given subscription. Requires the android.Manifest.permission#WRITE_EMBEDDED_SUBSCRIPTIONS permission
 or the calling app must be authorized to manage both the currently-active subscription and
 the subscription to be enabled according to the subscription metadata. Without the former
 an EMBEDDED_SUBSCRIPTION_RESULT_RESOLVABLE_ERROR will be returned in the callback
 intent to prompt the user to accept the download. On a multi-active SIM device requires the android.Manifest.permission#WRITE_EMBEDDED_SUBSCRIPTIONS permission or a calling app
  only if the targeted eUICC does not currently have an active subscription or the calling app
 is authorized to manage the active subscription on the target eUICC and the calling app is
 authorized to manage any active subscription on any SIM. Without it an EMBEDDED_SUBSCRIPTION_RESULT_RESOLVABLE_ERROR will be returned in the callback
 intent to prompt the user to accept the download. The caller should also be authorized to
 manage the subscription to be enabled. Requires android.Manifest.permission.WRITE_EMBEDDED_SUBSCRIPTIONS",void,"subscriptionId int : the ID of the subscription to enable. May be SubscriptionManager.INVALID_SUBSCRIPTION_ID to deactivate the
current profile without activating another profile to replace it. If it's a disable
operation requires the android.Manifest.permission#WRITE_EMBEDDED_SUBSCRIPTIONS permission or the calling app must be authorized to manage the active subscription on
the target eUICC. |||
callbackIntent PendingIntent : a PendingIntent to launch when the operation completes. |||",28
<android.telephony.mbms.DownloadRequest.Builder: DownloadRequest build()>,,,,DownloadRequest |||,,28
<android.telephony.mbms.DownloadRequest.Builder: DownloadRequest.Builder fromSerializedRequest(byte)>,,,"This method constructs a new instance of Builder based on the serialized data
 passed in.",DownloadRequest.Builder |||,"data byte : A byte array the contents of which should have been originally obtained
from DownloadRequest#toByteArray() . |||",28
<android.telephony.mbms.DownloadRequest: int getMaxAppIntentSize()>,,,Maximum permissible length for the app's destination path when serialized via Uri#toString() .,int |||,,28
<android.telephony.mbms.DownloadRequest: int getSubscriptionId()>,,,,int The subscription ID on which to perform MBMS operations. |||,,28
<android.telephony.mbms.DownloadRequest: int hashCode()>,,,"Returns a hash code value for the object. This method is
 supported for the benefit of hash tables such as those provided by HashMap . The general contract of hashCode is: Whenever it is invoked on the same object more than once during
     an execution of a Java application the hashCode method
     must consistently return the same integer provided no information
     used in equals comparisons on the object is modified.
     This integer need not remain consistent from one execution of an
     application to another execution of the same application. 
If two objects are equal according to the equals(Object) method then calling the hashCode method on each of
     the two objects must produce the same integer result. 
It is not required that if two objects are unequal
     according to the equals(java.lang.Object) method then calling the hashCode method on each of the
     two objects must produce distinct integer results.  However the
     programmer should be aware that producing distinct integer results
     for unequal objects may improve the performance of hash tables. 
As much as is reasonably practical the hashCode method defined by
 class Object does return distinct integers for distinct
 objects. (This is typically implemented by converting the internal
 address of the object into an integer but this implementation
 technique is not required by the
 Javaâ„¢ programming language.)",int a hash code value for this object. |||,,28
<android.telephony.mbms.DownloadRequest: Uri getDestinationUri()>,,,,Uri The destination Uri of the downloaded file. |||,,28
"<android.telephony.mbms.DownloadRequest: void writeToParcel(Parcel,int)>",,,Flatten this object in to a Parcel.,void,"out Parcel : The Parcel in which the object should be written. |||
flags int : Additional flags about how the object should be written.
May be 0 or Parcelable.PARCELABLE_WRITE_RETURN_VALUE .
Value is either 0 or a combination of Parcelable.PARCELABLE_WRITE_RETURN_VALUE and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES |||",28
<android.telephony.mbms.FileInfo: int describeContents()>,,,"Describe the kinds of special objects contained in this Parcelable
 instance's marshaled representation. For example if the object will
 include a file descriptor in the output of writeToParcel(android.os.Parcel int) the return value of this method must include the CONTENTS_FILE_DESCRIPTOR bit.","int a bitmask indicating the set of special object types marshaled
 by this Parcelable object instance.
 
 Value is either 0 or CONTENTS_FILE_DESCRIPTOR |||",,28
<android.telephony.mbms.FileInfo: Uri getUri()>,,,,"Uri The URI in the carrier's infrastructure which points to this file. Apps should
 negotiate the contents of this URI separately with the carrier. |||",,28
<android.telephony.mbms.FileServiceInfo: int describeContents()>,,,"Describe the kinds of special objects contained in this Parcelable
 instance's marshaled representation. For example if the object will
 include a file descriptor in the output of writeToParcel(android.os.Parcel int) the return value of this method must include the CONTENTS_FILE_DESCRIPTOR bit.","int a bitmask indicating the set of special object types marshaled
 by this Parcelable object instance.
 
 Value is either 0 or CONTENTS_FILE_DESCRIPTOR |||",,28
"<android.telephony.mbms.GroupCall: void updateGroupCall(List,List)>",,,"Send an update to the middleware when the SAI (Service Area Identifier) list and frequency
 information of the group call has * changed. Callers must obtain this information from the
 wireless carrier independently.",void,"saiList List : New list of SAIs that the call is available on.
This value must never be null . |||
frequencyList List : New list of frequencies that the call is available on.
This value must never be null . |||",29
<android.telephony.mbms.MbmsDownloadSessionCallback: void onMiddlewareReady()>,,,"Called to indicate that the middleware has been initialized and is ready.

 Before this method is called calling any method on an instance of MbmsDownloadSession will result in an IllegalStateException being thrown or onError(int java.lang.String) being called with error code MbmsErrors.GeneralErrors#ERROR_MIDDLEWARE_NOT_YET_READY",void,,28
<android.telephony.mbms.MbmsStreamingSessionCallback: void onStreamingServicesUpdated(List)>,,,"Called to indicate published Streaming Services have changed.

 This will only be called after the application has requested
 a list of streaming services and specified a service class list
 of interest AND the results of a subsequent getStreamServices
 call with the same service class list would return different
 results.",void,services List : The list of available services. |||,28
<android.telephony.mbms.ServiceInfo: boolean equals(Object)>,,,"Indicates whether some other object is ""equal to"" this one. The equals method implements an equivalence relation
 on non-null object references: It is reflexive : for any non-null reference value x  x.equals(x) should return true . 
It is symmetric : for any non-null reference values x and y  x.equals(y) should return true if and only if y.equals(x) returns true . 
It is transitive : for any non-null reference values x  y and z if x.equals(y) returns true and y.equals(z) returns true then x.equals(z) should return true . 
It is consistent : for any non-null reference values x and y multiple invocations of x.equals(y) consistently return true or consistently return false provided no
     information used in equals comparisons on the
     objects is modified. 
For any non-null reference value x  x.equals(null) should return false . 
The equals method for class Object implements
 the most discriminating possible equivalence relation on objects;
 that is for any non-null reference values x and y this method returns true if and only
 if x and y refer to the same object
 ( x == y has the value true ). Note that it is generally necessary to override the hashCode method whenever this method is overridden so as to maintain the
 general contract for the hashCode method which states
 that equal objects must have equal hash codes.","boolean true if this object is the same as the obj
          argument; false otherwise. |||",o Object : the reference object with which to compare. |||,28
<android.telephony.mbms.ServiceInfo: Date getSessionEndTime()>,,,The end time indicating when this session stops being available.,Date |||,,28
<android.telephony.mbms.ServiceInfo: Date getSessionStartTime()>,,,The start time indicating when this service will be available.,Date |||,,28
<android.telephony.mbms.ServiceInfo: int hashCode()>,,,"Returns a hash code value for the object. This method is
 supported for the benefit of hash tables such as those provided by HashMap . The general contract of hashCode is: Whenever it is invoked on the same object more than once during
     an execution of a Java application the hashCode method
     must consistently return the same integer provided no information
     used in equals comparisons on the object is modified.
     This integer need not remain consistent from one execution of an
     application to another execution of the same application. 
If two objects are equal according to the equals(Object) method then calling the hashCode method on each of
     the two objects must produce the same integer result. 
It is not required that if two objects are unequal
     according to the equals(java.lang.Object) method then calling the hashCode method on each of the
     two objects must produce distinct integer results.  However the
     programmer should be aware that producing distinct integer results
     for unequal objects may improve the performance of hash tables. 
As much as is reasonably practical the hashCode method defined by
 class Object does return distinct integers for distinct
 objects. (This is typically implemented by converting the internal
 address of the object into an integer but this implementation
 technique is not required by the
 Javaâ„¢ programming language.)",int a hash code value for this object. |||,,28
<android.telephony.mbms.ServiceInfo: Set getNamedContentLocales()>,,,"Return an unmodifiable set of the current Locale s that have a user-displayable name
 associated with them. The user-displayable name associated with any Locale in this
 set can be retrieved with getNameForLocale(java.util.Locale) .","Set < Locale > An unmodifiable set of Locale objects corresponding to a user-displayable
 content name in that locale.
 
 This value will never be null . |||",,28
<android.telephony.mbms.ServiceInfo: String getServiceClassName()>,,,The class name for this service - used to categorize and filter,String |||,,28
<android.telephony.mbms.StreamingService: StreamingServiceInfo getInfo()>,,,Retrieve the StreamingServiceInfo corresponding to this stream.,StreamingServiceInfo |||,,28
<android.telephony.mbms.StreamingService: void close()>,,,"Stop streaming this service. Further operations on this object will fail with an IllegalStateException .

 May throw an IllegalArgumentException or an IllegalStateException",void,,28
"<android.telephony.mbms.StreamingServiceCallback: void onError(int,String)>",,,"Called by the middleware when it has detected an error condition in this stream. The
 possible error codes are listed in MbmsErrors .",void,"errorCode int : The error code.
Value is MbmsErrors.ERROR_NO_UNIQUE_MIDDLEWARE  MbmsErrors.ERROR_MIDDLEWARE_LOST  MbmsErrors.ERROR_MIDDLEWARE_NOT_BOUND  MbmsErrors.GeneralErrors.ERROR_MIDDLEWARE_NOT_YET_READY  MbmsErrors.GeneralErrors.ERROR_OUT_OF_MEMORY  MbmsErrors.GeneralErrors.ERROR_MIDDLEWARE_TEMPORARILY_UNAVAILABLE  MbmsErrors.GeneralErrors.ERROR_IN_E911  MbmsErrors.GeneralErrors.ERROR_NOT_CONNECTED_TO_HOME_CARRIER_LTE  MbmsErrors.GeneralErrors.ERROR_UNABLE_TO_READ_SIM  MbmsErrors.GeneralErrors.ERROR_CARRIER_CHANGE_NOT_ALLOWED  MbmsErrors.StreamingErrors.ERROR_CONCURRENT_SERVICE_LIMIT_REACHED  MbmsErrors.StreamingErrors.ERROR_UNABLE_TO_START_SERVICE or MbmsErrors.StreamingErrors.ERROR_DUPLICATE_START_STREAM |||
message String : A human-readable message generated by the middleware for debugging purposes.
This value may be null . |||",28
"<android.telephony.mbms.StreamingServiceCallback: void onStreamStateUpdated(int,int)>",,,"Called to indicate this stream has changed state.

 See StreamingService#STATE_STOPPED  StreamingService#STATE_STARTED and StreamingService#STATE_STALLED .",void,"state int : Value is StreamingService.STATE_STOPPED  StreamingService.STATE_STARTED or StreamingService.STATE_STALLED |||
reason int : Value is StreamingService.REASON_BY_USER_REQUEST  StreamingService.REASON_END_OF_SESSION  StreamingService.REASON_FREQUENCY_CONFLICT  StreamingService.REASON_OUT_OF_MEMORY  StreamingService.REASON_NOT_CONNECTED_TO_HOMECARRIER_LTE  StreamingService.REASON_LEFT_MBMS_BROADCAST_AREA or StreamingService.REASON_NONE |||",28
<android.telephony.mbms.StreamingServiceInfo: int describeContents()>,,,"Describe the kinds of special objects contained in this Parcelable
 instance's marshaled representation. For example if the object will
 include a file descriptor in the output of writeToParcel(android.os.Parcel int) the return value of this method must include the CONTENTS_FILE_DESCRIPTOR bit.","int a bitmask indicating the set of special object types marshaled
 by this Parcelable object instance.
 
 Value is either 0 or CONTENTS_FILE_DESCRIPTOR |||",,28
<android.telephony.MbmsDownloadSession: File getTempFileRootDirectory()>,,,"Retrieves the currently configured temp file root directory. Returns the file that was
 configured via setTempFileRootDirectory(java.io.File) or the default directory download(android.telephony.mbms.DownloadRequest) was called without ever
 setting the temp file root. If neither method has been called since the last time the app's
 shared preferences were reset returns null .","File A File pointing to the configured temp file directory or null if not yet
         configured. |||",,28
<android.telephony.MbmsDownloadSession: List listPendingDownloads()>,,,"Returns a list of pending DownloadRequest s that originated from this application.
 A pending request is one that was issued via download(android.telephony.mbms.DownloadRequest) but not cancelled through cancelDownload(android.telephony.mbms.DownloadRequest) .","List < DownloadRequest > A list possibly empty of DownloadRequest s
 
 This value will never be null . |||",,28
"<android.telephony.MbmsDownloadSession: void removeProgressListener(DownloadRequest,DownloadProgressListener)>",,,"Un-register a listener previously registered via addProgressListener(android.telephony.mbms.DownloadRequest java.util.concurrent.Executor android.telephony.mbms.DownloadProgressListener) . After
 this method is called no further callbacks will be enqueued on the Handler provided upon registration even if this method throws an exception.

 If the middleware is not aware of the specified download request
 this method will throw an IllegalArgumentException .

 If the operation encountered an error the error code will be delivered via MbmsDownloadSessionCallback#onError .",void,"request DownloadRequest : The DownloadRequest provided during registration
This value must never be null . |||
listener DownloadProgressListener : The listener provided during registration.
This value must never be null . |||",28
"<android.telephony.MbmsDownloadSession: void removeStatusListener(DownloadRequest,DownloadStatusListener)>",,,"Un-register a listener previously registered via addStatusListener(android.telephony.mbms.DownloadRequest java.util.concurrent.Executor android.telephony.mbms.DownloadStatusListener) . After
 this method is called no further calls will be enqueued on the Executor provided upon registration even if this method throws an exception.

 If the middleware is not aware of the specified download request
 this method will throw an IllegalArgumentException .

 If the operation encountered an error the error code will be delivered via MbmsDownloadSessionCallback#onError .",void,"request DownloadRequest : The DownloadRequest provided during registration
This value must never be null . |||
listener DownloadStatusListener : The listener provided during registration.
This value must never be null . |||",28
"<android.telephony.MbmsDownloadSession: void requestDownloadState(DownloadRequest,FileInfo)>",,,"Requests information about the state of a file pending download.

 The state will be delivered as a callback via DownloadStatusListener#onStatusUpdated(DownloadRequest FileInfo int) . If no such
 callback has been registered via addProgressListener(android.telephony.mbms.DownloadRequest java.util.concurrent.Executor android.telephony.mbms.DownloadProgressListener) this
 method will be a no-op.

 If the middleware has no record of the
 file indicated by fileInfo being associated with downloadRequest an IllegalArgumentException will be thrown.",void,"downloadRequest DownloadRequest : The download request to query. |||
fileInfo FileInfo : The particular file within the request to get information on. |||",28
<android.telephony.MbmsDownloadSession: void setTempFileRootDirectory(File)>,,,"Sets the temp file root for downloads.
 All temp files created for the middleware to write to will be contained in the specified
 directory. Applications that wish to specify a location only need to call this method once
 as long their data is persisted in storage -- the argument will be stored both in a
 local instance of SharedPreferences and by the middleware.

 If this method is not called at least once before calling download(android.telephony.mbms.DownloadRequest) the framework
 will default to a directory formed by the concatenation of the app's files directory and MbmsDownloadSession#DEFAULT_TOP_LEVEL_TEMP_DIRECTORY .

 Before calling this method the app must cancel all of its pending DownloadRequest s via cancelDownload(android.telephony.mbms.DownloadRequest) . If this is not done
 you will receive an asynchronous error with code MbmsErrors.DownloadErrors#ERROR_CANNOT_CHANGE_TEMP_FILE_ROOT unless the
 provided directory is the same as what has been previously configured.

 The File supplied as a root temp file directory must already exist. If not an IllegalArgumentException will be thrown. In addition as an additional sanity
 check an IllegalArgumentException will be thrown if you attempt to set the temp
 file root directory to one of your data roots (the value of Context#getDataDir()  Context#getFilesDir() or Context#getCacheDir() ).",void,"tempFileRootDirectory File : A directory to place temp files in.
This value must never be null . |||",28
"<android.telephony.MbmsGroupCallSession: GroupCall startGroupCall(long,List,List,Executor,GroupCallCallback)>",,,"Starts the requested group call reporting status to the indicated callback.
 Returns an object used to control that call.

 May throw an IllegalArgumentException or an IllegalStateException Asynchronous errors through the callback include any of the errors in MbmsErrors.GeneralErrors .","GroupCall An instance of GroupCall through which the call can be controlled.
         May be null if an error occurred. |||","tmgi long : The TMGI an identifier for the group call you want to join. |||
saiList List : A list of SAIs for the group call that should be negotiated separately with
the carrier.
This value must never be null . |||
frequencyList List : A lost of frequencies for the group call that should be negotiated
separately with the carrier.
This value must never be null . |||
executor Executor : The executor on which you wish to execute callbacks for this stream.
This value must never be null . |||
callback GroupCallCallback : The callback that you want to receive information about the call on.
This value must never be null . |||",29
"<android.telephony.MbmsGroupCallSession: MbmsGroupCallSession create(Context,int,Executor,MbmsGroupCallSessionCallback)>",1,,"Create a new MbmsGroupCallSession using the given subscription ID.

 You may only have one instance of MbmsGroupCallSession per UID. If you call this
 method while there is an active instance of MbmsGroupCallSession in your process
 (in other words one that has not had close() called on it) this method will
 throw an IllegalStateException . If you call this method in a different process
 running under the same UID an error will be indicated via MbmsGroupCallSessionCallback#onError(int String) .

 Note that initialization may fail asynchronously. If you wish to try again after you
 receive such an asynchronous error you must call close() on the instance of MbmsGroupCallSession that you received before calling this method again.",MbmsGroupCallSession An instance of MbmsGroupCallSession or null if an error occurred. |||,"context Context : The Context to use.
This value must never be null . |||
subscriptionId int : The subscription ID to use. |||
executor Executor : The executor on which you wish to execute callbacks.
This value must never be null . |||
callback MbmsGroupCallSessionCallback : A callback object on which you wish to receive results of asynchronous
operations.
This value must never be null . |||",29
"<android.telephony.MbmsStreamingSession: MbmsStreamingSession create(Context,Executor,int,MbmsStreamingSessionCallback)>",1,,"Create a new MbmsStreamingSession using the given subscription ID.

 Note that this call will bind a remote service. You may not call this method on your app's
 main thread.

 You may only have one instance of MbmsStreamingSession per UID. If you call this
 method while there is an active instance of MbmsStreamingSession in your process
 (in other words one that has not had close() called on it) this method will
 throw an IllegalStateException . If you call this method in a different process
 running under the same UID an error will be indicated via MbmsStreamingSessionCallback#onError(int String) .

 Note that initialization may fail asynchronously. If you wish to try again after you
 receive such an asynchronous error you must call close() on the instance of MbmsStreamingSession that you received before calling this method again.",MbmsStreamingSession An instance of MbmsStreamingSession or null if an error occurred. |||,"context Context : The Context to use.
This value must never be null . |||
executor Executor : The executor on which you wish to execute callbacks.
This value must never be null . |||
subscriptionId int : The subscription ID to use. |||
callback MbmsStreamingSessionCallback : A callback object on which you wish to receive results of asynchronous
operations.
This value must never be null . |||",28
<android.telephony.NetworkScanRequest: boolean getIncrementalResults()>,3,,"Returns whether incremental result is enabled.
 FALSE â€“ Incremental results is not enabled.
 TRUE â€“ Incremental results is reported.",boolean |||,,28
<android.telephony.NetworkScanRequest: int getScanType()>,3,,Returns the type of the scan.,int Value is SCAN_TYPE_ONE_SHOT or SCAN_TYPE_PERIODIC |||,,28
"<android.telephony.NetworkScanRequest: void writeToParcel(Parcel,int)>",2,,Flatten this object in to a Parcel.,void,"dest Parcel : The Parcel in which the object should be written. |||
flags int : Additional flags about how the object should be written.
May be 0 or Parcelable.PARCELABLE_WRITE_RETURN_VALUE .
Value is either 0 or a combination of Parcelable.PARCELABLE_WRITE_RETURN_VALUE and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES |||",28
"<android.telephony.PhoneNumberUtils: byte numberToCalledPartyBCD(String,int)>",3,,Convert a dialing number to BCD byte array,byte[] BCD byte array |||,"number String : dialing number string. If the dialing number starts with '+' set to
international TOA |||
bcdExtType int : used to determine the extended bcd coding
Value is BCD_EXTENDED_TYPE_EF_ADN or BCD_EXTENDED_TYPE_CALLED_PARTY |||",28
<android.telephony.PhoneStateListener: void onUserMobileDataStateChanged(boolean)>,3,,"Callback invoked when the user mobile data state has changed on the registered subscription.
 Note the registration subId comes from TelephonyManager object which registers
 PhoneStateListener by TelephonyManager#listen(PhoneStateListener int) .
 If this TelephonyManager object was created with TelephonyManager#createForSubscriptionId(int) then the callback applies to the
 subId. Otherwise this callback applies to SubscriptionManager#getDefaultSubscriptionId() .",void,enabled boolean : indicates whether the current user mobile data state is enabled or disabled. |||,28
<android.telephony.RadioAccessSpecifier: int describeContents()>,1,,"Describe the kinds of special objects contained in this Parcelable
 instance's marshaled representation. For example if the object will
 include a file descriptor in the output of writeToParcel(android.os.Parcel int) the return value of this method must include the CONTENTS_FILE_DESCRIPTOR bit.","int a bitmask indicating the set of special object types marshaled
 by this Parcelable object instance.
 
 Value is either 0 or CONTENTS_FILE_DESCRIPTOR |||",,28
<android.telephony.ServiceState: int getCdmaSystemId()>,1,,"Get the CDMA SID (System Identification Number) a number uniquely identifying a wireless
 system. (Defined in 3GPP2 C.S0023 3.4.8)",int The CDMA SID or UNKNOWN_ID if not available. |||,,28
<android.telephony.ServiceState: int getChannelNumber()>,1,,Get the channel number of the current primary serving cell or -1 if unknown This is EARFCN for LTE UARFCN for UMTS and ARFCN for GSM.,int Channel number of primary serving cell |||,,28
"<android.telephony.SmsManager: String createAppSpecificSmsTokenWithPackageInfo(String,PendingIntent)>",,,"Create a single use app specific incoming SMS request for the calling package.

 This method returns a token that if included in a subsequent incoming SMS message and the
 SMS message has a prefix from the given prefixes list the provided intent will be
 sent with the SMS data to the calling package.

 The token is only good for one use within a reasonable amount of time. After an SMS has been
 received containing the token all subsequent SMS messages with the token will be routed as
 normal.

 An app can only have one request at a time if the app already has a request pending it will
 be replaced with a new request. Note: This method will never trigger an SMS disambiguation
 dialog. If this method is called on a device that has multiple active subscriptions this SmsManager instance has been created with getDefault() and no user-defined
 default subscription is defined the subscription ID associated with this message will be
 INVALID which will result in the operation being completed on the subscription associated
 with logical slot 0. Use getSmsManagerForSubscriptionId(int) to ensure the
 operation is performed on the correct subscription.","String Token to include in an SMS message.
 
 This value may be null . |||","prefixes String : this is a list of prefixes string separated by REGEX_PREFIX_DELIMITER. The
matching SMS message should have at least one of the prefixes in the beginning of the
message.
This value may be null . |||
intent PendingIntent : this intent is sent when the matching SMS message is received.
This value must never be null . |||",29
"<android.telephony.SmsManager: void getSmsMessagesForFinancialApp(Bundle,Executor,SmsManager.FinancialSmsCallback)>",,,"Get SMS messages for the calling financial app.
 The result will be delivered asynchronously in the passing in callback interface. Note: This method will never trigger an SMS disambiguation
 dialog. If this method is called on a device that has multiple active subscriptions this SmsManager instance has been created with getDefault() and no user-defined
 default subscription is defined the subscription ID associated with this message will be
 INVALID which will result in the operation being completed on the subscription associated
 with logical slot 0. Use getSmsManagerForSubscriptionId(int) to ensure the
 operation is performed on the correct subscription.",void,"params Bundle : the parameters to filter SMS messages returned. |||
executor Executor : the executor on which callback will be invoked.
This value must never be null .
Callback and listener events are dispatched through this Executor providing an easy way to control which thread is
used. To dispatch events through the main thread of your
application you can use Context.getMainExecutor() .
To dispatch events through a shared thread pool you can use AsyncTask#THREAD_POOL_EXECUTOR . |||
callback SmsManager.FinancialSmsCallback : a callback to receive CursorWindow with SMS messages.
This value must never be null . |||",29
"<android.telephony.SmsManager: void sendTextMessageWithoutPersisting(String,String,String,PendingIntent,PendingIntent)>",2,,"Send a text based SMS without writing it into the SMS Provider. The message will be sent directly over the network and will not be visible in SMS
 applications. Intended for internal carrier use only. Requires Permission: Both Manifest.permission.SEND_SMS and Manifest.permission.MODIFY_PHONE_STATE or that the calling app has carrier
 privileges (see TelephonyManager#hasCarrierPrivileges ) or that the calling app is
 the default IMS app (see CarrierConfigManager#KEY_CONFIG_IMS_PACKAGE_OVERRIDE_STRING ). Note: This method is intended for internal use by carrier
 applications or the Telephony framework and will never trigger an SMS disambiguation
 dialog. If this method is called on a device that has multiple active subscriptions this SmsManager instance has been created with getDefault() and no user-defined
 default subscription is defined the subscription ID associated with this message will be
 INVALID which will result in the SMS being sent on the subscription associated with logical
 slot 0. Use getSmsManagerForSubscriptionId(int) to ensure the SMS is sent on the
 correct subscription.",void,"destinationAddress String |||
scAddress String |||
text String |||
sentIntent PendingIntent |||
deliveryIntent PendingIntent |||",28
<android.telephony.SubscriptionInfo: ParcelUuid getGroupUuid()>,1,,"Used in scenarios where different subscriptions are bundled as a group.
 It's typically a primary and an opportunistic subscription. (see isOpportunistic() )
 Such that those subscriptions will have some affiliated behaviors such as opportunistic
 subscription may be invisible to the user.","ParcelUuid group UUID a String of group UUID if it belongs to a group. Otherwise
 it will return null. |||",,29
<android.telephony.SubscriptionManager: void removeOnOpportunisticSubscriptionsChangedListener(SubscriptionManager.OnOpportunisticSubscriptionsChangedListener)>,,,"Unregister the OnOpportunisticSubscriptionsChangedListener that is currently
 listening opportunistic subscriptions change. This is not strictly necessary
 as the listener will automatically be unregistered if an attempt to invoke the listener
 fails.",void,"listener SubscriptionManager.OnOpportunisticSubscriptionsChangedListener : that is to be unregistered.
This value must never be null . |||",29
"<android.telephony.SubscriptionManager: void switchToSubscription(int,PendingIntent)>",2,,Switch to a certain subscription Requires android.Manifest.permission.WRITE_EMBEDDED_SUBSCRIPTIONS,void,"subId int : sub id |||
callbackIntent PendingIntent : pending intent that will be sent after operation is done.
This value must never be null . |||",29
"<android.telephony.SubscriptionPlan.Builder: SubscriptionPlan.Builder setDataUsage(long,long)>",2,,Set a snapshot of currently known mobile data usage.,SubscriptionPlan.Builder |||,"dataUsageBytes long : the currently known mobile data usage
Value is a non-negative number of bytes. |||
dataUsageTime long : the time at which this snapshot was valid
Value is a non-negative timestamp measured as the number of
milliseconds since 1970-01-01T00:00:00Z. |||",28
<android.telephony.SubscriptionPlan: int hashCode()>,1,,"Returns a hash code value for the object. This method is
 supported for the benefit of hash tables such as those provided by HashMap . The general contract of hashCode is: Whenever it is invoked on the same object more than once during
     an execution of a Java application the hashCode method
     must consistently return the same integer provided no information
     used in equals comparisons on the object is modified.
     This integer need not remain consistent from one execution of an
     application to another execution of the same application. 
If two objects are equal according to the equals(Object) method then calling the hashCode method on each of
     the two objects must produce the same integer result. 
It is not required that if two objects are unequal
     according to the equals(java.lang.Object) method then calling the hashCode method on each of the
     two objects must produce distinct integer results.  However the
     programmer should be aware that producing distinct integer results
     for unequal objects may improve the performance of hash tables. 
As much as is reasonably practical the hashCode method defined by
 class Object does return distinct integers for distinct
 objects. (This is typically implemented by converting the internal
 address of the object into an integer but this implementation
 technique is not required by the
 Javaâ„¢ programming language.)",int a hash code value for this object. |||,,28
<android.telephony.SubscriptionPlan: long getDataLimitBytes()>,1,,Return the usage threshold at which data access changes according to getDataLimitBehavior() . Value is a non-negative number of bytes.,long Value is a non-negative number of bytes. |||,,28
<android.telephony.SubscriptionPlan: long getDataUsageBytes()>,1,,Return a snapshot of currently known mobile data usage at getDataUsageTime() . Value is a non-negative number of bytes.,long Value is a non-negative number of bytes. |||,,28
<android.telephony.SubscriptionPlan: String toString()>,1,,"Returns a string representation of the object. In general the toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the
 object is an instance the at-sign character ` @ ' and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words this method returns a string equal to the
 value of:",String a string representation of the object. |||,,28
<android.telephony.TelephonyManager: boolean doesSwitchMultiSimConfigTriggerReboot()>,1,,"Get whether making changes to modem configurations by switchMultiSimConfig(int) will
 trigger device reboot.
 The modem configuration change refers to switching from single SIM configuration to DSDS
 or the other way around. Requires Permission: READ_PHONE_STATE or that the
 calling app has carrier privileges (see hasCarrierPrivileges() ). Requires Manifest.permission.READ_PHONE_STATE","boolean true if reboot will be triggered after making changes to modem
 configurations otherwise return false . |||",,29
<android.telephony.TelephonyManager: CharSequence getSimSpecificCarrierIdName()>,1,,"Similar like getSimCarrierIdName() returns user-facing name of the
 specific carrier id returned by getSimSpecificCarrierId() .

 The specific carrier ID would be used for configuration purposes but apps wishing to know
 about the carrier itself should use the regular carrier ID returned by getSimCarrierIdName() . The returned name is unlocalized.","CharSequence user-facing name of the subscription specific carrier id. Return null if the
 subscription is unavailable or the carrier cannot be identified. |||",,29
<android.telephony.TelephonyManager: String getTypeAllocationCode()>,1,,"Returns the Type Allocation Code from the IMEI. Return null if Type Allocation Code is not
 available.",String |||,,29
"<android.test.IsolatedContext: boolean bindService(Intent,int,Executor,ServiceConnection)>",2,,"Same as bindService(android.content.Intent android.content.ServiceConnection int) with executor to control
 ServiceConnection callbacks.",boolean |||,"service Intent : This value must never be null . |||
flags int : Value is either 0 or a combination of Context.BIND_AUTO_CREATE  Context.BIND_DEBUG_UNBIND  Context.BIND_NOT_FOREGROUND  Context.BIND_ABOVE_CLIENT  Context.BIND_ALLOW_OOM_MANAGEMENT  Context.BIND_WAIVE_PRIORITY  Context.BIND_IMPORTANT  Context.BIND_ADJUST_WITH_ACTIVITY  Context.BIND_NOT_PERCEPTIBLE and Context.BIND_INCLUDE_CAPABILITIES |||
executor Executor : Callbacks on ServiceConnection will be called on executor. Must use same
instance for the same instance of ServiceConnection.
This value must never be null .
Callback and listener events are dispatched through this Executor providing an easy way to control which thread is
used. To dispatch events through the main thread of your
application you can use Context.getMainExecutor() .
To dispatch events through a shared thread pool you can use AsyncTask#THREAD_POOL_EXECUTOR . |||
conn ServiceConnection : This value must never be null . |||",29
<android.test.mock.MockContext: Executor getMainExecutor()>,,,"Return an Executor that will run enqueued tasks on the main
 thread associated with this context. This is the thread used to dispatch
 calls to application components (activities services etc).",Executor |||,,28
"<android.test.mock.MockPackageManager: boolean hasSigningCertificate(int,byte,int)>",,,"Searches the set of signing certificates by which the package(s) for the given uid has proven
 to have been signed.  For multiple packages sharing the same uid this will return the
 signing certificates found in the signing history of the ""newest"" package where ""newest""
 indicates the package with the newest signing certificate in the shared uid group.  This
 method should be used instead of getPackageInfo with GET_SIGNATURES since it takes into account the possibility of signing certificate rotation except in the
 case of packages that are signed by multiple certificates for which signing certificate
 rotation is not supported. This method is analogous to using getPackagesForUid followed by getPackageInfo with GET_SIGNING_CERTIFICATES selecting the PackageInfo of the newest-signed bpackage  and finally searching through the
 resulting signingInfo field to see if the desired certificate is there.",boolean true if this package was or is signed by exactly the certificate certificate |||,"uid int : uid whose signing certificates to check |||
certificate byte : signing certificate for which to search
This value must never be null . |||
type int : Value is PackageManager.CERT_INPUT_RAW_X509 or PackageManager.CERT_INPUT_SHA256 |||",28
"<android.text.DynamicLayout.Builder: DynamicLayout.Builder obtain(CharSequence,TextPaint,int)>",,,Obtain a builder for constructing DynamicLayout objects.,DynamicLayout.Builder This value will never be null . |||,"base CharSequence : This value must never be null . |||
paint TextPaint : This value must never be null . |||
width int : Value is 0 or greater |||",28
<android.text.DynamicLayout.Builder: DynamicLayout.Builder setEllipsize(TextUtils.TruncateAt)>,,,"Set ellipsizing on the layout. Causes words that are longer than the view is wide or
 exceeding the number of lines (see #setMaxLines) in the case of TextUtils.TruncateAt.END or TextUtils.TruncateAt.MARQUEE to be ellipsized instead of broken.
 The default is null indicating no ellipsis is to be applied.",DynamicLayout.Builder this builder useful for chaining |||,"ellipsize TextUtils.TruncateAt : type of ellipsis behavior
This value may be null . |||",28
<android.text.DynamicLayout.Builder: DynamicLayout.Builder setHyphenationFrequency(int)>,,,"Set hyphenation frequency to control the amount of automatic hyphenation used. The
 possible values are defined in Layout by constants named with the pattern HYPHENATION_FREQUENCY_* . The default is Layout#HYPHENATION_FREQUENCY_NONE .","DynamicLayout.Builder this builder useful for chaining
 This value will never be null . |||","hyphenationFrequency int : hyphenation frequency for the paragraph
Value is Layout.HYPHENATION_FREQUENCY_NORMAL  Layout.HYPHENATION_FREQUENCY_FULL or Layout.HYPHENATION_FREQUENCY_NONE |||",28
<android.text.DynamicLayout.Builder: DynamicLayout.Builder setJustificationMode(int)>,3,,"Set paragraph justification mode. The default value is Layout#JUSTIFICATION_MODE_NONE . If the last line is too short for justification
 the last line will be displayed with the alignment set by setAlignment(Layout.Alignment) .","DynamicLayout.Builder this builder useful for chaining.
 
 This value will never be null . |||","justificationMode int : justification mode for the paragraph.
Value is LineBreaker.JUSTIFICATION_MODE_NONE or LineBreaker.JUSTIFICATION_MODE_INTER_WORD |||",28
<android.text.DynamicLayout.Builder: DynamicLayout.Builder setTextDirection(TextDirectionHeuristic)>,3,,"Set the text direction heuristic. The text direction heuristic is used to resolve text
 direction per-paragraph based on the input text. The default is TextDirectionHeuristics#FIRSTSTRONG_LTR .","DynamicLayout.Builder this builder useful for chaining
 
 This value will never be null . |||","textDir TextDirectionHeuristic : text direction heuristic for resolving bidi behavior.
This value must never be null . |||",28
<android.text.PrecomputedText.Params: int getBreakStrategy()>,3,,Returns the break strategy for this text.,"int A line break strategy
 
 Value is LineBreaker.BREAK_STRATEGY_SIMPLE  LineBreaker.BREAK_STRATEGY_HIGH_QUALITY or LineBreaker.BREAK_STRATEGY_BALANCED |||",,28
<android.text.PrecomputedText.Params: int hashCode()>,,,"Returns a hash code value for the object. This method is
 supported for the benefit of hash tables such as those provided by HashMap . The general contract of hashCode is: Whenever it is invoked on the same object more than once during
     an execution of a Java application the hashCode method
     must consistently return the same integer provided no information
     used in equals comparisons on the object is modified.
     This integer need not remain consistent from one execution of an
     application to another execution of the same application. 
If two objects are equal according to the equals(Object) method then calling the hashCode method on each of
     the two objects must produce the same integer result. 
It is not required that if two objects are unequal
     according to the equals(java.lang.Object) method then calling the hashCode method on each of the
     two objects must produce distinct integer results.  However the
     programmer should be aware that producing distinct integer results
     for unequal objects may improve the performance of hash tables. 
As much as is reasonably practical the hashCode method defined by
 class Object does return distinct integers for distinct
 objects. (This is typically implemented by converting the internal
 address of the object into an integer but this implementation
 technique is not required by the
 Javaâ„¢ programming language.)",int a hash code value for this object. |||,,28
<android.text.PrecomputedText.Params: TextPaint getTextPaint()>,,,Returns the TextPaint for this text.,TextPaint A TextPaint This value will never be null . |||,,28
<android.text.PrecomputedText: int getSpanFlags(Object)>,,,"Return the flags that were specified when Spannable#setSpan was
 used to attach the specified markup object or 0 if the specified
 object has not been attached.",int |||,tag Object |||,28
<android.text.PrecomputedText: int getSpanStart(Object)>,,,"Return the beginning of the range of text to which the specified
 markup object is attached or -1 if the object is not attached.",int |||,tag Object |||,28
<android.text.PrecomputedText: String toString()>,,,"Returns a string representation of the object. In general the toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the
 object is an instance the at-sign character ` @ ' and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words this method returns a string equal to the
 value of:",String a string representation of the object. |||,,28
"<android.text.PrecomputedText: T getSpans(int,int,Class)>",,,"Return an array of the markup objects attached to the specified
 slice of this CharSequence and whose type is the specified type
 or a subclass of it.  Specify Object.class for the type if you
 want all the objects regardless of type.",T[] |||,"start int |||
end int |||
type Class |||",28
"<android.text.PrecomputedText: void getBounds(int,int,Rect)>",,,"Retrieves the text bounding box for the given range.
 Both start and end offset need to be in the same paragraph otherwise
 IllegalArgumentException will be thrown.",void,"start int : the inclusive start offset in the text
Value is 0 or greater |||
end int : the exclusive end offset in the text
Value is 0 or greater |||
bounds Rect : the output rectangle
This value must never be null . |||",28
<android.text.style.BulletSpan: int getGapWidth()>,3,,Get the distance in pixels between the bullet point and the paragraph.,int the distance in pixels between the bullet point and the paragraph. |||,,28
<android.text.style.LineBackgroundSpan.Standard: int getSpanTypeId()>,1,,Return a special type identifier for this span class.,int |||,,29
"<android.text.style.LineBackgroundSpan.Standard: void drawBackground(Canvas,Paint,int,int,int,int,int,CharSequence,int,int,int)>",2,,Draw the background on the canvas.,void,"canvas Canvas : This value must never be null . |||
paint Paint : This value must never be null . |||
left int : This units of this value are pixels. |||
right int : This units of this value are pixels. |||
top int : This units of this value are pixels. |||
baseline int : This units of this value are pixels. |||
bottom int : This units of this value are pixels. |||
text CharSequence : This value must never be null . |||
start int : start character index of the line |||
end int : end character index of the line |||
lineNumber int : line number in the current text layout |||",29
"<android.text.style.LineBackgroundSpan.Standard: void writeToParcel(Parcel,int)>",2,,Flatten this object in to a Parcel.,void,"dest Parcel : This value must never be null . |||
flags int : Additional flags about how the object should be written.
May be 0 or Parcelable.PARCELABLE_WRITE_RETURN_VALUE .
Value is either 0 or a combination of Parcelable.PARCELABLE_WRITE_RETURN_VALUE and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES |||",29
<android.text.style.LineHeightSpan.Standard: int getSpanTypeId()>,1,,Return a special type identifier for this span class.,int |||,,29
<android.text.style.QuoteSpan: int getGapWidth()>,3,,Get the width of the gap between the stripe and the text.,int the width of the gap between the stripe and the text. |||,,28
<android.text.style.TextAppearanceSpan: float getShadowDx()>,3,,Returns the horizontal offset of the text shadow specified by this span or 0.0f if it does not specify one.,float |||,,29
<android.text.style.TextAppearanceSpan: int getShadowColor()>,3,,Returns the color of the text shadow specified by this span or 0 if it does not specify one.,int |||,,29
<android.text.style.TextAppearanceSpan: String getFontFeatureSettings()>,3,,Returns the font feature settings specified by this span or null if it does not specify one.,String |||,,29
<android.text.style.TextAppearanceSpan: String getFontVariationSettings()>,3,,Returns the font variation settings specified by this span or null if it does not specify one.,String |||,,29
<android.text.style.TextAppearanceSpan: Typeface getTypeface()>,3,,Returns the typeface specified by this span or null if it does not specify one.,Typeface |||,,29
<android.text.style.TypefaceSpan: Typeface getTypeface()>,3,,Returns the typeface set in the span.,"Typeface the typeface set
 This value may be null . |||",,28
"<android.view.accessibility.AccessibilityManager: int getRecommendedTimeoutMillis(int,int)>",1,,"Get the recommended timeout for changes to the UI needed by this user. Controls should remain
 on the screen for at least this long to give users time to react. Some users may need
 extra time to review the controls or to reach them or to activate assistive technology
 to activate the controls automatically. Use the combination of content flags to indicate contents of UI. For example use FLAG_CONTENT_ICONS | FLAG_CONTENT_TEXT for message notification which contains
 icons and text or use FLAG_CONTENT_TEXT | FLAG_CONTENT_CONTROLS for button dialog
 which contains text and button controls.",int The recommended UI timeout for the current user in milliseconds. |||,"originalTimeout int : The timeout appropriate for users with no accessibility needs. |||
uiContentFlags int : The combination of flags FLAG_CONTENT_ICONS  FLAG_CONTENT_TEXT or FLAG_CONTENT_CONTROLS to
indicate the contents of UI.
Value is either 0 or a combination of FLAG_CONTENT_ICONS  FLAG_CONTENT_TEXT and FLAG_CONTENT_CONTROLS |||",29
<android.view.accessibility.AccessibilityNodeInfo: boolean isScreenReaderFocusable()>,3,,"Returns whether the node is explicitly marked as a focusable unit by a screen reader. Note
 that false indicates that it is not explicitly marked not that the node is not
 a focusable unit. Screen readers should generally use other signals such as isFocusable() or the presence of text in a node to determine what should receive
 focus.","boolean true if the node is specifically marked as a focusable unit for screen
         readers false otherwise. |||",,28
<android.view.accessibility.AccessibilityNodeInfo: CharSequence getPaneTitle()>,1,,Get the title of the pane represented by this node.,"CharSequence The title of the pane represented by this node or null if this node does
         not represent a pane. |||",,28
<android.view.accessibility.AccessibilityNodeInfo: void setPaneTitle(CharSequence)>,2,,"If this node represents a visually distinct region of the screen that may update separately
 from the rest of the window it is considered a pane. Set the pane title to indicate that
 the node is a pane and to provide a title for it. Note: Cannot be called from an AccessibilityService .
   This class is made immutable before being delivered to an AccessibilityService.",void,"paneTitle CharSequence : The title of the pane represented by this node.
This value may be null . |||",28
<android.view.accessibility.AccessibilityNodeInfo: void setScreenReaderFocusable(boolean)>,3,,"Sets whether the node should be considered a focusable unit by a screen reader. Note: Cannot be called from an AccessibilityService .
   This class is made immutable before being delivered to an AccessibilityService.",void,screenReaderFocusable boolean : true if the node is a focusable unit for screen readers false otherwise. |||,28
<android.view.accessibility.AccessibilityNodeInfo: void setTextEntryKey(boolean)>,3,,"Sets whether the node represents a text entry key that is part of a keyboard or keypad. Note: Cannot be called from an AccessibilityService .
   This class is made immutable before being delivered to an AccessibilityService.",void,isTextEntryKey boolean : true if the node is a text entry key false otherwise. |||,29
<android.view.accessibility.AccessibilityNodeInfo: void setTooltipText(CharSequence)>,3,,"Sets the tooltip text of this node. Note: Cannot be called from an AccessibilityService .
   This class is made immutable before being delivered to an AccessibilityService.",void,"tooltipText CharSequence : The tooltip text.
This value may be null . |||",28
<android.view.accessibility.AccessibilityRecord: int getScrollDeltaY()>,1,,"Gets the difference in pixels between the vertical position before the scroll and the
 current vertical position",int the scroll delta y |||,,28
<android.view.autofill.AutofillManager: String getDefaultFieldClassificationAlgorithm()>,3,,"Gets the name of the default algorithm used for field classification . The default algorithm is used when the algorithm on UserData is invalid or not
 set. Note: This method should only be called by an app providing an autofill service
 and it's ignored if the caller currently doesn't have an enabled autofill service for
 the user.",String This value may be null . |||,,28
<android.view.autofill.AutofillManager: String getUserDataId()>,1,,"Gets the id of the UserData used for field classification . This method is useful when the service must check the status of the UserData in
 the device without fetching the whole object. Note: This method should only be called by an app providing an autofill service
 and it's ignored if the caller currently doesn't have an enabled autofill service for
 the user.","String id of the UserData previously set by setUserData(android.service.autofill.UserData) or null if it was reset or if the caller currently does not have an enabled autofill
 service for the user. |||",,28
<android.view.autofill.AutofillManager: UserData getUserData()>,1,,"Gets the user data used for field classification . Note: This method should only be called by an app providing an autofill service
 and it's ignored if the caller currently doesn't have an enabled autofill service for
 the user.","UserData value previously set by setUserData(android.service.autofill.UserData) or null if it was
 reset or if the caller currently does not have an enabled autofill service for the user. |||",,28
<android.view.autofill.AutofillManager: void setUserData(UserData)>,2,,"Sets the UserData used for field classification Note: This method should only be called by an app providing an autofill service
 and it's ignored if the caller currently doesn't have an enabled autofill service for
 the user.",void,userData UserData : This value may be null . |||,28
<android.view.contentcapture.ContentCaptureCondition: boolean equals(Object)>,,,"Indicates whether some other object is ""equal to"" this one. The equals method implements an equivalence relation
 on non-null object references: It is reflexive : for any non-null reference value x  x.equals(x) should return true . 
It is symmetric : for any non-null reference values x and y  x.equals(y) should return true if and only if y.equals(x) returns true . 
It is transitive : for any non-null reference values x  y and z if x.equals(y) returns true and y.equals(z) returns true then x.equals(z) should return true . 
It is consistent : for any non-null reference values x and y multiple invocations of x.equals(y) consistently return true or consistently return false provided no
     information used in equals comparisons on the
     objects is modified. 
For any non-null reference value x  x.equals(null) should return false . 
The equals method for class Object implements
 the most discriminating possible equivalence relation on objects;
 that is for any non-null reference values x and y this method returns true if and only
 if x and y refer to the same object
 ( x == y has the value true ). Note that it is generally necessary to override the hashCode method whenever this method is overridden so as to maintain the
 general contract for the hashCode method which states
 that equal objects must have equal hash codes.","boolean true if this object is the same as the obj
          argument; false otherwise. |||",obj Object : the reference object with which to compare. |||,29
<android.view.contentcapture.ContentCaptureCondition: int describeContents()>,,,"Describe the kinds of special objects contained in this Parcelable
 instance's marshaled representation. For example if the object will
 include a file descriptor in the output of writeToParcel(android.os.Parcel int) the return value of this method must include the CONTENTS_FILE_DESCRIPTOR bit.","int a bitmask indicating the set of special object types marshaled
 by this Parcelable object instance.
 
 Value is either 0 or CONTENTS_FILE_DESCRIPTOR |||",,29
<android.view.contentcapture.ContentCaptureCondition: int getFlags()>,,,Gets the flags associates with this condition.,"int either ContentCaptureCondition#FLAG_IS_REGEX or 0 .
 
 Value is either 0 or FLAG_IS_REGEX |||",,29
<android.view.contentcapture.ContentCaptureCondition: String toString()>,,,"Returns a string representation of the object. In general the toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the
 object is an instance the at-sign character ` @ ' and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words this method returns a string equal to the
 value of:",String a string representation of the object. |||,,29
<android.view.contentcapture.ContentCaptureContext.Builder: ContentCaptureContext build()>,,,Builds the ContentCaptureContext .,ContentCaptureContext the built ContentCaptureContext This value will never be null . |||,,29
<android.view.contentcapture.ContentCaptureContext.Builder: ContentCaptureContext.Builder setExtras(Bundle)>,,,Sets extra options associated with this context. It can be used to provide vendor-specific data that can be modified and examined.,"ContentCaptureContext.Builder this builder.

 This value will never be null . |||","extras Bundle : extra options.
This value must never be null . |||",29
<android.view.contentcapture.ContentCaptureContext: ContentCaptureContext forLocusId(String)>,,,Helper that creates a ContentCaptureContext associated with the given id .,ContentCaptureContext This value will never be null . |||,id String : This value must never be null . |||,29
<android.view.contentcapture.ContentCaptureManager: ComponentName getServiceComponentName()>,,,"Returns the component name of the system service that is consuming the captured events for
 the current user.",ComponentName This value may be null . |||,,29
<android.view.contentcapture.ContentCaptureManager: void removeData(DataRemovalRequest)>,,,"Called by the app to request the content capture service to remove content capture data
 associated with some context.",void,"request DataRemovalRequest : object specifying what user data should be removed.
This value must never be null . |||",29
<android.view.contentcapture.ContentCaptureSession: ContentCaptureContext getContentCaptureContext()>,,,Gets the ContentCaptureContext associated with the session.,"ContentCaptureContext context set on constructor or by setContentCaptureContext(android.view.contentcapture.ContentCaptureContext) or null if never
         explicitly set. |||",,29
<android.view.contentcapture.ContentCaptureSession: String toString()>,,,"Returns a string representation of the object. In general the toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the
 object is an instance the at-sign character ` @ ' and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words this method returns a string equal to the
 value of:",String a string representation of the object. |||,,29
<android.view.contentcapture.ContentCaptureSession: ViewStructure newViewStructure(View)>,,,"Creates a ViewStructure for a ""standard"" view. This method should be called after a visible view is laid out; the view then must populate
 the structure and pass it to notifyViewAppeared(android.view.ViewStructure) . Note: views that manage a virtual structure under this view must populate just the
 node representing this view and return right away then asynchronously report (not
 necessarily in the UI thread) when the children nodes appear disappear or have their text
 changed by calling ContentCaptureSession#notifyViewAppeared(ViewStructure)  ContentCaptureSession#notifyViewDisappeared(AutofillId) and ContentCaptureSession#notifyViewTextChanged(AutofillId CharSequence) respectively.
 The structure for the a child must be created using ContentCaptureSession#newVirtualViewStructure(AutofillId long) and the autofillId for a child can be obtained either through childStructure.getAutofillId() or ContentCaptureSession#newAutofillId(AutofillId long) . When the virtual view hierarchy represents a web page you should also: Call ContentCaptureManager#getContentCaptureConditions() to infer content capture
 events should be generate for that URL. 
Create a new ContentCaptureSession child for every HTML element that renders a
 new URL (like an IFRAME ) and use that session to notify events from that subtree. 
Note: the following methods of the structure will be ignored: ViewStructure#setChildCount(int) 
ViewStructure#addChildCount(int) 
ViewStructure#getChildCount() 
ViewStructure#newChild(int) 
ViewStructure#asyncNewChild(int) 
ViewStructure#asyncCommit() 
ViewStructure#setWebDomain(String) 
ViewStructure#newHtmlInfoBuilder(String) 
ViewStructure#setHtmlInfo(android.view.ViewStructure.HtmlInfo) 
ViewStructure#setDataIsSensitive(boolean) 
ViewStructure#setAlpha(float) 
ViewStructure#setElevation(float) 
ViewStructure#setTransformation(android.graphics.Matrix)",ViewStructure This value will never be null . |||,view View : This value must never be null . |||,29
"<android.view.contentcapture.ContentCaptureSession: ViewStructure newVirtualViewStructure(AutofillId,long)>",,,"Creates a ViewStructure for a ""virtual"" view so it can be passed to notifyViewAppeared(android.view.ViewStructure) by the view managing the virtual view hierarchy.","ViewStructure a new ViewStructure that can be used for Content Capture purposes.
 
 This value will never be null . |||","parentId AutofillId : id of the virtual view parent (it can be obtained by calling ViewStructure#getAutofillId() on the parent).
This value must never be null . |||
virtualId long : id of the virtual child relative to the parent. |||",29
<android.view.contentcapture.ContentCaptureSession: void notifyViewAppeared(ViewStructure)>,,,"Notifies the Content Capture Service that a node has been added to the view structure. Typically called ""manually"" by views that handle their own virtual view hierarchy or
 automatically by the Android System for views that return true on View#onProvideContentCaptureStructure(ViewStructure int) .",void,"node ViewStructure : node that has been added.
This value must never be null . |||",29
<android.view.contentcapture.ContentCaptureSessionId: int describeContents()>,,,"Describe the kinds of special objects contained in this Parcelable
 instance's marshaled representation. For example if the object will
 include a file descriptor in the output of writeToParcel(android.os.Parcel int) the return value of this method must include the CONTENTS_FILE_DESCRIPTOR bit.","int a bitmask indicating the set of special object types marshaled
 by this Parcelable object instance.
 
 Value is either 0 or CONTENTS_FILE_DESCRIPTOR |||",,29
<android.view.contentcapture.ContentCaptureSessionId: int hashCode()>,,,"Returns a hash code value for the object. This method is
 supported for the benefit of hash tables such as those provided by HashMap . The general contract of hashCode is: Whenever it is invoked on the same object more than once during
     an execution of a Java application the hashCode method
     must consistently return the same integer provided no information
     used in equals comparisons on the object is modified.
     This integer need not remain consistent from one execution of an
     application to another execution of the same application. 
If two objects are equal according to the equals(Object) method then calling the hashCode method on each of
     the two objects must produce the same integer result. 
It is not required that if two objects are unequal
     according to the equals(java.lang.Object) method then calling the hashCode method on each of the
     two objects must produce distinct integer results.  However the
     programmer should be aware that producing distinct integer results
     for unequal objects may improve the performance of hash tables. 
As much as is reasonably practical the hashCode method defined by
 class Object does return distinct integers for distinct
 objects. (This is typically implemented by converting the internal
 address of the object into an integer but this implementation
 technique is not required by the
 Javaâ„¢ programming language.)",int a hash code value for this object. |||,,29
<android.view.contentcapture.ContentCaptureSessionId: String toString()>,,,"Returns a string representation of the object. In general the toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the
 object is an instance the at-sign character ` @ ' and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words this method returns a string equal to the
 value of: NOTE: this method is only useful for debugging purposes and is not guaranteed to
 be stable hence it should not be used to identify the session.",String a string representation of the object. |||,,29
<android.view.contentcapture.DataRemovalRequest.LocusIdRequest: int getFlags()>,,,Gets the flags associates with request.,"int either DataRemovalRequest#FLAG_IS_PREFIX or 0 .
 
 This value will never be null .
 
 Value is either 0 or DataRemovalRequest.FLAG_IS_PREFIX |||",,29
<android.view.contentcapture.DataRemovalRequest.LocusIdRequest: LocusId getLocusId()>,,,Gets the LocusId per se.,LocusId This value will never be null . |||,,29
<android.view.contentcapture.DataRemovalRequest: boolean isForEverything()>,,,Checks if app is requesting to remove content capture data associated with its package.,boolean |||,,29
<android.view.ContextThemeWrapper: void setTheme(Resources.Theme)>,,,"Set the configure the current theme. If null is provided then the default Theme is returned
 on the next call to getTheme()",void,"theme Resources.Theme : Theme to consume in the wrapper a value of null resets the theme to the default
This value may be null . |||",29
<android.view.DisplayCutout: int getSafeInsetBottom()>,,,Returns the inset from the bottom which avoids the display cutout in pixels.,int |||,,28
<android.view.DisplayCutout: List getBoundingRects()>,,,"Returns a list of Rect s each of which is the bounding rectangle for a non-functional
 area on the display.

 There will be at most one non-functional area per short edge of the device and none on
 the long edges.","List < Rect > a list of bounding Rect s one for each display cutout area. No empty Rect is
 returned.
 
 This value will never be null . |||",,28
<android.view.DisplayCutout: String toString()>,,,"Returns a string representation of the object. In general the toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the
 object is an instance the at-sign character ` @ ' and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words this method returns a string equal to the
 value of:",String a string representation of the object. |||,,28
"<android.view.inspector.IntFlagMapping: void add(int,int,String)>",,,Add a mutually exclusive flag to the map.,void,"mask int : The bit mask to compare to and with a value |||
target int : The target value to compare the masked value with |||
name String : The name of the flag to include if enabled
This value must never be null . |||",29
<android.view.MotionEvent: int getClassification()>,,,"Returns the classification for the current gesture.
 The classification may change as more events become available for the same gesture.",int Value is CLASSIFICATION_NONE  CLASSIFICATION_AMBIGUOUS_GESTURE or CLASSIFICATION_DEEP_PRESS |||,,29
<android.view.SurfaceControl.Transaction: SurfaceControl.Transaction merge(SurfaceControl.Transaction)>,,,"Merge the other transaction into this transaction clearing the
 other transaction as if it had been applied.","SurfaceControl.Transaction This transaction.
 
 This value will never be null . |||","other SurfaceControl.Transaction : The transaction to merge in to this one.
This value must never be null . |||",29
"<android.view.SurfaceControl.Transaction: SurfaceControl.Transaction setGeometry(SurfaceControl,Rect,Rect,int)>",,,"Specify how the buffer assosciated with this Surface is mapped in to the
 parent coordinate space. The source frame will be scaled to fit the destination
 frame after being rotated according to the orientation parameter.",SurfaceControl.Transaction This transaction object. |||,"sc SurfaceControl : The SurfaceControl to specify the geometry of
This value must never be null . |||
sourceCrop Rect : The source rectangle in buffer space. Or null for the entire buffer.
This value may be null . |||
destFrame Rect : The destination rectangle in parent space. Or null for the source frame.
This value may be null . |||
orientation int : The buffer rotation
Value is Surface.ROTATION_0  Surface.ROTATION_90  Surface.ROTATION_180 or Surface.ROTATION_270 |||",29
"<android.view.SurfaceControl.Transaction: SurfaceControl.Transaction setLayer(SurfaceControl,int)>",,,"Set the Z-order for a given SurfaceControl relative to it's siblings.
 If two siblings share the same Z order the ordering is undefined. Surfaces
 with a negative Z will be placed below the parent surface.","SurfaceControl.Transaction This Transaction.
 
 This value will never be null . |||","sc SurfaceControl : The SurfaceControl to set the Z order on
This value must never be null . |||
z int : The Z-order
Value is between Integer.MIN_VALUE and Integer.MAX_VALUE inclusive |||",29
<android.view.SurfaceControl: int describeContents()>,,,"Describe the kinds of special objects contained in this Parcelable
 instance's marshaled representation. For example if the object will
 include a file descriptor in the output of writeToParcel(android.os.Parcel int) the return value of this method must include the CONTENTS_FILE_DESCRIPTOR bit.","int a bitmask indicating the set of special object types marshaled
 by this Parcelable object instance.
 
 Value is either 0 or CONTENTS_FILE_DESCRIPTOR |||",,29
<android.view.SurfaceControl: String toString()>,,,"Returns a string representation of the object. In general the toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the
 object is an instance the at-sign character ` @ ' and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words this method returns a string equal to the
 value of:",String a string representation of the object. |||,,29
<android.view.textclassifier.ConversationAction.Builder: ConversationAction.Builder setAction(RemoteAction)>,,,Sets an action that may be performed on the given conversation.,ConversationAction.Builder This value will never be null . |||,action RemoteAction : This value may be null . |||,29
<android.view.textclassifier.ConversationAction.Builder: ConversationAction.Builder setExtras(Bundle)>,,,Sets the extended data for the conversation action object.,ConversationAction.Builder This value will never be null . |||,extras Bundle : This value may be null . |||,29
<android.view.textclassifier.ConversationAction: Bundle getExtras()>,,,Returns the extended data related to this conversation action. NOTE: Do not modify this bundle.,Bundle This value will never be null . |||,,29
<android.view.textclassifier.ConversationAction: CharSequence getTextReply()>,,,Returns the text reply that could be sent as a reply to the given conversation. This is only available when the type of the action is TYPE_TEXT_REPLY .,CharSequence This value may be null . |||,,29
<android.view.textclassifier.ConversationAction: float getConfidenceScore()>,,,"Returns the confidence score for the specified action. The value ranges from 0 (low
 confidence) to 1 (high confidence).",float Value is between 0 and 1 inclusive |||,,29
<android.view.textclassifier.ConversationAction: int describeContents()>,,,"Describe the kinds of special objects contained in this Parcelable
 instance's marshaled representation. For example if the object will
 include a file descriptor in the output of writeToParcel(android.os.Parcel int) the return value of this method must include the CONTENTS_FILE_DESCRIPTOR bit.","int a bitmask indicating the set of special object types marshaled
 by this Parcelable object instance.
 
 Value is either 0 or CONTENTS_FILE_DESCRIPTOR |||",,29
"<android.view.textclassifier.ConversationAction: void writeToParcel(Parcel,int)>",,,Flatten this object in to a Parcel.,void,"parcel Parcel : The Parcel in which the object should be written. |||
flags int : Additional flags about how the object should be written.
May be 0 or Parcelable.PARCELABLE_WRITE_RETURN_VALUE .
Value is either 0 or a combination of Parcelable.PARCELABLE_WRITE_RETURN_VALUE and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES |||",29
<android.view.textclassifier.ConversationActions.Request.Builder: ConversationActions.Request build()>,,,Builds the Request object.,ConversationActions.Request This value will never be null . |||,,29
<android.view.textclassifier.ConversationActions.Request.Builder: ConversationActions.Request.Builder setExtras(Bundle)>,,,Sets a set of extended data to the request.,ConversationActions.Request.Builder This value will never be null . |||,bundle Bundle : This value may be null . |||,29
<android.view.textclassifier.ConversationActions.Request.Builder: ConversationActions.Request.Builder setHints(List)>,,,"Sets the hints to help text classifier to generate actions. It could be used to help
 text classifier to infer what types of actions the caller may be interested in.",ConversationActions.Request.Builder This value will never be null . |||,"hints List : This value may be null .
Value is ConversationActions.Request.HINT_FOR_NOTIFICATION or ConversationActions.Request.HINT_FOR_IN_APP |||",29
<android.view.textclassifier.ConversationActions.Request: int getMaxSuggestions()>,,,"Return the maximal number of suggestions the caller wants value -1 means no restriction
 and this is the default.",int Value is -1 or greater |||,,29
<android.view.textclassifier.ConversationActions.Request: String getCallingPackageName()>,,,"Returns the name of the package that sent this request.
 This returns null if no calling package name is set.",String |||,,29
"<android.view.textclassifier.ConversationActions.Request: void writeToParcel(Parcel,int)>",,,Flatten this object in to a Parcel.,void,"parcel Parcel : The Parcel in which the object should be written. |||
flags int : Additional flags about how the object should be written.
May be 0 or Parcelable.PARCELABLE_WRITE_RETURN_VALUE .
Value is either 0 or a combination of Parcelable.PARCELABLE_WRITE_RETURN_VALUE and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES |||",29
"<android.view.textclassifier.ConversationActions: void writeToParcel(Parcel,int)>",,,Flatten this object in to a Parcel.,void,"parcel Parcel : The Parcel in which the object should be written. |||
flags int : Additional flags about how the object should be written.
May be 0 or Parcelable.PARCELABLE_WRITE_RETURN_VALUE .
Value is either 0 or a combination of Parcelable.PARCELABLE_WRITE_RETURN_VALUE and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES |||",29
<android.view.textclassifier.SelectionEvent: int describeContents()>,,,"Describe the kinds of special objects contained in this Parcelable
 instance's marshaled representation. For example if the object will
 include a file descriptor in the output of writeToParcel(android.os.Parcel int) the return value of this method must include the CONTENTS_FILE_DESCRIPTOR bit.","int a bitmask indicating the set of special object types marshaled
 by this Parcelable object instance.
 
 Value is either 0 or CONTENTS_FILE_DESCRIPTOR |||",,28
<android.view.textclassifier.SelectionEvent: int getEventIndex()>,,,Returns the index (e.g.Â 1st event 2nd event etc.) of this event in the selection session.,int |||,,28
<android.view.textclassifier.SelectionEvent: int getEventType()>,,,Returns the type of event that was triggered. e.g. ACTION_COPY .,int Value is ACTION_OVERTYPE  ACTION_COPY  ACTION_PASTE  ACTION_CUT  ACTION_SHARE  ACTION_SMART_SHARE  ACTION_DRAG  ACTION_ABANDON  ACTION_OTHER  ACTION_SELECT_ALL  ACTION_RESET  EVENT_SELECTION_STARTED  EVENT_SELECTION_MODIFIED  EVENT_SMART_SELECTION_SINGLE  EVENT_SMART_SELECTION_MULTI or EVENT_AUTO_SELECTION |||,,28
<android.view.textclassifier.SelectionEvent: int hashCode()>,,,"Returns a hash code value for the object. This method is
 supported for the benefit of hash tables such as those provided by HashMap . The general contract of hashCode is: Whenever it is invoked on the same object more than once during
     an execution of a Java application the hashCode method
     must consistently return the same integer provided no information
     used in equals comparisons on the object is modified.
     This integer need not remain consistent from one execution of an
     application to another execution of the same application. 
If two objects are equal according to the equals(Object) method then calling the hashCode method on each of
     the two objects must produce the same integer result. 
It is not required that if two objects are unequal
     according to the equals(java.lang.Object) method then calling the hashCode method on each of the
     two objects must produce distinct integer results.  However the
     programmer should be aware that producing distinct integer results
     for unequal objects may improve the performance of hash tables. 
As much as is reasonably practical the hashCode method defined by
 class Object does return distinct integers for distinct
 objects. (This is typically implemented by converting the internal
 address of the object into an integer but this implementation
 technique is not required by the
 Javaâ„¢ programming language.)",int a hash code value for this object. |||,,28
<android.view.textclassifier.SelectionEvent: long getDurationSincePreviousEvent()>,,,"Returns the duration in ms between when this event was triggered and when the previous event
 in the selection session was triggered.",long |||,,28
<android.view.textclassifier.SelectionEvent: long getEventTime()>,,,Returns the time this event was triggered.,long |||,,28
"<android.view.textclassifier.SelectionEvent: SelectionEvent createSelectionModifiedEvent(int,int,TextSelection)>",,,"Creates a ""selection modified"" event.
 Use when a TextClassifier modifies the selection.",SelectionEvent This value will never be null . |||,"start int : the start (inclusive) index of the selection |||
end int : the end (exclusive) index of the selection |||
selection TextSelection : the TextSelection object returned by the TextClassifier for the
specified selection
This value must never be null . |||",28
<android.view.textclassifier.SelectionEvent: String getWidgetType()>,,,Returns the type of widget that was involved in triggering this event.,String Value is TextClassifier.WIDGET_TYPE_TEXTVIEW  TextClassifier.WIDGET_TYPE_EDITTEXT  TextClassifier.WIDGET_TYPE_UNSELECTABLE_TEXTVIEW  TextClassifier.WIDGET_TYPE_WEBVIEW  TextClassifier.WIDGET_TYPE_EDIT_WEBVIEW  TextClassifier.WIDGET_TYPE_CUSTOM_TEXTVIEW  TextClassifier.WIDGET_TYPE_CUSTOM_EDITTEXT  TextClassifier.WIDGET_TYPE_CUSTOM_UNSELECTABLE_TEXTVIEW  TextClassifier.WIDGET_TYPE_NOTIFICATION or TextClassifier.WIDGET_TYPE_UNKNOWN This value will never be null . |||,,28
<android.view.textclassifier.TextClassification.Request.Builder: TextClassification.Request build()>,,,Builds and returns the request object.,TextClassification.Request This value will never be null . |||,,28
<android.view.textclassifier.TextClassification.Request: CharSequence getText()>,,,"Returns the text providing context for the text to classify (which is specified
      by the sub sequence starting at startIndex and ending at endIndex)",CharSequence This value will never be null . |||,,28
<android.view.textclassifier.TextClassification.Request: int describeContents()>,,,"Describe the kinds of special objects contained in this Parcelable
 instance's marshaled representation. For example if the object will
 include a file descriptor in the output of writeToParcel(android.os.Parcel int) the return value of this method must include the CONTENTS_FILE_DESCRIPTOR bit.","int a bitmask indicating the set of special object types marshaled
 by this Parcelable object instance.
 
 Value is either 0 or CONTENTS_FILE_DESCRIPTOR |||",,28
<android.view.textclassifier.TextClassification.Request: int getEndIndex()>,,,Returns end index of the text to classify.,int Value is 0 or greater |||,,28
<android.view.textclassifier.TextClassification.Request: LocaleList getDefaultLocales()>,,,,"LocaleList ordered list of locale preferences that can be used to disambiguate
      the provided text.
 
 This value may be null . |||",,28
<android.view.textclassifier.TextClassification.Request: String getCallingPackageName()>,,,"Returns the name of the package that sent this request.
 This returns null if no calling package name is set.",String |||,,29
"<android.view.textclassifier.TextClassification.Request: void writeToParcel(Parcel,int)>",,,Flatten this object in to a Parcel.,void,"dest Parcel : The Parcel in which the object should be written. |||
flags int : Additional flags about how the object should be written.
May be 0 or Parcelable.PARCELABLE_WRITE_RETURN_VALUE .
Value is either 0 or a combination of Parcelable.PARCELABLE_WRITE_RETURN_VALUE and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES |||",28
<android.view.textclassifier.TextClassification.Request: ZonedDateTime getReferenceTime()>,,,,"ZonedDateTime reference time based on which relative dates (e.g.Â ""tomorrow"") should be
      interpreted.
 
 This value may be null . |||",,28
<android.view.textclassifier.TextClassification: Bundle getExtras()>,,,Returns the extended data. NOTE: Do not modify this bundle.,Bundle This value will never be null . |||,,29
<android.view.textclassifier.TextClassification: int describeContents()>,,,"Describe the kinds of special objects contained in this Parcelable
 instance's marshaled representation. For example if the object will
 include a file descriptor in the output of writeToParcel(android.os.Parcel int) the return value of this method must include the CONTENTS_FILE_DESCRIPTOR bit.","int a bitmask indicating the set of special object types marshaled
 by this Parcelable object instance.
 
 Value is either 0 or CONTENTS_FILE_DESCRIPTOR |||",,28
<android.view.textclassifier.TextClassification: String getId()>,,,Returns the id if one exists for this object.,String This value may be null . |||,,28
<android.view.textclassifier.TextClassificationContext: String getPackageName()>,,,Returns the package name for the calling package.,String This value will never be null . |||,,28
<android.view.textclassifier.TextClassificationContext: String getWidgetType()>,,,Returns the widget type for this classification context.,"String This value will never be null .
 
 Value is TextClassifier.WIDGET_TYPE_TEXTVIEW  TextClassifier.WIDGET_TYPE_EDITTEXT  TextClassifier.WIDGET_TYPE_UNSELECTABLE_TEXTVIEW  TextClassifier.WIDGET_TYPE_WEBVIEW  TextClassifier.WIDGET_TYPE_EDIT_WEBVIEW  TextClassifier.WIDGET_TYPE_CUSTOM_TEXTVIEW  TextClassifier.WIDGET_TYPE_CUSTOM_EDITTEXT  TextClassifier.WIDGET_TYPE_CUSTOM_UNSELECTABLE_TEXTVIEW  TextClassifier.WIDGET_TYPE_NOTIFICATION or TextClassifier.WIDGET_TYPE_UNKNOWN |||",,28
<android.view.textclassifier.TextClassificationContext: String getWidgetVersion()>,,,Returns a custom version string for the widget type.,String This value may be null . |||,,28
<android.view.textclassifier.TextClassificationManager: void setTextClassificationSessionFactory(TextClassificationSessionFactory)>,,,Sets a TextClassificationSessionFactory to be used to create session-aware TextClassifiers.,void,"factory TextClassificationSessionFactory : the textClassification session factory. If this is null the default factory
will be used.
This value may be null . |||",28
"<android.view.textclassifier.TextClassificationSessionId: void writeToParcel(Parcel,int)>",,,Flatten this object in to a Parcel.,void,"parcel Parcel : The Parcel in which the object should be written. |||
flags int : Additional flags about how the object should be written.
May be 0 or Parcelable.PARCELABLE_WRITE_RETURN_VALUE .
Value is either 0 or a combination of Parcelable.PARCELABLE_WRITE_RETURN_VALUE and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES |||",28
<android.view.textclassifier.TextClassifier.EntityConfig.Builder: TextClassifier.EntityConfig.Builder includeTypesFromTextClassifier(boolean)>,,,"Specifies whether or not to include the types suggested by the text classifier. By
 default it is included.",TextClassifier.EntityConfig.Builder This value will never be null . |||,includeTypesFromTextClassifier boolean |||,29
<android.view.textclassifier.TextClassifier.EntityConfig.Builder: TextClassifier.EntityConfig.Builder setExcludedTypes(Collection)>,,,Sets a collection of types that are explicitly excluded.,TextClassifier.EntityConfig.Builder This value will never be null . |||,excludedTypes Collection : This value may be null . |||,29
<android.view.textclassifier.TextClassifier.EntityConfig.Builder: TextClassifier.EntityConfig.Builder setHints(Collection)>,,,"Sets the hints for the TextClassifier to determine what types of entities to find.
 These hints will only be used if includeTypesFromTextClassifier(boolean) is
 set to be true.",TextClassifier.EntityConfig.Builder This value will never be null . |||,hints Collection : This value may be null . |||,29
<android.view.textclassifier.TextClassifier.EntityConfig: Collection getHints()>,,,Retrieves the list of hints.,Collection < String > An unmodifiable collection of the hints. |||,,28
<android.view.textclassifier.TextClassifier.EntityConfig: int describeContents()>,,,"Describe the kinds of special objects contained in this Parcelable
 instance's marshaled representation. For example if the object will
 include a file descriptor in the output of writeToParcel(android.os.Parcel int) the return value of this method must include the CONTENTS_FILE_DESCRIPTOR bit.","int a bitmask indicating the set of special object types marshaled
 by this Parcelable object instance.
 
 Value is either 0 or CONTENTS_FILE_DESCRIPTOR |||",,28
"<android.view.textclassifier.TextClassifier.EntityConfig: TextClassifier.EntityConfig create(Collection,Collection,Collection)>",,,"This method was deprecated
      in API level 29. Use Builder instead. Creates an EntityConfig.",TextClassifier.EntityConfig |||,"hints Collection : Hints for the TextClassifier to determine what types of entities to find
This value may be null . |||
includedEntityTypes Collection : Entity types e.g. TextClassifier.TYPE_EMAIL to explicitly include
This value may be null . |||
excludedEntityTypes Collection : Entity types e.g. TextClassifier.TYPE_PHONE to explicitly exclude
Note that if an entity has been excluded the exclusion will take precedence.
This value may be null . |||",28
"<android.view.textclassifier.TextClassifier.EntityConfig: void writeToParcel(Parcel,int)>",,,Flatten this object in to a Parcel.,void,"parcel Parcel : The Parcel in which the object should be written. |||
flags int : Additional flags about how the object should be written.
May be 0 or Parcelable.PARCELABLE_WRITE_RETURN_VALUE .
Value is either 0 or a combination of Parcelable.PARCELABLE_WRITE_RETURN_VALUE and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES |||",28
<android.view.textclassifier.TextClassifierEvent.Builder: T setActionIndices(int)>,,,"Sets the indices of the actions involved in this event. Actions are usually returned by
 the text classifier in priority order with the most preferred action at index 0.
 These indices give an indication of the position of the actions that are being reported. E.g.",T This value will never be null . |||,actionIndices int : This value must never be null . |||,29
<android.view.textclassifier.TextClassifierEvent.Builder: T setEntityTypes(String)>,,,Sets the entity types. e.g. TextClassifier#TYPE_ADDRESS . Supported types: See TextClassifier.EntityType See ConversationAction.ActionType See ULocale#toLanguageTag(),T This value will never be null . |||,entityTypes String : This value must never be null . |||,29
<android.view.textclassifier.TextClassifierEvent.Builder: T setEventContext(TextClassificationContext)>,,,Sets the event context.,T This value will never be null . |||,eventContext TextClassificationContext : This value may be null . |||,29
<android.view.textclassifier.TextClassifierEvent.Builder: T setEventIndex(int)>,,,Sets the index of this event in the series of events it belongs to.,T This value will never be null . |||,eventIndex int |||,29
<android.view.textclassifier.TextClassifierEvent.Builder: T setLocale(ULocale)>,,,Sets the detected locale.,T This value will never be null . |||,locale ULocale : This value may be null . |||,29
<android.view.textclassifier.TextClassifierEvent.Builder: T setResultId(String)>,,,Sets the id of the text classifier result related to this event.,T This value will never be null . |||,resultId String : This value may be null . |||,29
<android.view.textclassifier.TextClassifierEvent.TextSelectionEvent.Builder: TextClassifierEvent.TextSelectionEvent.Builder setRelativeWordEndIndex(int)>,,,"Sets the relative word (exclusive) index of the end of the
 selection.",TextClassifierEvent.TextSelectionEvent.Builder This value will never be null . |||,relativeWordEndIndex int |||,29
<android.view.textclassifier.TextClassifierEvent.TextSelectionEvent: int getRelativeSuggestedWordEndIndex()>,,,"Returns the relative word (exclusive) index of the end of the
 smart selection.",int |||,,29
"<android.view.textclassifier.TextClassifierEvent.TextSelectionEvent: void writeToParcel(Parcel,int)>",,,Flatten this object in to a Parcel.,void,"dest Parcel : The Parcel in which the object should be written. |||
flags int : Additional flags about how the object should be written.
May be 0 or Parcelable.PARCELABLE_WRITE_RETURN_VALUE .
Value is either 0 or a combination of Parcelable.PARCELABLE_WRITE_RETURN_VALUE and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES |||",29
<android.view.textclassifier.TextClassifierEvent: String getResultId()>,,,Returns the id of the text classifier result related to this event.,String This value may be null . |||,,29
<android.view.textclassifier.TextClassifierEvent: ULocale getLocale()>,,,Returns the detected locale.,ULocale This value may be null . |||,,29
"<android.view.textclassifier.TextClassifierEvent: void writeToParcel(Parcel,int)>",,,Flatten this object in to a Parcel.,void,"dest Parcel : The Parcel in which the object should be written. |||
flags int : Additional flags about how the object should be written.
May be 0 or Parcelable.PARCELABLE_WRITE_RETURN_VALUE .
Value is either 0 or a combination of Parcelable.PARCELABLE_WRITE_RETURN_VALUE and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES |||",29
<android.view.textclassifier.TextLanguage.Builder: TextLanguage build()>,,,Builds and returns a new TextLanguage object. If necessary this method will verify fields clamp them and make them immutable.,TextLanguage This value will never be null . |||,,29
<android.view.textclassifier.TextLanguage.Builder: TextLanguage.Builder setId(String)>,,,Sets an optional id for the TextLanguage object.,TextLanguage.Builder This value will never be null . |||,id String : This value may be null . |||,29
<android.view.textclassifier.TextLanguage: float getConfidenceScore(ULocale)>,,,"Returns the confidence score for the specified language locale. The value ranges from
 0 (low confidence) to 1 (high confidence). 0 indicates that the locale was not found for
 the processed text.",float Value is between 0.0 and 1.0 inclusive |||,locale ULocale : This value must never be null . |||,29
<android.view.textclassifier.TextLanguage: String toString()>,,,"Returns a string representation of the object. In general the toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the
 object is an instance the at-sign character ` @ ' and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words this method returns a string equal to the
 value of:",String a string representation of the object. |||,,29
<android.view.textclassifier.TextLanguage: ULocale getLocale(int)>,,,"Returns the language locale at the specified index. Locales are ordered from high
 confidence to low confidence. See getLocaleHypothesisCount() for the number of locales available.",ULocale This value will never be null . |||,index int |||,29
"<android.view.textclassifier.TextLanguage: void writeToParcel(Parcel,int)>",,,Flatten this object in to a Parcel.,void,"dest Parcel : The Parcel in which the object should be written. |||
flags int : Additional flags about how the object should be written.
May be 0 or Parcelable.PARCELABLE_WRITE_RETURN_VALUE .
Value is either 0 or a combination of Parcelable.PARCELABLE_WRITE_RETURN_VALUE and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES |||",29
<android.view.textclassifier.TextLinks.Builder: TextLinks build()>,,,Constructs a TextLinks instance.,"TextLinks the constructed TextLinks
 
 This value will never be null . |||",,28
<android.view.textclassifier.TextLinks.Request.Builder: TextLinks.Request.Builder setExtras(Bundle)>,,,Sets the extended data.,TextLinks.Request.Builder this builder |||,extras Bundle : This value may be null . |||,29
<android.view.textclassifier.TextLinks.Request: TextClassifier.EntityConfig getEntityConfig()>,,,Returns the config representing the set of entities to look for,TextClassifier.EntityConfig This value may be null . |||,,28
"<android.view.textclassifier.TextLinks.Request: void writeToParcel(Parcel,int)>",,,Flatten this object in to a Parcel.,void,"dest Parcel : The Parcel in which the object should be written. |||
flags int : Additional flags about how the object should be written.
May be 0 or Parcelable.PARCELABLE_WRITE_RETURN_VALUE .
Value is either 0 or a combination of Parcelable.PARCELABLE_WRITE_RETURN_VALUE and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES |||",28
<android.view.textclassifier.TextLinks.TextLink: int describeContents()>,,,"Describe the kinds of special objects contained in this Parcelable
 instance's marshaled representation. For example if the object will
 include a file descriptor in the output of writeToParcel(android.os.Parcel int) the return value of this method must include the CONTENTS_FILE_DESCRIPTOR bit.","int a bitmask indicating the set of special object types marshaled
 by this Parcelable object instance.
 
 Value is either 0 or CONTENTS_FILE_DESCRIPTOR |||",,28
<android.view.textclassifier.TextLinks.TextLink: String getEntity(int)>,,,Returns the entity type at a given index. Entity types are sorted by confidence.,"String the entity type at the provided index
 
 This value will never be null .
 
 Value is TextClassifier.TYPE_UNKNOWN  TextClassifier.TYPE_OTHER  TextClassifier.TYPE_EMAIL  TextClassifier.TYPE_PHONE  TextClassifier.TYPE_ADDRESS  TextClassifier.TYPE_URL  TextClassifier.TYPE_DATE  TextClassifier.TYPE_DATE_TIME  TextClassifier.TYPE_FLIGHT_NUMBER or android.view.textclassifier.TextClassifier.TYPE_DICTIONARY |||",index int |||,28
<android.view.textclassifier.TextLinks.TextLink: String toString()>,,,"Returns a string representation of the object. In general the toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the
 object is an instance the at-sign character ` @ ' and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words this method returns a string equal to the
 value of:",String a string representation of the object. |||,,28
<android.view.textclassifier.TextLinks.TextLinkSpan: TextLinks.TextLink getTextLink()>,,,,TextLinks.TextLink |||,,28
"<android.view.textclassifier.TextLinks: int apply(Spannable,int,Function)>",,,"Annotates the given text with the generated links. It will fail if the provided text doesn't
 match the original text used to create the TextLinks. NOTE: It may be necessary to set a LinkMovementMethod on the TextView
 widget to properly handle links. See TextView#setMovementMethod(MovementMethod)","int a status code indicating whether or not the links were successfully applied
      e.g. STATUS_LINKS_APPLIED Value is STATUS_LINKS_APPLIED  STATUS_NO_LINKS_FOUND  STATUS_NO_LINKS_APPLIED  STATUS_DIFFERENT_TEXT or STATUS_UNSUPPORTED_CHARACTER |||","text Spannable : the text to apply the links to. Must match the original text
This value must never be null . |||
applyStrategy int : the apply strategy used to determine how to apply links to text.
e.g TextLinks#APPLY_STRATEGY_IGNORE Value is APPLY_STRATEGY_IGNORE or APPLY_STRATEGY_REPLACE |||
spanFactory Function : a custom span factory for converting TextLinks to TextLinkSpans.
Set to null to use the default span factory.
This value may be null . |||",28
<android.view.textclassifier.TextLinks: String toString()>,,,"Returns a string representation of the object. In general the toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the
 object is an instance the at-sign character ` @ ' and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words this method returns a string equal to the
 value of:",String a string representation of the object. |||,,28
<android.view.textclassifier.TextSelection.Builder: TextSelection.Builder setExtras(Bundle)>,,,Sets the extended data.,"TextSelection.Builder this builder
 
 This value will never be null . |||",extras Bundle : This value may be null . |||,29
<android.view.textclassifier.TextSelection.Request: CharSequence getText()>,,,"Returns the text providing context for the selected text (which is specified by the
 sub sequence starting at startIndex and ending at endIndex).",CharSequence This value will never be null . |||,,28
<android.view.textclassifier.TextSelection.Request: String getCallingPackageName()>,,,"Returns the name of the package that sent this request.
 This returns null if no calling package name is set.",String |||,,29
<android.view.TouchDelegate: boolean onTouchExplorationHoverEvent(MotionEvent)>,,,"Forward hover events to the delegate view if the event is within the bounds
 specified in the constructor and touch exploration is enabled. This method is provided for accessibility purposes so touch exploration which is
 commonly used by screen readers can properly place accessibility focus on views that
 use touch delegates. Therefore touch exploration must be enabled for hover events
 to be dispatched through the delegate.",boolean True if the event was consumed by the delegate false otherwise. |||,"event MotionEvent : The hover event to forward
This value must never be null . |||",29
<android.view.View: boolean isAccessibilityHeading()>,,,Gets whether this view is a heading for accessibility purposes. Related XML Attributes: android:accessibilityHeading,boolean true if the view is a heading false otherwise. |||,,28
<android.view.View: boolean isForceDarkAllowed()>,,,See setForceDarkAllowed(boolean),boolean true if force dark is allowed (default) false if it is disabled |||,,29
<android.view.View: CharSequence getAccessibilityPaneTitle()>,,,Get the title of the pane for purposes of accessibility. Related XML Attributes: android:accessibilityPaneTitle,"CharSequence The current pane title.

 .

 This value may be null . |||",,28
<android.view.View: ContentCaptureSession getContentCaptureSession()>,,,Gets the session used to notify content capture events.,"ContentCaptureSession session explicitly set by setContentCaptureSession(android.view.contentcapture.ContentCaptureSession) inherited by ancestors default session or null if content capture is disabled for
 this view. |||",,29
<android.view.View: float getTransitionAlpha()>,,,"This property is intended only for use by the Fade transition which animates
 it to produce a visual translucency that does not side-effect (or get affected
 by) the real alpha property. This value is composited with the other alpha
 value (and the AlphaAnimation value when that is present) to produce a final
 visual translucency result which is what is passed into the DisplayList.",float |||,,29
<android.view.View: int getOutlineAmbientShadowColor()>,,,,"int The shadow color set by setOutlineAmbientShadowColor(int) or black if
 nothing was set |||",,28
<android.view.View: Matrix getAnimationMatrix()>,,,"Return the current transformation matrix of the view. This is used in animation frameworks
 such as Transition . Returns null when there is no
 transformation provided by setAnimationMatrix(android.graphics.Matrix) .
 Application developers should use transformation methods like setRotation(float)  setScaleX(float)  setScaleX(float)  setTranslationX(float) }
 and setTranslationY(float) (float)}} instead.",Matrix the Matrix null indicates there is no transformation |||,,29
<android.view.View: void resetPivot()>,,,"Clears any pivot previously set by a call to setPivotX(float) or setPivotY(float) . After calling this isPivotSet() will be false
 and the pivot used for rotation will return to default of being centered on the view.",void,,28
<android.view.View: void setAccessibilityHeading(boolean)>,,,Set if view is a heading for a section of content for accessibility purposes. Related XML Attributes: android:accessibilityHeading,void,isHeading boolean : true if the view is a heading false otherwise. |||,28
<android.view.View: void setHorizontalScrollbarThumbDrawable(Drawable)>,,,Defines the horizontal thumb drawable Related XML Attributes: android:scrollbarThumbHorizontal,void,drawable Drawable : This value may be null . |||,29
<android.view.View: void setOutlineAmbientShadowColor(int)>,,,"Sets the color of the ambient shadow that is drawn when the view has a positive Z or
 elevation value. By default the shadow color is black. Generally this color will be opaque so the intensity
 of the shadow is consistent between different views with different colors. The opacity of the final ambient shadow is a function of the shadow caster height the
 alpha channel of the outlineAmbientShadowColor (typically opaque) and the R.attr.ambientShadowAlpha theme attribute. Related XML Attributes: android:outlineAmbientShadowColor",void,color int : The color this View will cast for its elevation shadow. |||,28
<android.view.View: void setVerticalScrollbarThumbDrawable(Drawable)>,3,,Defines the vertical scrollbar thumb drawable Related XML Attributes: android:scrollbarThumbVertical,void,drawable Drawable : This value may be null . |||,29
<android.view.View: void transformMatrixToGlobal(Matrix)>,,,"Modifies the input matrix such that it maps view-local coordinates to
 on-screen coordinates.",void,"matrix Matrix : input matrix to modify
This value must never be null . |||",29
<android.view.ViewGroup: int getChildDrawingOrder(int)>,,,"Converts drawing order position to container position. Children are not necessarily drawn in the order in which they appear in the container.
 ViewGroups can enable a custom ordering via setChildrenDrawingOrderEnabled(boolean) .
 This method returns the container position of a child that appears in the given position
 in the current drawing order.",int the container position of a child for this drawing order position. |||,drawingPosition int : the drawing order position. |||,29
<android.view.ViewGroup: void suppressLayout(boolean)>,,,"Tells this ViewGroup to suppress all layout() calls until layout
 suppression is disabled with a later call to suppressLayout(false).
 When layout suppression is disabled a requestLayout() call is sent
 if layout() was attempted while layout was being suppressed.",void,suppress boolean |||,29
<android.view.ViewStructure: void setMinTextEms(int)>,,,"Sets the minimum width in ems of the text associated with this view when supported. Should only be set when the node is used for autofill purposes - it will be ignored
 when used for Assist.",void,minEms int |||,28
<android.view.ViewTreeObserver: boolean unregisterFrameCommitCallback(Runnable)>,,,Attempts to remove the given callback from the list of pending frame complete callbacks.,"boolean Whether or not the callback was removed. If this returns true the callback will
         not be invoked. If false is returned then the callback was either never added
         or may already be pending execution and was unable to be removed |||","callback Runnable : The callback to remove
This value must never be null . |||",29
<android.view.Window: boolean isStatusBarContrastEnforced()>,,,"Returns whether the system is ensuring that the status bar has enough contrast when a
 fully transparent background is requested. When the status bar color has a non-zero alpha value the value of this
 property has no effect.",boolean true if the system is ensuring contrast false otherwise. |||,,29
<android.view.Window: List getSystemGestureExclusionRects()>,,,"Retrieve the list of areas within this window's coordinate space where the system should not
 intercept touch or other pointing device gestures. This is the list as set by setSystemGestureExclusionRects(java.util.List) or an empty list if setSystemGestureExclusionRects(java.util.List) has not been called. It does not include
 exclusion rects set by this window's view hierarchy.","List < Rect > a list of system gesture exclusion rects specific to this window
 
 This value will never be null . |||",,29
<android.view.WindowInsets.Builder: WindowInsets.Builder setDisplayCutout(DisplayCutout)>,,,Sets the display cutout.,WindowInsets.Builder itself |||,"displayCutout DisplayCutout : the display cutout or null if there is none
This value may be null . |||",29
<android.view.WindowInsets.Builder: WindowInsets.Builder setSystemWindowInsets(Insets)>,,,"This method was deprecated
      in API level R. Use setInsets(int android.graphics.Insets) with Type#systemBars() . Sets system window insets in pixels. The system window inset represents the area of a full-screen window that is
 partially or fully obscured by the status bar navigation bar IME or other system
 windows.","WindowInsets.Builder itself
 This value will never be null . |||",systemWindowInsets Insets : This value must never be null . |||,29
<android.view.WindowInsets: DisplayCutout getDisplayCutout()>,,,Returns the display cutout if there is one.,DisplayCutout the display cutout or null if there is none |||,,28
<android.view.WindowInsets: Insets getMandatorySystemGestureInsets()>,,,"This method was deprecated
      in API level R. Use getInsets(int) with Type#mandatorySystemGestures() instead. Returns the mandatory system gesture insets. The mandatory system gesture insets represent the area of a window where mandatory system
 gestures have priority and may consume some or all touch input e.g. due to the a system bar
 occupying it or it being reserved for touch-only gestures. In contrast to regular system gestures  mandatory system gestures cannot be overriden by View#setSystemGestureExclusionRects . Simple taps are guaranteed to reach the window even within the system gesture insets
 as long as they are outside the system window insets . When View#SYSTEM_UI_FLAG_LAYOUT_STABLE is requested an inset will be returned
 even when the system gestures are inactive due to View#SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN or View#SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION . This inset is consumed together with the system window insets by consumeSystemWindowInsets() .",Insets This value will never be null . |||,,29
<android.view.WindowInsets: Insets getStableInsets()>,3,,"This method was deprecated
      in API level R. Use getInsetsIgnoringVisibility(int) with Type#systemBars() instead. Returns the stable insets in pixels. The stable inset represents the area of a full-screen window that may be
 partially or fully obscured by the system UI elements.  This value does not change
 based on the visibility state of those elements; for example if the status bar is
 normally shown but temporarily hidden the stable inset will still provide the inset
 associated with the status bar being shown.","Insets The stable insets
 This value will never be null . |||",,29
<android.view.WindowInsets: Insets getSystemWindowInsets()>,3,,"This method was deprecated
      in API level R. Use getInsets(int) with Type#systemBars() instead. Returns the system window insets in pixels. The system window inset represents the area of a full-screen window that is
 partially or fully obscured by the status bar navigation bar IME or other system windows.","Insets The system window insets
 This value will never be null . |||",,29
<android.view.WindowInsets: WindowInsets consumeDisplayCutout()>,3,,"This method was deprecated
      in API level R. Consuming of different parts individually of a WindowInsets instance is
 deprecated since WindowInsets contains many different insets. Use CONSUMED instead to stop dispatching insets. Returns a copy of this WindowInsets with the cutout fully consumed.","WindowInsets A modified copy of this WindowInsets
 This value will never be null . |||",,28
"<android.view.WindowInsets: WindowInsets inset(int,int,int,int)>",3,,"Returns a copy of this instance inset in the given directions.

 This is intended for dispatching insets to areas of the window that are smaller than the
 current area. Example:","WindowInsets the inset insets
 
 This value will never be null . |||","left int : the amount of insets to remove from the left. Must be non-negative.
Value is 0 or greater |||
top int : the amount of insets to remove from the top. Must be non-negative.
Value is 0 or greater |||
right int : the amount of insets to remove from the right. Must be non-negative.
Value is 0 or greater |||
bottom int : the amount of insets to remove from the bottom. Must be non-negative.
Value is 0 or greater |||",29
<android.webkit.TracingConfig.Builder: TracingConfig.Builder setTracingMode(int)>,3,,"Sets the tracing mode for this configuration.
 When tracingMode is not set explicitly the default is TracingConfig.RECORD_CONTINUOUSLY .",TracingConfig.Builder The builder to facilitate chaining. |||,"tracingMode int : The tracing mode to use one of TracingConfig.RECORD_UNTIL_FULL or TracingConfig.RECORD_CONTINUOUSLY .
Value is TracingConfig.RECORD_UNTIL_FULL or TracingConfig.RECORD_CONTINUOUSLY |||",28
<android.webkit.WebSettings: int getForceDark()>,3,,"Get the force dark mode for this WebView.
 The default force dark mode is FORCE_DARK_AUTO .","int the currently set force dark mode.
 Value is FORCE_DARK_OFF  FORCE_DARK_AUTO or FORCE_DARK_ON |||",,29
<android.webkit.WebSettings: void setForceDark(int)>,3,,Set the force dark mode for this WebView.,void,"forceDark int : the force dark mode to set.
Value is FORCE_DARK_OFF  FORCE_DARK_AUTO or FORCE_DARK_ON |||",29
<android.webkit.WebView: boolean isVisibleToUserForAutofill(int)>,3,,"Computes whether this virtual autofill view is visible to the user. Note: By default it returns true but views providing a virtual hierarchy
 view must override it.",boolean Whether the view is visible on the screen. |||,virtualId int |||,28
<android.webkit.WebView: void disableWebView()>,3,,"Indicate that the current process does not intend to use WebView and
 that an exception should be thrown if a WebView is created or any other
 methods in the android.webkit package are used. Applications with multiple processes may wish to call this in processes
 that are not intended to use WebView to avoid accidentally incurring
 the memory usage of initializing WebView in long-lived processes that
 have no need for it and to prevent potential data directory conflicts
 (see setDataDirectorySuffix(String) ). For example an audio player application with one process for its
 activities and another process for its playback service may wish to call
 this method in the playback service's Service.onCreate() .",void,,28
<android.webkit.WebView: void setDataDirectorySuffix(String)>,3,,"Define the directory used to store WebView data for the current process.
 The provided suffix will be used when constructing data and cache
 directory paths. If this API is not called no suffix will be used.
 Each directory can be used by only one process in the application. If more
 than one process in an app wishes to use WebView only one process can use
 the default directory and other processes must call this API to define
 a unique suffix. This means that different processes in the same application cannot directly
 share WebView-related data since the data directories must be distinct.
 Applications that use this API may have to explicitly pass data between
 processes. For example login cookies may have to be copied from one
 process's cookie jar to the other using CookieManager if both
 processes' WebViews are intended to be logged in. Most applications should simply ensure that all components of the app
 that rely on WebView are in the same process to avoid needing multiple
 data directories. The disableWebView() method can be used to ensure
 that the other processes do not use WebView by accident in this case. This API must be called before any instances of WebView are created in
 this process and before any other methods in the android.webkit package
 are called by this process.",void,"suffix String : The directory name suffix to be used for the current
process. Must not contain a path separator.
This value must never be null . |||",28
"<android.webkit.WebView: void setWebViewRenderProcessClient(Executor,WebViewRenderProcessClient)>",3,,"Sets the renderer client object associated with this WebView. The renderer client encapsulates callbacks relevant to WebView renderer
 state. See WebViewRenderProcessClient for details. Although many WebView instances may share a single underlying
 renderer and renderers may live either in the application
 process or in a sandboxed process that is isolated from the
 application process instances of WebViewRenderProcessClient are set per-WebView.  Callbacks represent renderer events from
 the perspective of this WebView and may or may not be correlated
 with renderer events affecting other WebViews.",void,"executor Executor : the Executor on which WebViewRenderProcessClient callbacks will execute.
This value must never be null .
Callback and listener events are dispatched through this Executor providing an easy way to control which thread is
used. To dispatch events through the main thread of your
application you can use Context.getMainExecutor() .
To dispatch events through a shared thread pool you can use AsyncTask#THREAD_POOL_EXECUTOR . |||
webViewRenderProcessClient WebViewRenderProcessClient : the WebViewRenderProcessClient object.
This value must never be null . |||",29
<android.webkit.WebView: void setWebViewRenderProcessClient(WebViewRenderProcessClient)>,3,,"Sets the renderer client object associated with this WebView.

 See setWebViewRenderProcessClient(java.util.concurrent.Executor android.webkit.WebViewRenderProcessClient) for details. WebViewRenderProcessClient callbacks will run on the thread that this WebView was
 initialized on.",void,"webViewRenderProcessClient WebViewRenderProcessClient : the WebViewRenderProcessClient object.
This value may be null . |||",29
<android.webkit.WebView: WebViewRenderProcess getWebViewRenderProcess()>,3,,"Gets a handle to the WebView renderer process associated with this WebView. In Build.VERSION_CODES.O and above WebView may
 run in ""multiprocess"" mode. In multiprocess mode rendering of web
 content is performed by a sandboxed renderer process separate to the
 application process.  This renderer process may be shared with other
 WebViews in the application but is not shared with other application
 processes. If WebView is running in multiprocess mode this method returns a
 handle to the renderer process associated with the WebView which can
 be used to control the renderer process.","WebViewRenderProcess the WebViewRenderProcess renderer handle associated
         with this WebView or null if
         WebView is not runing in multiprocess mode. |||",,29
"<android.webkit.WebViewRenderProcessClient: void onRenderProcessUnresponsive(WebView,WebViewRenderProcess)>",,,"Called when the renderer currently associated with view becomes unresponsive as a
 result of a long running blocking task such as the execution of JavaScript. If a WebView fails to process an input event or successfully navigate to a new URL within
 a reasonable time frame the renderer is considered to be unresponsive and this callback
 will be called. This callback will continue to be called at regular intervals as long as the renderer
 remains unresponsive. If the renderer becomes responsive again WebViewRenderProcessClient#onRenderProcessResponsive will be called once and this method
 will not subsequently be called unless another period of unresponsiveness is detected. The minimum interval between successive calls to onRenderProcessUnresponsive is 5
 seconds. No action is taken by WebView as a result of this method call. Applications may
 choose to terminate the associated renderer via the object that is passed to this callback
 if in multiprocess mode however this must be accompanied by correctly handling WebViewClient#onRenderProcessGone for this WebView and all other WebViews associated
 with the same renderer. Failure to do so will result in application termination.",void,"view WebView : The WebView for which unresponsiveness was detected.
This value must never be null . |||
renderer WebViewRenderProcess : The WebViewRenderProcess that has become unresponsive
or null if WebView is running in single process mode.
This value may be null . |||",29
<android.widget.AbsListView: void setEdgeEffectColor(int)>,,,Sets the edge effect color for both top and bottom edge effects.,void,color int : The color for the edge effects. |||,29
<android.widget.AbsSeekBar: BlendMode getThumbTintBlendMode()>,,,"Returns the blending mode used to apply the tint to the thumb drawable
 if specified. Related XML Attributes: android:thumbTintMode","BlendMode the blending mode used to apply the tint to the thumb drawable
 This value may be null . |||",,29
<android.widget.CheckedTextView: void setCheckMarkTintBlendMode(BlendMode)>,,,"Specifies the blending mode used to apply the tint specified by setCheckMarkTintList(android.content.res.ColorStateList) to the check mark
 drawable. The default mode is PorterDuff.Mode#SRC_IN . Related XML Attributes: android:checkMarkTintMode",void,"tintMode BlendMode : the blending mode used to apply the tint may be null to clear tint
This value may be null . |||",29
<android.widget.EdgeEffect: BlendMode getBlendMode()>,,,"Returns the blend mode. A blend mode defines how source pixels
 (generated by a drawing command) are composited with the destination pixels
 (content of the render target).","BlendMode BlendMode
 
 This value may be null . |||",,29
<android.widget.HorizontalScrollView: int getLeftEdgeEffectColor()>,,,Returns the left edge effect color.,int The left edge effect color. |||,,29
<android.widget.HorizontalScrollView: void setRightEdgeEffectColor(int)>,,,Sets the right edge effect color.,void,color int : The color for the right edge effect. |||,29
<android.widget.ImageView: void setImageTintBlendMode(BlendMode)>,,,"Specifies the blending mode used to apply the tint specified by setImageTintList(android.content.res.ColorStateList) } to the image drawable. The default
 mode is BlendMode#SRC_IN . Related XML Attributes: android:tintMode",void,"blendMode BlendMode : the blending mode used to apply the tint may be null to clear tint
This value may be null . |||",29
<android.widget.ListPopupWindow: Rect getEpicenterBounds()>,,,"Returns bounds which are used as a popup's epicenter
 of the enter and exit transitions.",Rect bounds relative to anchor view or null if not set |||,,29
"<android.widget.Magnifier.Builder: Magnifier.Builder setDefaultSourceToMagnifierOffset(int,int)>",,,"Sets an offset that should be added to the content source center to obtain
 the position of the magnifier window when the Magnifier.show(float float) method is called. The offset is ignored when Magnifier.show(float float float float) is used. The offset can be negative. It defaults to (0dp 0dp).",Magnifier.Builder This value will never be null . |||,"horizontalOffset int : the horizontal component of the offset
This units of this value are pixels. |||
verticalOffset int : the vertical component of the offset
This units of this value are pixels. |||",29
<android.widget.Magnifier.Builder: Magnifier.Builder setInitialZoom(float)>,,,"Sets the zoom to be applied to the chosen content before being copied to the magnifier.
 A content of size (content_width content_height) will be magnified to
 (content_width * zoom content_height * zoom) which will coincide with the size
 of the magnifier. A zoom of 1 will translate to no magnification (the content will
 be just copied to the magnifier with no scaling). The zoom defaults to 1.25.
 Note that the zoom can also be changed after the instance is built using the Magnifier#setZoom(float) method.",Magnifier.Builder This value will never be null . |||,"zoom float : the zoom to be set
Value is 0f or greater |||",29
"<android.widget.Magnifier.Builder: Magnifier.Builder setSize(int,int)>",,,"Sets the size of the magnifier window in pixels. Defaults to (100dp 48dp).
 Note that the size of the content being magnified and copied to the magnifier
 will be computed as (window width / zoom window height / zoom).",Magnifier.Builder This value will never be null . |||,"width int : the window width to be set
This units of this value are pixels.
Value is 0 or greater |||
height int : the window height to be set
This units of this value are pixels.
Value is 0 or greater |||",29
<android.widget.Magnifier: boolean isClippingEnabled()>,,,"Returns whether the magnifier position will be adjusted such that the magnifier will be
 fully within the bounds of the main application window by also avoiding any overlap
 with system insets (such as the one corresponding to the status bar) i.e. whether the
 area where the magnifier can be positioned will be clipped to the main application window
 and the system insets.",boolean whether the magnifier position will be adjusted |||,,29
<android.widget.Magnifier: float getCornerRadius()>,3,,This units of this value are pixels.,"float the corner radius of the magnifier window in pixels
 This units of this value are pixels.
 {} |||",,29
<android.widget.Magnifier: float getElevation()>,,,This units of this value are pixels.,"float the elevation set for the magnifier window in pixels
 This units of this value are pixels.
 {} |||",,29
<android.widget.Magnifier: float getZoom()>,,,"Returns the zoom to be applied to the magnified view region copied to the magnifier.
 If the zoom is x and the magnifier window size is (width height) the original size
 of the content being magnified will be (width / x height / x).",float the zoom applied to the content |||,,28
<android.widget.Magnifier: int getWidth()>,,,This units of this value are pixels.,"int the width of the magnifier window in pixels
 This units of this value are pixels.
 {} |||",,28
<android.widget.Magnifier: Point getPosition()>,,,"Returns the top left coordinates of the magnifier relative to the main application
 window. They will be determined by the coordinates of the last show(float float) or show(float float float float) call adjusted to take into account any
 potential clamping behavior. The method can be used immediately after a #show
 call to find out where the magnifier will be positioned. However the position of the
 magnifier will not be updated visually in the same frame due to the async nature of
 the content copying and of the magnifier rendering.
 The method will return null if #show has not yet been called or if the last
 operation performed was a #dismiss.",Point the top left coordinates of the magnifier |||,,29
<android.widget.Magnifier: Point getSourcePosition()>,,,"Returns the top left coordinates of the magnifier source (i.e. the view region going to
 be magnified and copied to the magnifier) relative to the window or surface the content
 is copied from. The content will be copied:
 - if the magnified view is a SurfaceView from the surface backing it
 - otherwise from the surface backing the main application window and the coordinates
   returned will be relative to the main application window
 The method will return null if #show has not yet been called or if the last
 operation performed was a #dismiss.",Point the top left coordinates of the magnifier source |||,,29
"<android.widget.Magnifier: void show(float,float)>",,,"Shows the magnifier on the screen. The method takes the coordinates of the center
 of the content source going to be magnified and copied to the magnifier. The coordinates
 are relative to the top left corner of the magnified view. The magnifier will be
 positioned such that its center will be at the default offset from the center of the source.
 The default offset can be specified using the method Builder#setDefaultSourceToMagnifierOffset(int int) . If the offset should
 be different across calls to this method you should consider to use method show(float float float float) instead.",void,"sourceCenterX float : horizontal coordinate of the source center relative to the view
Value is 0 or greater |||
sourceCenterY float : vertical coordinate of the source center relative to the view
Value is 0 or greater |||",28
"<android.widget.Magnifier: void show(float,float,float,float)>",,,"Shows the magnifier on the screen at a position that is independent from its content
 position. The first two arguments represent the coordinates of the center of the
 content source going to be magnified and copied to the magnifier. The last two arguments
 represent the coordinates of the center of the magnifier itself. All four coordinates
 are relative to the top left corner of the magnified view. If you consider using this
 method such that the offset between the source center and the magnifier center coordinates
 remains constant you should consider using method show(float float) instead.",void,"sourceCenterX float : horizontal coordinate of the source center relative to the view
Value is 0 or greater |||
sourceCenterY float : vertical coordinate of the source center relative to the view
Value is 0 or greater |||
magnifierCenterX float : horizontal coordinate of the magnifier center relative to the view |||
magnifierCenterY float : vertical coordinate of the magnifier center relative to the view |||",29
<android.widget.NumberPicker: void setTextColor(int)>,,,Sets the text color for all the states (normal selected focused) to be the given color.,void,color int : A color value in the form 0xAARRGGBB. |||,29
<android.widget.PopupWindow: boolean isTouchModal()>,,,"Indicates whether outside touches will be sent to this window
 or other windows behind it",boolean true if touches will be sent to this window false otherwise |||,,29
<android.widget.PopupWindow: void setEpicenterBounds(Rect)>,,,"Sets the bounds used as the epicenter of the enter and exit transitions. Transitions use Rect referred to as the epicenter to orient
 the direction of travel. For popup windows the anchor view bounds are
 used as the default epicenter. See Transition#setEpicenterCallback(EpicenterCallback) for more
 information about how transition epicenters work.",void,"bounds Rect : the epicenter bounds relative to the anchor view or null to use the default epicenter
This value may be null . |||",29
<android.widget.ProgressBar: BlendMode getIndeterminateTintBlendMode()>,,,"Returns the blending mode used to apply the tint to the indeterminate
 drawable if specified. Related XML Attributes: android:indeterminateTintMode","BlendMode the blending mode used to apply the tint to the indeterminate
         drawable
 This value may be null . |||",,29
<android.widget.ProgressBar: BlendMode getProgressBackgroundTintBlendMode()>,,,Related XML Attributes: android:progressBackgroundTintMode,"BlendMode the blending mode used to apply the tint to the progress
         background
 This value may be null . |||",,29
<android.widget.ProgressBar: BlendMode getSecondaryProgressTintBlendMode()>,,,"Returns the blending mode used to apply the tint to the secondary
 progress drawable if specified. Related XML Attributes: android:secondaryProgressTintMode","BlendMode the blending mode used to apply the tint to the secondary
         progress drawable
 This value may be null . |||",,29
<android.widget.ProgressBar: Drawable getCurrentDrawable()>,,,"Returns the drawable currently used to draw the progress bar. This will be
 either getProgressDrawable() or getIndeterminateDrawable() depending on whether the progress bar is in determinate or indeterminate mode.","Drawable the drawable currently used to draw the progress bar
 
 This value may be null . |||",,29
<android.widget.ProgressBar: int getMaxHeight()>,,,This units of this value are pixels.,"int the maximum height the progress bar can have in pixels
 
 This units of this value are pixels.
 {} |||",,29
<android.widget.ProgressBar: void setIndeterminateTintBlendMode(BlendMode)>,,,"Specifies the blending mode used to apply the tint specified by setIndeterminateTintList(android.content.res.ColorStateList) to the indeterminate
 drawable. The default mode is PorterDuff.Mode#SRC_IN . Related XML Attributes: android:indeterminateTintMode",void,"blendMode BlendMode : the blending mode used to apply the tint may be null to clear tint
This value may be null . |||",29
<android.widget.ProgressBar: void setMaxHeight(int)>,,,Sets the maximum height the progress bar can have. Related XML Attributes: android:maxHeight,void,"maxHeight int : the maximum height to be set in pixels
This units of this value are pixels. |||",29
<android.widget.ProgressBar: void setMinHeight(int)>,,,Sets the minimum height the progress bar can have. Related XML Attributes: android:minHeight,void,"minHeight int : the minimum height to be set in pixels
This units of this value are pixels. |||",29
<android.widget.ProgressBar: void setMinWidth(int)>,,,Sets the minimum width the progress bar can have. Related XML Attributes: android:minWidth,void,"minWidth int : the minimum width to be set in pixels
This units of this value are pixels. |||",29
<android.widget.RelativeLayout: int getIgnoreGravity()>,,,Get the id of the View to be ignored by gravity Related XML Attributes: android:ignoreGravity,int |||,,29
"<android.widget.RemoteViews.RemoteResponse: RemoteViews.RemoteResponse addSharedElement(int,String)>",,,"Adds a shared element to be transferred as part of the transition between Activities
 using cross-Activity scene animations. The position of the first element will be used as
 the epicenter for the exit Transition. The position of the associated shared element in
 the launched Activity will be the epicenter of its entering Transition.",RemoteViews.RemoteResponse This value will never be null . |||,"viewId int : The id of the view to be shared as part of the transition |||
sharedElementName String : The shared element name for this view
This value must never be null . |||",29
<android.widget.ScrollView: int getBottomEdgeEffectColor()>,,,Returns the bottom edge effect color.,int The bottom edge effect color. |||,,29
<android.widget.ScrollView: void scrollToDescendant(View)>,,,Scrolls the view to the given child.,void,"child View : the View to scroll to
This value must never be null . |||",29
<android.widget.ScrollView: void setBottomEdgeEffectColor(int)>,,,Sets the bottom edge effect color.,void,color int : The color for the bottom edge effect. |||,29
<android.widget.TextView: boolean isFallbackLineSpacing()>,,,Related XML Attributes: android:fallbackLineSpacing,boolean whether fallback line spacing is enabled true by default |||,,28
<android.widget.TextView: Drawable getTextCursorDrawable()>,,,"Returns the Drawable corresponding to the text cursor.
 Note that any change applied to the cursor Drawable will not be visible
 until the cursor is hidden and then drawn again. Related XML Attributes: android:textCursorDrawable","Drawable the text cursor drawable

 This value may be null . |||",,29
<android.widget.TextView: Drawable getTextSelectHandleLeft()>,,,"Returns the Drawable corresponding to the left handle used
 for selecting text.
 Note that any change applied to the handle Drawable will not be visible
 until the handle is hidden and then drawn again. Related XML Attributes: android:textSelectHandleLeft","Drawable the left text selection handle drawable

 This value may be null . |||",,29
<android.widget.TextView: Drawable getTextSelectHandleRight()>,,,"Returns the Drawable corresponding to the right handle used
 for selecting text.
 Note that any change applied to the handle Drawable will not be visible
 until the handle is hidden and then drawn again. Related XML Attributes: android:textSelectHandleRight","Drawable the right text selection handle drawable

 This value may be null . |||",,29
<android.widget.TextView: int getFirstBaselineToTopHeight()>,,,Returns the distance between the first text baseline and the top of this TextView. Related XML Attributes: android:firstBaselineToTopHeight,int |||,,28
<android.widget.TextView: void setFirstBaselineToTopHeight(int)>,,,"Updates the top padding of the TextView so that firstBaselineToTopHeight is
 the distance between the top of the TextView and first line's baseline. First and last baseline metrics for a TextView. Note that if FontMetrics.top or FontMetrics.ascent was
 already greater than firstBaselineToTopHeight the top padding is not updated.
 Moreover since this function sets the top padding if the height of the TextView is less than
 the sum of top padding line height and bottom padding top of the line will be pushed
 down and bottom will be clipped. Related XML Attributes: android:firstBaselineToTopHeight",void,"firstBaselineToTopHeight int : distance between first baseline to top of the container
in pixels
This units of this value are pixels.
Value is 0 or greater |||",28
<android.widget.TextView: void setLineHeight(int)>,,,"Sets an explicit line height for this TextView. This is equivalent to the vertical distance
 between subsequent baselines in the TextView. Related XML Attributes: android:lineHeight",void,"lineHeight int : the line height in pixels
This units of this value are pixels.
Value is 0 or greater |||",28
<android.widget.TextView: void setTextCursorDrawable(Drawable)>,,,"Sets the Drawable corresponding to the text cursor. The Drawable defaults to the
 value of the textCursorDrawable attribute.
 Note that any change applied to the cursor Drawable will not be visible
 until the cursor is hidden and then drawn again. Related XML Attributes: android:textCursorDrawable",void,textCursorDrawable Drawable : This value may be null . |||,29
<android.widget.TextView: void setTextMetricsParams(PrecomputedText.Params)>,,,"Apply the text layout parameter.

 Update the TextView parameters to be compatible with PrecomputedText.Params .",void,params PrecomputedText.Params : This value must never be null . |||,28
<android.widget.TextView: void setTextSelectHandle(Drawable)>,,,"Sets the Drawable corresponding to the selection handle used for
 positioning the cursor within text. The Drawable defaults to the value
 of the textSelectHandle attribute.
 Note that any change applied to the handle Drawable will not be visible
 until the handle is hidden and then drawn again. Related XML Attributes: android:textSelectHandle",void,textSelectHandle Drawable : This value must never be null . |||,29
<android.widget.TextView: void setTextSelectHandleLeft(Drawable)>,,,"Sets the Drawable corresponding to the left handle used
 for selecting text. The Drawable defaults to the value of the
 textSelectHandleLeft attribute.
 Note that any change applied to the handle Drawable will not be visible
 until the handle is hidden and then drawn again. Related XML Attributes: android:textSelectHandleLeft",void,textSelectHandleLeft Drawable : This value must never be null . |||,29
<android.widget.Toolbar: Drawable getCollapseIcon()>,,,Return the current drawable used as the collapse icon. Related XML Attributes: android:collapseIcon,"Drawable The collapse icon drawable

 This value may be null . |||",,29
<android.widget.Toolbar: void setCollapseIcon(Drawable)>,,,"Set the icon to use for the toolbar's collapse button. The collapse button appears at the start of the toolbar when an action view is present
 . Related XML Attributes: android:collapseIcon",void,"icon Drawable : Drawable to set may be null to use the default icon
This value may be null . |||",29
<android.widget.ViewFlipper: int getFlipInterval()>,,,Get the delay before flipping to the next view.,"int delay time in milliseconds
 
 Value is 0 or greater |||",,29
<java.lang.ref.Reference: void reachabilityFence(Object)>,,,"Ensures that the object referenced by the given reference remains strongly reachable regardless of any prior actions of the program that might otherwise cause
 the object to become unreachable; thus the referenced object is not
 reclaimable by garbage collection at least until after the invocation of
 this method.  Invocation of this method does not itself initiate garbage
 collection or finalization. This method establishes an ordering for strong reachability with respect to garbage collection.  It controls relations that are
 otherwise only implicit in a program -- the reachability conditions
 triggering garbage collection.  This method is designed for use in
 uncommon situations of premature finalization where using synchronized blocks or methods or using other synchronization
 facilities are not possible or do not provide the desired control.  This
 method is applicable only when reclamation may have visible effects
 which is possible for objects with finalizers (See Section 12.6 17 of The Javaâ„¢ Language Specification )
 that are implemented in ways that rely on ordering control for correctness.",void,ref Object : the reference. If null this method has no effect. |||,28
<javax.net.ssl.SSLEngine: BiFunction getHandshakeApplicationProtocolSelector()>,,,"Retrieves the callback function that selects an application protocol
 value during a SSL/TLS handshake.
 See setHandshakeApplicationProtocolSelector for the function's type parameters.",BiFunction < SSLEngine  List < String > String > the callback function or null if none has been set. |||,,29
<javax.net.ssl.SSLEngine: String getHandshakeApplicationProtocol()>,,,"Returns the application protocol value negotiated on a SSL/TLS
 handshake currently in progress. Like getHandshakeSession() a connection may be in the middle of a handshake. The
 application protocol may or may not yet be available.","String null if it has not yet been determined if application
         protocols might be used for this handshake an empty String if application protocols values will not
         be used or a non-empty application protocol String if a value was successfully negotiated. |||",,29
<javax.net.ssl.SSLEngine: void setHandshakeApplicationProtocolSelector(BiFunction)>,,,"Registers a callback function that selects an application protocol
 value for a SSL/TLS handshake.
 The function overrides any values supplied using SSLParameters#setApplicationProtocols and it supports the following
 type parameters:",void,"selector BiFunction : the callback function or null to disable the callback
functionality. |||",29
