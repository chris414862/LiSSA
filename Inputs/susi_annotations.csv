,Annotation
<com.android.server.WifiService: android.os.Messenger getWifiServiceMessenger()>,NONE
<com.android.server.WifiService: void clearBlacklist()>,NONE
"<com.android.server.WifiService: void setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)>",SINK
<android.net.wifi.WifiManager: boolean reconnect()>,NONE
<com.android.systemui.statusbar.phone.PhoneStatusBar: com.android.systemui.statusbar.phone.PhoneStatusBarView makeStatusBarView()>,SOURCE
"<com.android.providers.settings.SettingsBackupAgent: void onRestoreFile(android.os.ParcelFileDescriptor,long,int,java.lang.String,java.lang.String,long,long)>",SOURCE
<com.android.settings.wifi.WifiSettingsForSetupWizardXL: void updateConnectionState(android.net.NetworkInfo$DetailedState)>,NONE
<com.android.settings.SettingsPreferenceFragment: void onActivityCreated(android.os.Bundle)>,NONE
<com.android.server.ConnectivityService: void tryFailover(int)>,NONE
<com.android.server.ConnectivityService: boolean teardown(android.net.NetworkStateTracker)>,NONE
<com.android.settings.AccessibilitySettings$ToggleAccessibilityServicePreferenceFragment: void onActivityCreated(android.os.Bundle)>,NONE
<com.android.settings.AccessibilitySettings: void onActivityCreated(android.os.Bundle)>,NONE
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onActivityCreated(android.os.Bundle)>,NONE
<com.android.settings.vpn2.VpnSettings: void onActivityCreated(android.os.Bundle)>,NONE
<android.net.IConnectivityManager$Stub$Proxy: boolean setRadios(boolean)>,SINK
<com.android.settings.bluetooth.BluetoothSettings: void onActivityCreated(android.os.Bundle)>,NONE
"<com.android.settings.SecuritySettings: void onActivityResult(int,int,android.content.Intent)>",NONE
<com.android.server.ConnectivityService$FeatureUser: void binderDied()>,NONE
"<com.android.server.ConnectivityService$FeatureUser: void <init>(com.android.server.ConnectivityService,int,java.lang.String,android.os.IBinder)>",NONE
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: boolean turnOnUpstreamMobileConnection(int)>,SINK
<com.android.server.ConnectivityService: void setNetworkPreference(int)>,SINK
<com.android.systemui.SystemUIService: void onCreate()>,NONE
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void chooseUpstreamType(boolean)>,NONE
<com.android.internal.util.StateMachine$SmHandler: void invokeEnterMethods(int)>,NONE
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupCreatingState: void exit()>,NONE
<com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState: void exit()>,NONE
<android.net.wifi.p2p.IWifiP2pManager$Stub$Proxy: android.os.Messenger getMessenger()>,SOURCE
"<android.net.wifi.p2p.IWifiP2pManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>",SINK
<android.net.wifi.WifiStateMachine$InitialState: void enter()>,NONE
"<com.google.android.mms.pdu.PduPersister: void updateHeaders(android.net.Uri,com.google.android.mms.pdu.SendReq)>",SINK
"<com.android.providers.telephony.SmsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>",SINK
"<com.android.mms.data.Conversation$ConversationQueryHandler: void onDeleteComplete(int,java.lang.Object,int)>",NONE
<com.android.mms.ui.MessageListAdapter$OnDataSetChangedListener: void onContentChanged(com.android.mms.ui.MessageListAdapter)>,NONE
<com.android.mms.util.PduLoaderManager$PduTask$1: void run()>,NONE
"<com.android.mms.ui.MmsThumbnailPresenter: void presentVideoThumbnail(com.android.mms.ui.SlideViewInterface,com.android.mms.model.VideoModel)>",NONE
<com.android.mms.ui.AttachmentEditor: boolean update(com.android.mms.data.WorkingMessage)>,NONE
<com.android.mms.ui.ComposeMessageActivity: void drawTopPanel(boolean)>,NONE
<com.android.mms.ui.ComposeMessageActivityNoLockScreen: void onCreate(android.os.Bundle)>,NONE
"<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])>",SOURCE
<com.android.mms.data.Conversation$3: void run()>,NONE
<com.android.mms.util.Recycler$MmsRecycler: android.database.Cursor getAllThreads(android.content.Context)>,SOURCE
<com.android.mms.ui.ClassZeroActivity: void saveMessage()>,SINK
<com.android.mms.util.Recycler$SmsRecycler: android.database.Cursor getAllThreads(android.content.Context)>,SOURCE
<com.android.mms.ui.ManageSimMessages: void startQuery()>,SINK
"<com.android.internal.telephony.SMSDispatcher: int processMessagePart(byte[],java.lang.String,int,int,int,long,int,boolean)>",SINK
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)>,SINK
"<com.android.mms.util.Recycler$SmsRecycler: void deleteOldMessagesByThreadId(android.content.Context,long)>",NONE
"<com.android.mms.transaction.SmsMessageSender: void <init>(android.content.Context,java.lang.String[],java.lang.String,long)>",NONE
<com.android.mms.data.WorkingMessage: void deleteDraftSmsMessage(long)>,NONE
"<com.android.mms.transaction.MessageStatusService: android.telephony.SmsMessage updateMessageStatus(android.content.Context,android.net.Uri,byte[],java.lang.String)>",SINK
<com.android.mms.transaction.SmsReceiverService: int moveOutboxMessagesToFailedBox()>,SOURCE
<android.nfc.NfcAdapter: void disableForegroundDispatch(android.app.Activity)>,NONE
"<com.android.browser.NfcHandler: void register(android.app.Activity,com.android.browser.Controller)>",NONE
<com.android.browser.Controller: void onPause()>,NONE
<com.android.gallery3d.app.Gallery: void startDefaultPage()>,NONE
<com.android.gallery3d.app.CropImage$LoadDataTask: android.graphics.BitmapRegionDecoder run(com.android.gallery3d.util.ThreadPool$JobContext)>,NONE
<com.android.gallery3d.app.AlbumPage$5: boolean onActionItemClicked(android.view.MenuItem)>,NONE
<com.android.gallery3d.app.PhotoPage: void onBackPressed()>,NONE
<com.android.gallery3d.app.ActivityState: void onBackPressed()>,NONE
<com.android.gallery3d.app.ManageCachePage: void onProgressComplete(int)>,NONE
<com.android.gallery3d.ui.MenuExecutor$MediaOperation: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)>,NONE
<com.android.gallery3d.ui.SlideshowView: boolean onTouch(android.view.MotionEvent)>,NONE
<com.android.camera.PanoramaActivity: void onBackPressed()>,NONE
<com.android.gallery3d.ui.TileImageView: boolean dispatchTouchEvent(android.view.MotionEvent)>,NONE
<com.android.gallery3d.app.DialogPicker: void onResume()>,NONE
<com.android.gallery3d.ui.SlideshowView: void removeAllComponents()>,NONE
<com.android.gallery3d.app.ManageCachePage: void setContentPane(com.android.gallery3d.ui.GLView)>,NONE
<com.android.gallery3d.app.CropImage: void onPause()>,NONE
<com.android.nfc.NfcService$TagService: int close(int)>,NONE
<android.nfc.tech.IsoDep: void close()>,NONE
<android.nfc.tech.NfcB: void close()>,NONE
"<android.nfc.tech.NfcB: byte[] transceive(byte[],boolean)>",SOURCE
<com.android.nfc.NfcService$TagService: int ndefMakeReadOnly(int)>,NONE
<android.nfc.INfcAdapterExtras$Stub$Proxy: int getCardEmulationRoute(java.lang.String)>,SOURCE
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: boolean isForegroundApp(java.lang.String)>,SOURCE
<com.android.nfc.NfcService: void sendMockNdefTag(android.nfc.NdefMessage)>,SINK
<android.net.wifi.IWifiManager$Stub$Proxy: android.net.wifi.WifiInfo getConnectionInfo()>,SOURCE
<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()>,SOURCE
<com.android.settings.wifi.WifiSettings$2: void onClick(android.view.View)>,NONE
<com.android.server.net.NetworkPolicyManagerService: void addNetworkPolicyLocked(android.net.NetworkPolicy)>,SINK
<com.android.settings.tts.TextToSpeechSettings: void onCreate(android.os.Bundle)>,NONE
<com.android.settings.PrivacySettings: void onResume()>,NONE
"<com.android.settings.AccessibilitySettings: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)>",NONE
<com.android.settings.accounts.SyncSettings: void onCreate(android.os.Bundle)>,NONE
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker: void toggleState(android.content.Context)>,NONE
<com.android.settings.widget.SettingsAppWidgetProvider$SettingsObserver: void onChange(boolean)>,NONE
<com.android.settings.bluetooth.DockService: void handleBluetoothStateOn(int)>,NONE
"<com.android.settings.bluetooth.DockService: boolean msgTypeDocked(android.bluetooth.BluetoothDevice,int,int)>",NONE
<com.android.bluetooth.opp.BluetoothOppIncomingFileConfirmActivity: void onCreate(android.os.Bundle)>,NONE
<android.nfc.INfcAdapter$Stub$Proxy: boolean disableNdefPush()>,NONE
<android.bluetooth.BluetoothAdapter: boolean setName(java.lang.String)>,NONE
<android.bluetooth.IBluetooth$Stub$Proxy: boolean startDiscovery()>,NONE
"<android.bluetooth.IBluetoothHeadset$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>",SINK
<com.android.settings.DateTimeSettings: void onPause()>,NONE
<com.android.settings.vpn2.VpnSettings: void onPause()>,NONE
<android.bluetooth.BluetoothDeviceProfileState$IncomingHandsfree: void enter()>,SINK
<android.server.BluetoothService: boolean removeBondInternal(java.lang.String)>,NONE
"<com.android.bluetooth.pbap.BluetoothPbapService: int onStartCommand(android.content.Intent,int,int)>",NONE
<android.bluetooth.IBluetooth$Stub$Proxy: boolean disconnectInputDevice(android.bluetooth.BluetoothDevice)>,SINK
<com.android.phone.BluetoothHandsfree$20: android.bluetooth.AtCommandResult handleTestCommand()>,NONE
<com.android.phone.BluetoothHandsfree$24: android.bluetooth.AtCommandResult handleTestCommand()>,NONE
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean startScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)>,SINK
<com.android.phone.BluetoothHandsfree$28: android.bluetooth.AtCommandResult handleActionCommand()>,NONE
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleActionCommand()>,NONE
<android.media.AudioService$ScoClient: void clearCount(boolean)>,NONE
<android.media.AudioService$ScoClient: void incCount()>,NONE
"<android.media.AudioService: void setMode(int,android.os.IBinder)>",SINK
<com.android.phone.EmergencyCallHelper: void onServiceStateChanged(android.os.Message)>,NONE
<com.android.phone.InCallTouchUi: void onClick(android.view.View)>,NONE
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)>,NONE
<com.android.phone.BluetoothHandsfree$23: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)>,NONE
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)>,NONE
<com.android.phone.DTMFTwelveKeyDialerView: boolean dispatchKeyEvent(android.view.KeyEvent)>,NONE
<com.android.phone.OtaUtils: void onClickOtaActivateButton()>,NONE
<com.android.phone.EmergencyCallHelper: void onDisconnect(android.os.Message)>,NONE
"<com.android.internal.widget.multiwaveview.GlowPadView: boolean trySwitchToFirstTouchState(float,float)>",NONE
<com.android.internal.widget.multiwaveview.GlowPadView$2: void onAnimationEnd(android.animation.Animator)>,NONE
<com.android.phone.BluetoothHandsfree: android.bluetooth.AtCommandResult redial()>,SINK
<com.android.phone.InCallScreen: void onBackPressed()>,NONE
<com.android.phone.InCallScreen: void onDisconnect(android.os.AsyncResult)>,SINK
<com.android.phone.InCallScreen: void updateAfterRadioTechnologyChange()>,NONE
<com.android.phone.InCallScreen: void delayedCleanupAfterDisconnect()>,NONE
<com.android.phone.OtaUtils: void otaShowHome()>,NONE
"<com.android.phone.RespondViaSmsManager$RespondViaSmsItemClickListener: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>",SINK
<com.android.phone.InCallScreen: void requestRemoveProviderInfoWithDelay()>,NONE
<android.server.BluetoothEventLoop: void onDeviceRemoved(java.lang.String)>,SINK
"<com.android.bluetooth.opp.BluetoothOppService: int onStartCommand(android.content.Intent,int,int)>",NONE
<com.android.bluetooth.opp.BluetoothOppService: void onCreate()>,NONE
<com.android.bluetooth.pbap.BluetoothPbapService$SocketAcceptThread: void run()>,SINK
"<android.os.IVibratorService$Stub$Proxy: void vibrate(long,android.os.IBinder)>",SINK
<com.android.contacts.dialpad.DialpadFragment: boolean onLongClick(android.view.View)>,NONE
<com.android.phone.CallNotifier: void onCustomRingtoneQueryTimeout(java.lang.String)>,NONE
<com.android.systemui.statusbar.phone.PhoneStatusBar: void updateSearchPanel()>,NONE
<com.android.systemui.statusbar.DelegateViewHelper: boolean onInterceptTouchEvent(android.view.MotionEvent)>,NONE
<com.android.server.ShutdownActivity$1: void run()>,NONE
<com.android.gallery3d.ui.PhotoView$1: void onClick(com.android.gallery3d.ui.GLView)>,NONE
<com.android.inputmethod.keyboard.LatinKeyboardView$KeyTimerHandler: void startLongPressTimer(int)>,SINK
"<com.android.systemui.statusbar.BaseStatusBar: void updateNotification(android.os.IBinder,com.android.internal.statusbar.StatusBarNotification)>",NONE
<com.android.systemui.SwipeHelper$2: void onAnimationEnd(android.animation.Animator)>,NONE
"<com.android.inputmethod.accessibility.AccessibilityEntityProvider: boolean performAction(int,int,android.os.Bundle)>",SINK
<com.android.nfc.P2pEventManager: void onP2pInRange()>,NONE
"<com.android.mms.transaction.SimFullReceiver: void onReceive(android.content.Context,android.content.Intent)>",NONE
"<com.android.systemui.screenshot.GlobalScreenshot: void notifyScreenshotError(android.content.Context,android.app.NotificationManager)>",SINK
"<com.android.phone.CallNotifier: void showMissedCallNotification(com.android.internal.telephony.Connection,long)>",NONE
<com.android.phone.NotificationMgr: void updateInCallNotification()>,NONE
<com.android.server.usb.UsbDeviceManager$UsbHandler: void updateState(java.lang.String)>,SINK
<android.content.SyncManager$SyncHandler: long maybeStartNextSyncLocked()>,SINK
<com.android.email.SecurityPolicy: void onPasswordExpiring(android.content.Context)>,SINK
<com.android.contacts.vcard.NfcImportVCardActivity$ImportTask: com.android.contacts.vcard.ImportRequest doInBackground(com.android.contacts.vcard.VCardService[])>,SOURCE
<com.android.providers.downloads.DownloadService$UpdateThread: void run()>,NONE
<com.android.server.usb.UsbService: void <init>(android.content.Context)>,NONE
<com.android.settings.DataUsageSummary: void setRestrictBackground(boolean)>,SINK
"<android.content.SyncManager: void <init>(android.content.Context,boolean)>",NONE
"<android.content.SyncManager$ActiveSyncContext: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>",SINK
<com.android.vcard.VCardParserImpl_V21: boolean parseItem()>,NONE
<com.android.vcard.VCardParserImpl_V40: boolean parseItem()>,SOURCE
"<android.content.ContentService: android.content.IContentService main(android.content.Context,boolean)>",NONE
"<com.android.exchange.ExchangeService$2: void startSync(long,boolean)>",NONE
<com.android.exchange.adapter.Parser: boolean parse()>,NONE
"<com.android.exchange.ExchangeService: void startManualSync(long,int,com.android.exchange.Request)>",SINK
<com.android.email.activity.UIControllerOnePane: void onRefresh()>,NONE
<com.android.email.activity.setup.MailboxSettings$2: void onSuccess(java.lang.Object)>,NONE
<com.android.email.activity.MessageViewFragment: void onClick(android.view.View)>,NONE
"<com.android.providers.downloads.DownloadService$1: void scanCompleted(java.lang.String,android.net.Uri)>",NONE
"<com.android.browser.Tab$4: void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)>",NONE
"<com.android.providers.downloads.DownloadInfo$Reader: com.android.providers.downloads.DownloadInfo newDownloadInfo(android.content.Context,com.android.providers.downloads.SystemFacade)>",SOURCE
<android.media.IAudioService$Stub$Proxy: void setBluetoothScoOn(boolean)>,SINK
"<com.android.phone.PhoneUtils: void turnOnSpeaker(android.content.Context,boolean,boolean)>",NONE
<com.android.internal.policy.impl.SimPukUnlockScreen$TouchInput: void onClick(android.view.View)>,NONE
"<com.android.internal.policy.impl.PasswordUnlockScreen: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)>",NONE
"<com.android.internal.policy.impl.PhoneWindowManager: void init(android.content.Context,android.view.IWindowManager,android.view.WindowManagerPolicy$WindowManagerFuncs,android.os.LocalPowerManager)>",NONE
<com.android.internal.policy.impl.KeyguardViewBase: boolean dispatchKeyEvent(android.view.KeyEvent)>,SINK
<com.android.server.wm.WindowManagerService$1: void acquired()>,NONE
<com.android.internal.policy.impl.PatternUnlockScreen$UnlockPatternListener: void onPatternCellAdded(java.util.List)>,NONE
<android.view.IWindowManager$Stub$Proxy: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)>,NONE
<com.android.internal.policy.impl.KeyguardViewMediator: void keyguardDone(boolean)>,SINK
<com.android.internal.widget.SlidingTab: void setGrabbedState(int)>,NONE
"<com.android.settings.DevelopmentSettings: boolean isPermissionEnforced(android.content.Context,java.lang.String)>",SOURCE
"<com.android.providers.media.MediaProvider: android.os.ParcelFileDescriptor getThumb(com.android.providers.media.MediaProvider$DatabaseHelper,android.database.sqlite.SQLiteDatabase,java.lang.String,long,android.net.Uri)>",SOURCE
<com.android.browser.BrowserHistoryPage$ClearHistoryTask: void run()>,NONE
<android.provider.Browser: boolean canClearHistory(android.content.ContentResolver)>,SOURCE
"<com.android.browser.Tab: void <init>(com.android.browser.WebViewController,android.webkit.WebView)>",NONE
<com.android.browser.Tab: void capture()>,NONE
<com.android.browser.TabControl: com.android.browser.SnapshotTab createSnapshotTab(long)>,NONE
"<com.android.browser.SnapshotTab: void onNewPicture(android.webkit.WebView,android.graphics.Picture)>",NONE
"<com.android.browser.Controller: com.android.browser.Tab openTab(java.lang.String,boolean,boolean,boolean)>",NONE
"<com.android.browser.Controller: boolean onKeyUp(int,android.view.KeyEvent)>",NONE
<com.android.browser.Tab$3: void onCloseWindow(android.webkit.WebView)>,NONE
<com.android.browser.AddBookmarkPage$SaveBookmarkRunnable: void run()>,NONE
"<com.android.inputmethod.latin.UserHistoryDictionary: void getWords(com.android.inputmethod.latin.WordComposer,java.lang.CharSequence,com.android.inputmethod.latin.Dictionary$WordCallback,com.android.inputmethod.keyboard.ProximityInfo)>",NONE
<com.android.inputmethod.latin.SynchronouslyLoadedContactsDictionary: void blockingReloadDictionaryIfRequired()>,NONE
"<com.android.inputmethod.latin.SynchronouslyLoadedUserDictionary: void getBigrams(com.android.inputmethod.latin.WordComposer,java.lang.CharSequence,com.android.inputmethod.latin.Dictionary$WordCallback)>",NONE
"<com.android.inputmethod.latin.SynchronouslyLoadedUserDictionary: void <init>(android.content.Context,java.lang.String,boolean)>",NONE
"<com.android.inputmethod.latin.LatinIME: void handleCharacterWhileInBatchEdit(int,int,int,int,android.view.inputmethod.InputConnection)>",NONE
"<com.android.inputmethod.latin.Suggest: void <init>(android.content.Context,java.util.Locale)>",NONE
"<com.android.inputmethod.latin.LatinIME: void onStartInputView(android.view.inputmethod.EditorInfo,boolean)>",NONE
<com.android.inputmethod.keyboard.PointerTracker: void onRegisterKey(com.android.inputmethod.keyboard.Key)>,NONE
<com.android.inputmethod.keyboard.PointerTracker: void startRepeatKey(com.android.inputmethod.keyboard.Key)>,NONE
<com.android.inputmethod.keyboard.internal.PointerTrackerQueue: void releaseAllPointers(long)>,NONE
<com.android.inputmethod.latin.ExpandableBinaryDictionary$AsyncReloadDictionaryTask: void run()>,NONE
"<com.android.providers.userdictionary.DictionaryBackupAgent: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)>",SINK
<android.os.storage.IMountService$Stub$Proxy: void shutdown(android.os.storage.IMountShutdownObserver)>,SINK
<android.os.storage.StorageManager: void disableUsbMassStorage()>,NONE
<com.android.server.MountService: int mountVolume(java.lang.String)>,NONE
<android.hardware.Camera: android.hardware.Camera open()>,SOURCE
<android.filterpacks.videosink.MediaEncoderFilter: void open(android.filterfw.core.FilterContext)>,SINK
<android.filterpacks.base.FrameSource: void performProcess(android.filterfw.core.FilterContext)>,NONE
"<android.media.effect.effects.AutoFixEffect: void apply(int,int,int,int)>",NONE
"<android.media.effect.effects.BitmapOverlayEffect: void apply(int,int,int,int)>",NONE
"<android.media.effect.effects.BlackWhiteEffect: void apply(int,int,int,int)>",NONE
"<android.media.effect.effects.CropEffect: void apply(int,int,int,int)>",NONE
"<android.media.effect.FilterGraphEffect: void apply(int,int,int,int)>",SINK
"<android.media.effect.effects.BackDropperEffect: void apply(int,int,int,int)>",SINK
<com.android.camera.VideoCamera: void updateRecordingTime()>,NONE
"<com.android.camera.VideoCamera: void onEffectsUpdate(int,int)>",NONE
"<com.android.camera.VideoCamera: void onError(android.media.MediaRecorder,int,int)>",NONE
"<com.android.camera.ui.InLineSettingKnob$3: boolean onTouch(android.view.View,android.view.MotionEvent)>",NONE
<com.android.gallery3d.ui.PhotoView: void render(com.android.gallery3d.ui.GLCanvas)>,NONE
<com.android.gallery3d.ui.CropView: void render(com.android.gallery3d.ui.GLCanvas)>,NONE
"<com.android.gallery3d.ui.GLView: void renderChild(com.android.gallery3d.ui.GLCanvas,com.android.gallery3d.ui.GLView)>",NONE
"<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int,java.util.Map,boolean)>",NONE
"<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int,boolean)>",NONE
"<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int)>",NONE
"<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet)>",NONE
<android.webkit.WebView: void <init>(android.content.Context)>,NONE
<com.android.internal.telephony.test.ModelInterpreter: void <init>(java.net.InetSocketAddress)>,NONE
<java.net.URL: java.net.URLConnection openConnection()>,SINK
<com.android.browser.WallpaperHandler: boolean onMenuItemClick(android.view.MenuItem)>,NONE
<com.google.common.io.ByteStreams: byte[] toByteArray(com.google.common.io.InputSupplier)>,NONE
<com.google.common.io.ByteStreams: long length(com.google.common.io.InputSupplier)>,NONE
"<com.google.common.io.CharStreams: long copy(com.google.common.io.InputSupplier,com.google.common.io.OutputSupplier)>",NONE
<com.google.common.io.CharStreams$4: java.lang.Object getInput()>,SOURCE
<android.app.backup.BackupAgentHelper: void setWallpaper(android.graphics.Bitmap)>,SINK
<android.accounts.AccountAuthenticatorActivity: void setWallpaper(java.io.InputStream)>,SINK
<android.accessibilityservice.AccessibilityService: void setWallpaper(android.graphics.Bitmap)>,SINK
<com.android.contacts.list.LegacyContactListAdapter: android.net.Uri getPersonUri(int)>,SOURCE
"<com.android.contacts.list.ContactBrowseListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>",NONE
"<com.android.contacts.list.DefaultContactBrowseListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>",NONE
<com.android.contacts.dialog.ClearFrequentsDialog$1$1: java.lang.Object doInBackground(java.lang.Object[])>,NONE
"<com.android.contacts.group.GroupEditorFragment$Member: void <init>(long,java.lang.String,long,java.lang.String,java.lang.String)>",NONE
"<com.android.calendar.EventInfoFragment: void showContactInfo(com.android.calendar.CalendarEventModel$Attendee,android.graphics.Rect)>",NONE
"<com.android.providers.contacts.LegacyApiSupport: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String)>",SOURCE
<com.android.providers.contacts.LegacyApiSupport: java.lang.String getContactMethodType(android.net.Uri)>,SOURCE
"<com.android.contacts.list.JoinContactListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)>",SOURCE
"<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)>",SOURCE
"<com.android.providers.contacts.ContactsProvider2: int deleteData(java.lang.String,java.lang.String[],boolean)>",SOURCE
"<com.android.contacts.list.ContactPickerFragment: void onLoadFinished(android.content.Loader,java.lang.Object)>",NONE
<com.android.contacts.activities.PeopleActivity: void configureContactListFragmentForRequest()>,NONE
<com.android.contacts.list.JoinContactListFragment: void onAttach(android.app.Activity)>,NONE
"<com.android.contacts.list.ContactBrowseListFragment: void setQueryString(java.lang.String,boolean)>",NONE
<com.android.contacts.activities.NonPhoneActivity: void onServiceCompleted(android.content.Intent)>,NONE
<com.android.contacts.CallContactActivity: void onServiceCompleted(android.content.Intent)>,NONE
<com.android.contacts.activities.PeopleActivity: boolean onSearchRequested()>,NONE
<com.android.contacts.activities.TransactionSafeActivity: boolean onSearchRequested()>,NONE
<com.android.contacts.model.AccountTypeManagerImpl$1: void run()>,NONE
<com.android.contacts.activities.GroupEditorActivity: void onBackPressed()>,NONE
<com.android.providers.contacts.LegacyApiSupport: int updateSettings(android.content.ContentValues)>,SINK
<com.android.mms.ui.ConversationListItem: void updateAvatarView()>,SINK
<com.android.mms.ui.ConversationListItem: void updateFromView()>,SINK
<com.android.exchange.adapter.ContactsSyncAdapter$ContactOperations: void delete(long)>,NONE
"<com.android.contacts.group.GroupEditorFragment$3: android.content.CursorLoader onCreateLoader(int,android.os.Bundle)>",NONE
<com.android.contacts.editor.StructuredNameEditorView: void notifyEditorListener()>,NONE
"<com.android.contacts.editor.EventFieldEditorView: void onFieldChanged(java.lang.String,java.lang.String)>",SINK
"<com.android.server.LocationManagerService: void requestLocationUpdatesLocked(java.lang.String,long,float,boolean,com.android.server.LocationManagerService$Receiver)>",SINK
"<android.location.ILocationManager$Stub$Proxy: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>",SINK
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>,SOURCE
<com.android.server.location.LocationBasedCountryDetector: android.location.Country detectCountry()>,SOURCE
<com.android.camera.LocationManager: void recordLocation(boolean)>,NONE
"<com.android.server.LocationManagerService: java.lang.String getBestProvider(android.location.Criteria,boolean)>",SOURCE
<com.android.internal.telephony.ITelephony$Stub$Proxy: android.os.Bundle getCellLocation()>,SOURCE
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>,SOURCE
<android.app.ActivityGroup: void finishFromChild(android.app.Activity)>,NONE
<android.app.ActivityGroup: void finish()>,NONE
<android.app.Activity: void finish()>,NONE
"<android.accounts.AccountManagerService: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)>",SINK
"<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)>",SOURCE
<com.android.contacts.list.ProfileAndContactsLoader: android.database.Cursor loadInBackground()>,SOURCE
<com.android.contacts.list.ProfileAndContactsLoader: java.lang.Object loadInBackground()>,SOURCE
<com.android.vcard.VCardComposer: boolean init()>,NONE
"<com.android.bluetooth.pbap.BluetoothPbapObexServer: int pullVcardListing(byte[],com.android.bluetooth.pbap.BluetoothPbapObexServer$AppParamValue,javax.obex.HeaderSet,javax.obex.Operation)>",SINK
<com.android.contacts.list.CustomContactListFilterActivity$CustomFilterConfigurationLoader: com.android.contacts.list.CustomContactListFilterActivity$AccountSet loadInBackground()>,SOURCE
"<com.android.phone.CallCard: void displaySecondaryCallStatus(com.android.internal.telephony.CallManager,com.android.internal.telephony.Call)>",NONE
"<android.provider.ContactsContract$ProfileSyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)>",SOURCE
<com.android.phone.BluetoothAtPhonebook$3: android.bluetooth.AtCommandResult handleReadCommand()>,SOURCE
<com.android.contacts.editor.RawContactEditorView: void setPhotoBitmap(android.graphics.Bitmap)>,SINK
"<com.android.contacts.interactions.ImportExportDialogFragment$2: void onClick(android.content.DialogInterface,int)>",NONE
<com.android.contacts.ContactPhotoManagerImpl$LoaderThread: void loadPhotosInBackground()>,NONE
"<android.content.ContentService: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)>",SINK
"<android.content.IContentService$Stub$Proxy: void setIsSyncable(android.accounts.Account,java.lang.String,int)>",SINK
"<android.accounts.IAccountManager$Stub$Proxy: void removeAccount(android.accounts.IAccountManagerResponse,android.accounts.Account)>",SINK
"<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)>",SOURCE
<android.accounts.GrantCredentialsPermissionActivity: void onCreate(android.os.Bundle)>,NONE
<android.app.ActivityGroup: void finishActivity(int)>,NONE
<android.accounts.AccountAuthenticatorActivity: void setRequestedOrientation(int)>,SINK
<android.app.backup.BackupAgentHelper: void unregisterReceiver(android.content.BroadcastReceiver)>,NONE
"<android.app.ActivityManager: boolean clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver)>",NONE
<android.app.Activity: boolean startNextMatchingActivity(android.content.Intent)>,SINK
"<android.app.ActivityManagerNative: boolean startNextMatchingActivity(android.os.IBinder,android.content.Intent)>",SINK
"<android.accounts.AccountAuthenticatorActivity: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>",SINK
"<android.accounts.AccountAuthenticatorActivity: void sendBroadcast(android.content.Intent,java.lang.String)>",SINK
"<android.app.ActivityManagerNative: int startActivityWithConfig(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.net.Uri[],int,android.os.IBinder,java.lang.String,int,boolean,boolean,android.content.res.Configuration)>",SINK
"<android.app.ActivityManagerNative: void broadcastStickyIntent(android.content.Intent,java.lang.String)>",SINK
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void fixTimeZone(java.lang.String)>,SINK
"<com.android.server.TelephonyRegistry: void notifyDataConnectionFailed(java.lang.String,java.lang.String)>",SINK
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void fixTimeZone(java.lang.String)>,SINK
<com.android.server.NsdService$NsdStateMachine$DisabledState: void enter()>,NONE
"<com.android.internal.telephony.PhoneBase: void notifyDataConnection(java.lang.String,java.lang.String)>",SINK
<com.android.internal.telephony.gsm.GSMPhone: void notifyServiceStateChanged(android.telephony.ServiceState)>,SINK
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRadioOffOrNotAvailable()>,NONE
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDataConnectionDetached()>,NONE
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void doRecovery()>,NONE
"<android.app.ContextImpl: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>",SINK
<com.android.providers.contacts.ContactsProvider2: void enforceSocialStreamReadPermission(android.net.Uri)>,NONE
<com.android.server.AppWidgetService: void systemReady(boolean)>,NONE
"<com.android.server.am.ActivityManagerService: void cleanUpRemovedTaskLocked(com.android.server.am.TaskRecord,int)>",NONE
<com.android.server.am.BroadcastQueue: void skipPendingBroadcastLocked(int)>,NONE
<com.android.server.am.ActivityManagerService: void killBackgroundProcesses(java.lang.String)>,NONE
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceSvn()>,SOURCE
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getSubscriberId()>,SOURCE
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getLine1Number()>,SOURCE
<com.android.mms.transaction.RetrieveTransaction: byte[] getPdu(java.lang.String)>,SOURCE
"<com.android.mms.transaction.SendTransaction: byte[] sendPdu(long,byte[],java.lang.String)>",SINK
"<com.android.mms.transaction.Transaction: byte[] sendPdu(byte[],java.lang.String)>",SINK
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getVoiceMailNumber()>,SOURCE
<com.android.contacts.detail.ContactDetailLayoutController: void showContactWithUpdates(boolean)>,NONE
"<com.android.phone.CallNotifier: com.android.phone.CallNotifier init(com.android.phone.PhoneApp,com.android.internal.telephony.Phone,com.android.phone.Ringer,com.android.phone.BluetoothHandsfree,com.android.phone.CallLogAsync)>",NONE
"<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>",SINK
<android.telephony.SmsManager: boolean deleteMessageFromIcc(int)>,SINK
"<android.telephony.gsm.SmsManager: boolean updateMessageOnSim(int,int,byte[])>",SINK
"<com.android.providers.telephony.SmsProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>",SINK
"<com.android.internal.telephony.gsm.SimSmsInterfaceManager: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>",SINK
"<android.telephony.gsm.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>",SINK
<com.android.providers.contacts.VoicemailPermissions: boolean packageHasFullAccess(java.lang.String)>,SOURCE
"<com.android.providers.contacts.CallLogProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>",NONE
"<com.android.providers.contacts.CallLogProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>",SOURCE
"<android.view.IWindowSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>",SINK
<android.net.IConnectivityManager$Stub$Proxy: void setMobileDataEnabled(boolean)>,SINK
"<com.android.settings.DataUsageSummary$4: void onCheckedChanged(android.widget.CompoundButton,boolean)>",NONE
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean endCall()>,NONE
<com.android.contacts.list.PhoneFavoriteFragment: void onStart()>,NONE
"<com.android.server.NotificationManagerService: void <init>(android.content.Context,com.android.server.StatusBarManagerService,com.android.server.LightsService)>",NONE
"<android.provider.Settings$Secure: boolean putInt(android.content.ContentResolver,java.lang.String,int)>",NONE
<com.android.server.InputMethodManagerService$InputMethodSettings: void putSelectedSubtype(int)>,SINK
"<android.app.backup.IBackupManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>",SINK
"<com.android.server.InputMethodManagerService$InputMethodSettings: void addSubtypeToHistory(java.lang.String,java.lang.String)>",SINK
<com.android.server.InputMethodManagerService$MyPackageMonitor: void onSomePackagesChanged()>,NONE
"<android.server.search.SearchManagerService$MyPackageMonitor: void onReceive(android.content.Context,android.content.Intent)>",NONE
"<com.android.server.WallpaperManagerService$MyPackageMonitor: void onReceive(android.content.Context,android.content.Intent)>",NONE
<com.android.uiautomator.core.UiAutomatorBridge: void disconnect()>,NONE
"<android.provider.Settings$System: boolean putInt(android.content.ContentResolver,java.lang.String,int)>",NONE
<com.android.server.am.ActivityManagerService: void setAlwaysFinish(boolean)>,SINK
"<com.android.settings.SoundSettings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)>",SINK
<com.android.deskclock.Alarms: void disableAlert(android.content.Context)>,NONE
<com.android.music.QueryBrowserActivity: boolean onOptionsItemSelected(android.view.MenuItem)>,NONE
"<com.android.systemui.statusbar.policy.AutoRotateController: void onCheckedChanged(android.widget.CompoundButton,boolean)>",NONE
<com.android.deskclock.HandleSetAlarm: void onCreate(android.os.Bundle)>,SINK
<com.android.exchange.ExchangeService$CalendarObserver$1: void run()>,NONE
"<com.android.calendar.CalendarUtils$TimeZoneUtils: java.lang.String getTimeZone(android.content.Context,java.lang.Runnable)>",SOURCE
"<com.android.calendar.widget.CalendarAppWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])>",SINK
<com.android.calendar.DayView: void onDraw(android.graphics.Canvas)>,NONE
"<com.android.calendar.DayView: void doFling(android.view.MotionEvent,android.view.MotionEvent,float,float)>",NONE
<com.android.calendar.event.EditEventFragment: boolean onOptionsItemSelected(android.view.MenuItem)>,NONE
"<com.android.calendar.month.MonthByWeekFragment: void onLoadFinished(android.content.Loader,java.lang.Object)>",NONE
<com.android.calendar.month.MonthByWeekFragment: void onAttach(android.app.Activity)>,NONE
<com.android.calendar.AllInOneActivity: void onNewIntent(android.content.Intent)>,NONE
<com.android.exchange.adapter.AbstractSyncAdapter: void <init>(com.android.exchange.EasSyncService)>,NONE
<com.android.calendar.EventLoader: void startBackgroundThread()>,NONE
"<android.provider.CalendarContract$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long)>",SOURCE
"<com.android.internal.telephony.MccTable: void setSystemLocale(android.content.Context,java.lang.String,java.lang.String)>",SINK
<com.android.internal.telephony.ISms$Stub$Proxy: boolean disableCellBroadcast(int)>,SINK
<android.telephony.SmsManager: boolean disableCellBroadcast(int)>,SINK
"<android.accounts.AccountManagerService: void setPassword(android.accounts.Account,java.lang.String)>",SINK
"<android.accounts.IAccountManager$Stub$Proxy: void setPassword(android.accounts.Account,java.lang.String)>",SINK
"<android.accounts.AccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)>",SOURCE
"<android.accounts.AccountManager: void setPassword(android.accounts.Account,java.lang.String)>",SINK
<android.view.IWindowManager$Stub$Proxy: void reenableKeyguard(android.os.IBinder)>,SINK
"<android.content.ContentService: void dump(java.io.FileDescriptor,java.lang.String[])>",SINK
<com.android.server.ConnectivityService: android.net.LinkProperties getLinkProperties(int)>,SOURCE
<com.android.email.EmailConnectivityManager: boolean hasConnectivity()>,SOURCE
<com.android.email.activity.UIControllerBase: void showAccountSpecificWarning(long)>,NONE
<com.android.email.activity.UIControllerBase: void onMessageSetUnread()>,NONE
<com.android.email.activity.MessageViewFragmentBase$LoadAttachmentsTask: void onSuccess(com.android.emailcommon.provider.EmailContent$Attachment[])>,NONE
"<com.android.email.activity.MoveMessageToDialog: void onClick(android.content.DialogInterface,int)>",NONE
<com.android.email.activity.MessageViewFragmentBase$LoadBodyTask: void onSuccess(java.lang.Object)>,NONE
<com.android.email.activity.UIControllerSearchTwoPane: void installMessageViewFragment(com.android.email.activity.MessageViewFragment)>,NONE
"<com.android.server.net.NetworkStatsService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>",SINK
<android.accounts.AccountManagerService: android.accounts.Account[] getAccounts(java.lang.String)>,SOURCE
<com.android.settings.Settings$AdvancedWifiSettingsActivity: void onAccountsUpdated(android.accounts.Account[])>,NONE
<com.android.settings.Settings$DisplaySettingsActivity: void onAccountsUpdated(android.accounts.Account[])>,NONE
<com.android.settings.Settings$RunningServicesActivity: void onAccountsUpdated(android.accounts.Account[])>,NONE
<com.android.settings.Settings$LocationSettingsActivity: void onBuildHeaders(java.util.List)>,NONE
<com.android.contacts.detail.ContactDetailFragment$MakeLocalCopyQuickFix: void execute()>,NONE
<com.android.contacts.group.GroupBrowseListAdapter: void <init>(android.content.Context)>,NONE
"<com.android.contacts.group.GroupDetailDisplayUtils: void bindGroupSourceView(android.content.Context,android.view.View,java.lang.String,java.lang.String)>",NONE
"<com.android.contacts.util.AccountsListAdapter: void <init>(android.content.Context,com.android.contacts.util.AccountsListAdapter$AccountListFilter)>",NONE
<com.android.contacts.editor.ContactEditorFragment: void onAttach(android.app.Activity)>,NONE
<com.android.contacts.activities.ActionBarAdapter: void setCurrentTab(int)>,NONE
"<android.content.ContentResolver: boolean isSyncActive(android.accounts.Account,java.lang.String)>",SOURCE
<android.content.ContentResolver: android.content.SyncInfo getCurrentSync()>,SOURCE
"<android.content.ContentService: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)>",SOURCE
"<android.test.mock.MockContentResolver: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)>",SOURCE
"<android.net.sip.ISipService$Stub$Proxy: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)>",SINK
<android.net.sip.SipManager: void close(java.lang.String)>,NONE
"<com.android.server.sip.SipService: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener)>",NONE
"<android.net.sip.SipManager: android.net.sip.SipAudioCall takeAudioCall(android.content.Intent,android.net.sip.SipAudioCall$Listener)>",SOURCE
<com.android.server.AlarmManagerService: void setTimeZone(java.lang.String)>,SINK
"<android.bluetooth.ScoSocket: boolean connect(java.lang.String,java.lang.String)>",NONE
<android.bluetooth.ScoSocket: void onConnected(int)>,SINK
"<android.view.IWindowManager$Stub$Proxy: void stopAppFreezingScreen(android.os.IBinder,boolean)>",SINK
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean supplyPin(java.lang.String)>,SINK
"<com.android.internal.telephony.SMSDispatcher: void dispatch(android.content.Intent,java.lang.String,android.content.BroadcastReceiver)>",SINK
"<com.android.internal.telephony.SMSDispatcher: void dispatch(android.content.Intent,java.lang.String)>",SINK
<com.android.server.DevicePolicyManagerService: void wipeDataLocked(int)>,NONE
"<android.content.SyncManager$ActiveSyncContext: void <init>(android.content.SyncManager,android.content.SyncOperation,long,int)>",NONE
"<com.android.internal.policy.impl.PhoneWindowManager: void handleVolumeKey(int,int)>",SINK
"<com.android.internal.telephony.gsm.GsmSMSDispatcher: void dispatch(android.content.Intent,java.lang.String,android.content.BroadcastReceiver)>",SINK
"<com.android.internal.telephony.gsm.GsmSMSDispatcher: void dispatch(android.content.Intent,java.lang.String)>",SINK
<android.media.MediaPlayer: void stop()>,NONE
<com.android.server.sip.SipService$AutoRegistrationProcess: void onResponse(boolean)>,NONE
<com.android.settings.CryptKeeper: void setupUi()>,NONE
<android.filterpacks.videosrc.MediaSource: void pauseVideo(boolean)>,NONE
<com.android.ex.variablespeed.VariableSpeed: void prepare()>,NONE
<com.android.internal.telephony.gsm.GsmConnection: void cancelPostDial()>,NONE
<com.android.internal.telephony.RIL: void getAvailableNetworks(android.os.Message)>,NONE
<com.android.internal.telephony.RIL: void getSmscAddress(android.os.Message)>,SOURCE
"<com.android.internal.telephony.RIL: void setSmscAddress(java.lang.String,android.os.Message)>",SINK
"<com.android.phone.CallerInfoCacheUpdateReceiver: void onReceive(android.content.Context,android.content.Intent)>",NONE
<com.android.phone.DTMFTwelveKeyDialer: void onDialerOpen(boolean)>,NONE
<com.android.mms.ui.SlideView: void stopVideo()>,NONE
<com.android.internal.telephony.CommandsInterface: void getSmscAddress(android.os.Message)>,SOURCE
"<com.android.internal.telephony.CommandsInterface: void setSmscAddress(java.lang.String,android.os.Message)>",SINK
"<com.android.server.LocationManagerService$Receiver: boolean callStatusChangedLocked(java.lang.String,int,android.os.Bundle)>",SINK
<com.android.server.wm.WindowManagerService: void reevaluateStatusBarVisibility()>,NONE
<com.android.music.AudioPreview$PreviewPlayer: void onPrepared(android.media.MediaPlayer)>,NONE
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Connection dial(java.lang.String)>,SINK
<com.android.internal.telephony.gsm.GSMPhone: void getOutgoingCallerIdDisplay(android.os.Message)>,NONE
<com.android.internal.telephony.PhoneBase: void getPreferredNetworkType(android.os.Message)>,SOURCE
<com.android.internal.telephony.PhoneBase: void getSmscAddress(android.os.Message)>,SOURCE
<com.android.internal.telephony.cdma.CdmaCallTracker: void rejectCall()>,NONE
<com.android.internal.telephony.cdma.CDMAPhone: void sendDtmf(char)>,SINK
"<com.android.internal.telephony.PhoneBase: void setCdmaSubscription(int,android.os.Message)>",SINK
"<com.android.internal.telephony.cdma.CDMAPhone: void enableEnhancedVoicePrivacy(boolean,android.os.Message)>",SINK
"<com.android.internal.telephony.PhoneBase: void setSmscAddress(java.lang.String,android.os.Message)>",SINK
<com.android.internal.telephony.gsm.GsmDataConnection: void onConnect(com.android.internal.telephony.DataConnection$ConnectionParams)>,SINK
<com.android.internal.telephony.gsm.GsmCallTracker: void switchWaitingOrHoldingAndActive()>,NONE
"<com.android.server.wm.WindowManagerService: void prepareAppTransition(int,boolean)>",NONE
<android.view.IWindowManager$Stub$Proxy: void setNewConfiguration(android.content.res.Configuration)>,SINK
"<com.android.providers.media.RingtonePickerActivity: void onClick(android.content.DialogInterface,int)>",NONE
<com.android.internal.telephony.cdma.CDMALTEPhone: void getSmscAddress(android.os.Message)>,SOURCE
<com.android.internal.telephony.gsm.GSMPhone: void getSmscAddress(android.os.Message)>,SOURCE
<com.android.internal.telephony.sip.SipPhone: void getSmscAddress(android.os.Message)>,SOURCE
"<com.android.internal.telephony.ims.IsimUiccRecords: int fetchIsimRecords(com.android.internal.telephony.IccFileHandler,android.os.Handler)>",NONE
<com.android.internal.telephony.cdma.CDMALTEPhone: void queryCdmaRoamingPreference(android.os.Message)>,NONE
<com.android.internal.telephony.gsm.GSMPhone: void queryCdmaRoamingPreference(android.os.Message)>,NONE
<com.android.internal.telephony.sip.SipPhoneBase: void queryCdmaRoamingPreference(android.os.Message)>,NONE
<com.android.internal.telephony.sip.SipPhone: void queryTTYMode(android.os.Message)>,NONE
<com.android.internal.telephony.cdma.CDMAPhone: void rejectCall()>,NONE
"<com.android.internal.telephony.cdma.CDMALTEPhone: void setBandMode(int,android.os.Message)>",SINK
"<com.android.internal.telephony.sip.SipPhoneBase: void setCdmaSubscription(int,android.os.Message)>",SINK
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void enableSingleLocationUpdate()>,NONE
<com.android.internal.telephony.sip.SipPhoneBase: void restoreSavedNetworkSelection(android.os.Message)>,SINK
"<com.android.internal.telephony.cdma.CDMALTEPhone: void setSmscAddress(java.lang.String,android.os.Message)>",SINK
"<com.android.internal.telephony.cdma.CDMAPhone: void setSmscAddress(java.lang.String,android.os.Message)>",SINK
"<com.android.internal.telephony.gsm.GSMPhone: void setSmscAddress(java.lang.String,android.os.Message)>",SINK
"<com.android.internal.telephony.Phone: void setSmscAddress(java.lang.String,android.os.Message)>",SINK
"<com.android.internal.telephony.sip.SipPhoneBase: void setSmscAddress(java.lang.String,android.os.Message)>",SINK
"<com.android.internal.telephony.sip.SipPhone: void setSmscAddress(java.lang.String,android.os.Message)>",SINK
"<android.webkit.PluginFullScreenHolder$CustomFrameLayout: boolean onKeyDown(int,android.view.KeyEvent)>",NONE
"<com.android.phone.PhoneUtils$2: void onClick(android.content.DialogInterface,int)>",SINK
<com.android.internal.telephony.sip.SipPhone: void exitEmergencyCallbackMode()>,NONE
"<com.android.internal.telephony.AdnRecordCache: void updateAdnByIndex(int,com.android.internal.telephony.AdnRecord,int,java.lang.String,android.os.Message)>",SINK
"<com.android.internal.telephony.IccRecords: void setMsisdnNumber(java.lang.String,java.lang.String,android.os.Message)>",SINK
"<com.android.phone.Use2GOnlyCheckBoxPreference: void <init>(android.content.Context,android.util.AttributeSet)>",NONE
<com.android.server.sip.SipSessionGroup$SipSessionImpl$1: void run()>,NONE
"<com.android.phone.ManageConferenceUtils: void endConferenceConnection(int,com.android.internal.telephony.Connection)>",NONE
"<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendNewSubmitPdu(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.SmsHeader,int,android.app.PendingIntent,android.app.PendingIntent,boolean)>",SINK
<com.android.exchange.ExchangeService: void releaseMailbox(long)>,NONE
<com.android.phone.CallerInfoCache$CacheAsyncTask: void onCancelled(java.lang.Object)>,NONE
<com.android.server.am.ActivityManagerService: void wakingUp()>,NONE
<com.android.server.sip.SipService: void notifyProfileRemoved(android.net.sip.SipProfile)>,SINK
"<com.android.email.service.MailService$ControllerResults: void updateMailboxCallback(com.android.emailcommon.mail.MessagingException,long,long,int,int,java.util.ArrayList)>",SINK
"<com.android.email.Controller$LegacyListener: void synchronizeMailboxStarted(long,long)>",SINK
"<android.content.ContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)>",SOURCE
<android.server.BluetoothA2dpService: boolean isDisconnectSinkFeasible(android.bluetooth.BluetoothDevice)>,SOURCE
<com.android.nfc.handover.HandoverManager: android.nfc.NdefRecord createBluetoothOobDataRecord()>,SOURCE
<android.bluetooth.BluetoothDevice: java.lang.String getName()>,SOURCE
<com.android.nfc.handover.ConfirmConnectActivity: void onCreate(android.os.Bundle)>,NONE
<com.android.settings.Settings$TetherSettingsActivity: void setListAdapter(android.widget.ListAdapter)>,NONE
<android.bluetooth.BluetoothHeadset: int getConnectionState(android.bluetooth.BluetoothDevice)>,SOURCE
<android.bluetooth.BluetoothDeviceProfileState: void cancelCommand(int)>,NONE
"<com.android.server.am.BatteryStatsService: void setBatteryState(int,int,int,int,int,int)>",SINK
<com.android.phone.InCallScreen: void onDialerOpen(boolean)>,NONE
<android.bluetooth.IBluetooth$Stub: int getBondState(java.lang.String)>,SOURCE
<android.bluetooth.BluetoothPan: boolean isTetheringOn()>,SOURCE
<android.bluetooth.IBluetoothPbap$Stub$Proxy: android.bluetooth.BluetoothDevice getClient()>,SOURCE
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: java.util.List getConnectedDevices()>,SOURCE
<com.android.internal.telephony.ITelephony$Stub$Proxy: void answerRingingCall()>,NONE
<android.telephony.TelephonyManager: java.lang.String getCompleteVoiceMailNumber()>,SOURCE
"<android.os.IPowerManager$Stub$Proxy: void setAttentionLight(boolean,int)>",SINK
<android.app.IWallpaperManager$Stub$Proxy: void setWallpaperComponent(android.content.ComponentName)>,SINK
<com.android.server.WallpaperManagerService: void clearWallpaper()>,NONE
<com.android.internal.app.IBatteryStats$Stub$Proxy: void notePhoneOn()>,NONE
"<android.content.ContentService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>",SINK
<android.accounts.AccountAuthenticatorActivity: android.content.ComponentName startService(android.content.Intent)>,SINK
"<android.app.Application: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>",SINK
<android.view.IWindowManager$Stub$Proxy: void executeAppTransition()>,NONE
"<android.accessibilityservice.AccessibilityService: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>",SINK
<android.accessibilityservice.AccessibilityService: android.content.ComponentName startService(android.content.Intent)>,SINK
"<android.app.Activity: void startSearch(java.lang.String,boolean,android.os.Bundle,boolean)>",SINK
<android.os.PowerManager: void reboot(java.lang.String)>,NONE
<android.graphics.Paint: float measureText(java.lang.String)>,NONE
<com.android.server.pm.PackageManagerService$ActivityIntentResolver: android.content.IntentFilter[] newArray(int)>,NONE
"<android.util.Log: int v(java.lang.String,java.lang.String)>",SINK
"<android.util.Log: int println(int,java.lang.String,java.lang.String)>",SINK
"<android.util.Slog: int v(java.lang.String,java.lang.String,java.lang.Throwable)>",SINK
"<com.android.internal.telephony.sip.SipPhoneBase: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)>",SINK
<com.android.internal.telephony.cat.ToneSettings$1: com.android.internal.telephony.cat.ToneSettings[] newArray(int)>,NONE
"<org.apache.harmony.xml.dom.InnerNodeImpl: void getElementsByTagName(org.apache.harmony.xml.dom.NodeListImpl,java.lang.String)>",SOURCE
<com.android.contacts.model.account.BaseAccountType$RelationshipKindBuilder: java.lang.String getTagName()>,NONE
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getPollInterval()>,SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLInputStream: long readUint32()>,SOURCE
<com.android.internal.telephony.OperatorInfo: java.lang.String toString()>,SOURCE
<android.telephony.CellInfoCdma: android.telephony.CellSignalStrengthCdma getCellSignalStrength()>,SOURCE
<com.android.gallery3d.data.SingleItemAlbum: java.lang.String getName()>,SOURCE
<com.android.server.location.PassiveProvider: com.android.internal.location.ProviderProperties getProperties()>,SOURCE
"<com.android.browser.provider.BrowserProvider2: int getUrlCount(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String)>",SOURCE
"<libcore.net.UriCodec: java.lang.String encode(java.lang.String,java.nio.charset.Charset)>",NONE
<com.android.gallery3d.exif.ExifTag: int getLong(int)>,SOURCE
<android.database.sqlite.SQLiteStatement: long executeInsert()>,NONE
<gov.nist.javax.sip.SipStackImpl: java.lang.String[] getEnabledCipherSuites()>,SOURCE
<org.apache.harmony.xnet.provider.jsse.SSLSocketFactoryImpl: java.lang.String[] getDefaultCipherSuites()>,SOURCE
<com.google.android.mms.pdu.DeliveryInd: byte[] getMessageId()>,SOURCE
<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsTethering(java.lang.String[])>,SOURCE
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.lang.String[] getEnabledProtocols()>,SOURCE
"<com.android.mms.data.ContactList: com.android.mms.data.ContactList getByNumbers(java.lang.String,boolean,boolean)>",SOURCE
<com.android.vcard.VCardProperty: java.util.List getValueList()>,SOURCE
<android.app.ExpandableListActivity: void onContentChanged()>,NONE
"<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>",SOURCE
<android.widget.TextView: boolean onPreDraw()>,NONE
"<com.android.email.activity.MailboxFinder: void <init>(android.content.Context,long,int,com.android.email.activity.MailboxFinder$Callback)>",NONE
"<java.lang.ref.Reference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>",NONE
"<android.filterpacks.imageproc.RedEyeFilter: void initProgram(android.filterfw.core.FilterContext,int)>",NONE
<android.view.HardwareCanvas: int callDrawGLFunction(int)>,NONE
<gov.nist.javax.sip.header.Contact: float getQValue()>,NONE
<com.android.calendar.agenda.AgendaWindowAdapter: void setHideDeclinedEvents(boolean)>,NONE
"<com.android.soundrecorder.VUMeter: void <init>(android.content.Context,android.util.AttributeSet)>",NONE
<com.android.contacts.util.ExpirableCache: java.lang.Object get(java.lang.Object)>,NONE
<android.widget.AbsListView: boolean isTextFilterEnabled()>,NONE
<gov.nist.javax.sip.stack.SIPServerTransaction$TransactionTimer: void <init>(gov.nist.javax.sip.stack.SIPServerTransaction)>,NONE
<android.net.NetworkUtils: java.net.InetAddress hexToInet6Address(java.lang.String)>,NONE
"<com.android.mms.ui.MessageListItem: void <init>(android.content.Context,android.util.AttributeSet)>",NONE
"<android.net.sip.SipSession$Listener: void onCallTransferring(android.net.sip.SipSession,java.lang.String)>",NONE
<com.android.phone.CallController: void handleMessage(android.os.Message)>,NONE
<gov.nist.javax.sip.header.CallIdentifier: boolean equals(java.lang.Object)>,NONE
"<com.android.internal.widget.PasswordEntryKeyboard: void <init>(android.content.Context,int)>",NONE
<android.animation.ValueAnimator: void setDurationScale(float)>,NONE
<com.android.videoeditor.widgets.ZoomControl: void setOnZoomChangeListener(com.android.videoeditor.widgets.ZoomControl$OnZoomChangeListener)>,NONE
<java.util.Collections$SingletonMap$1$1: java.lang.Object next()>,NONE
"<android.text.style.ImageSpan: void <init>(android.content.Context,android.graphics.Bitmap)>",NONE
<com.android.internal.policy.impl.keyguard.KeyguardMultiUserAvatar: void setPressed(boolean)>,SINK
<com.android.org.bouncycastle.asn1.ASN1Object: com.android.org.bouncycastle.asn1.ASN1Primitive toASN1Object()>,SOURCE
"<java.lang.AbstractStringBuilder: int lastIndexOf(java.lang.String,int)>",NONE
<com.android.mms.ui.SlideshowEditActivity: void onSaveInstanceState(android.os.Bundle)>,NONE
"<com.android.server.ProcessMap: java.lang.Object get(java.lang.String,int)>",NONE
"<android.webkit.WebViewClassic$5: void onClick(android.content.DialogInterface,int)>",NONE
<com.google.common.collect.BstInOrderPath: void <clinit>()>,NONE
"<android.opengl.GLLogWrapper: void glColorPointer(int,int,int,int)>",NONE
"<com.google.android.gles_jni.EGLImpl: javax.microedition.khronos.egl.EGLSurface eglCreatePixmapSurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object,int[])>",NONE
"<android.filterfw.geometry.Rectangle: android.filterfw.geometry.Rectangle fromCenterVerticalAxis(android.filterfw.geometry.Point,android.filterfw.geometry.Point,android.filterfw.geometry.Point)>",NONE
<com.android.vcard.VCardProperty: byte[] getByteValue()>,SOURCE
"<android.telephony.PhoneNumberFormattingTextWatcher: void beforeTextChanged(java.lang.CharSequence,int,int,int)>",NONE
"<android.webkit.WebViewClient: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)>",NONE
<com.android.gallery3d.exif.CountedDataInputStream: long readUnsignedInt()>,NONE
"<android.media.effect.effects.StraightenEffect: void <init>(android.media.effect.EffectContext,java.lang.String)>",NONE
<org.apache.http.protocol.DefaultedHttpContext: java.lang.Object getAttribute(java.lang.String)>,SOURCE
<com.android.providers.calendar.CalendarAlarmManager: void acquireScheduleNextAlarmWakeLock()>,NONE
<java.nio.IntToByteBufferAdapter: int protectedArrayOffset()>,NONE
<android.widget.Editor: void finishBatchEdit(android.widget.Editor$InputMethodState)>,NONE
<com.android.camera.ListPreference: java.lang.String getKey()>,SOURCE
<com.android.contacts.dialog.ClearFrequentsDialog$1$1: void onPostExecute(java.lang.Object)>,NONE
<com.android.mms.data.Conversation: void setRecipients(com.android.mms.data.ContactList)>,NONE
<com.android.internal.telephony.cdma.CdmaConnection: long getCreateTime()>,SOURCE
"<android.os.MessageQueue: boolean enqueueMessage(android.os.Message,long)>",NONE
<java.util.UUID: long getLeastSignificantBits()>,SOURCE
<android.webkit.WebSettings: boolean getJavaScriptCanOpenWindowsAutomatically()>,SOURCE
<com.android.browser.BrowserHistoryPage$HistoryAdapter: void changeCursor(android.database.Cursor)>,NONE
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory$3: void run()>,NONE
"<android.app.ExpandableListActivity: boolean setSelectedChild(int,int,boolean)>",SINK
<com.google.common.collect.ForwardingMap: java.lang.Object get(java.lang.Object)>,SOURCE
"<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int,int)>",SOURCE
<android.app.Notification$Style: void setBuilder(android.app.Notification$Builder)>,NONE
<com.android.internal.widget.TransportControlView$1: void <init>(com.android.internal.widget.TransportControlView)>,NONE
<com.coremedia.iso.Hex: void <init>()>,NONE
"<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>",NONE
<com.android.uiautomator.core.UiDevice: boolean isInWatcherContext()>,NONE
<com.googlecode.mp4parser.authoring.TrackMetaData: long getTimescale()>,NONE
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setPreferredInternationalPrefix(java.lang.String)>,NONE
<com.google.common.collect.MapMakerInternalMap$Segment: void tryExpireEntries()>,NONE
"<com.android.internal.policy.impl.keyguard.KeyguardUpdateMonitor$BatteryStatus: void <init>(int,int,int,int)>",NONE
<com.android.mms.util.ThumbnailManager: void <init>(android.content.Context)>,NONE
"<android.content.ContentProviderClient: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>",SOURCE
<javax.security.cert.CertificateEncodingException: void <init>(java.lang.String)>,NONE
<com.android.mms.ui.SlideListItemView: void startVideo()>,NONE
<libcore.io.MemoryMappedFile: void close()>,NONE
<com.android.contacts.widget.TransitionAnimationView: void onFinishInflate()>,NONE
"<com.android.internal.content.PackageMonitor: void onPackageChanged(java.lang.String,int,java.lang.String[])>",NONE
<android.location.LocationManager: void removeAllGeofences(android.app.PendingIntent)>,NONE
<android.nfc.NdefRecord: int getByteLength()>,SOURCE
<com.android.contacts.util.StreamItemEntry: void decodeHtml(android.content.Context)>,NONE
